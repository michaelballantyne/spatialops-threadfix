/**
  \mainpage
  \tableofcontents
  
  The SpatialOps library provides support for operations on fields primarily
  on structured meshes.
  
  A number of students have contributed to development of SpatialOps over the past few years,
  including: Chris Earl, Abhishek Bagusetty, and Michael Ballentyne.
  
  ### Questions/problems/suggestions?
   Please contact Professor [James Sutherland](http://www.che.utah.edu/~sutherland)
 
 \section start Getting started
  - For instructions on building the library, see \ref building
  - The best way to become acquainted with basic usage of SpatialOps is to
    start with the <a href="examples.html">Examples</a>.
 
 
 \section license License
  
\verbatim
 Copyright (c) 2014 The University of Utah
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to
 deal in the Software without restriction, including without limitation the
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 IN THE SOFTWARE.
\endverbatim
 
 
  @defgroup optypes Operator Types
  @brief Information about operator types that are predefined in SpatialOps.
 
  @defgroup fields        Field Tools
  @brief    Information about fields and how to manipulate and create them.
 
  @defgroup fieldtypes    Field Types
  @brief    Information about field types that are predefined in SpatialOps.




 \page building Building SpatialOps
 \tableofcontents
 
 
 \section prereqs Prerequisites
  - [git](http://git-scm.com/)
  - [CMake](cmake.org), which SpatialOps uses for its build system
  - The [Boost libraries](boost.org)
  - For the GPU backends, a functioning CUDA nvcc installation with an nVidia GPU card
 
 \section download Downloading the source code
 The source may be obtained via git:
 \verbatim
 git clone git://software.crsim.utah.edu/SpatialOps.git [destination path]
 \endverbatim
 Alternatively, if you have proper access, you can check out via https which
 will allow you to push changes back to the origin:
 \verbatim
 git clone ssh://[yourUNID]@software.crsim.utah.edu/uufs/crsim.utah.edu/host/home/git_repos/SpatialOps.git [destination]
 \endverbatim
 
 \section config Configuring 
 The following table summarizes the available build options
 
  Option              | Default     | Description
 -------------------- | ----------- | ------------
 `CMAKE_BUILD_TYPE    ` | `Release`   | `[Release `\|` Debug]` Specifies the optimization level
 `CMAKE_INSTALL_PREFIX` | build dir   | `[path]` Location to install the library to (defaults to the build directory)
 `ENABLE_CUDA         ` | `OFF`       | `[ON` \| `OFF]` Enable/Disable CUDA backends (requires nvcc)
 `ENABLE_EXAMPLES     ` | `ON`        | `[ON` \| `OFF]` Enable/Disable examples
 `ENABLE_TESTS        ` | `ON`        | `[ON` \| `OFF]` Enable/Disable tests
 `ENABLE_THREADS      ` | `OFF`       | `[ON` \| `OFF]` Enable/Disable tests
 `NTHREADS            ` | `1`         | Maximum number of active threads in the threadpool (only relevant if `ENABLE_THREADS` is `ON`)
 `NEBO_GPU_TEST       ` | `OFF`       | Used for testing. If `ON` then fields will be automatically pushed from host to device to force GPU execution.
 `NEBO_REPORT_BACKEND ` | `OFF`       | Used for testing. If `ON` then nebo assignment operations will print information to std::cout about where they are executed. 
 
 
 \subsection samplebuilds Sample Configuration Scripts
 Note that SpatialOps relies on heavily templated code and can use substantial
 memory when compiling.  Therefore, parallel builds should be done only on systems
 with adequate memory resources.  1GB per parallel build process is more than
 adequate.
 
   - Build an optimized version and install it in the local build directory 
     \verbatim
     cmake [path to src] -DCMAKE_BUILD_TYPE=Release
     make -j4 install
     \endverbatim

   - Build an optimized version and install it in `/usr/local` 
     \verbatim
     cmake [path to src]                 \
       -DCMAKE_BUILD_TYPE=Release        \
       -DCMAKE_INSTALL_PREFIX=/usr/local \
       -DENABLE_EXAMPLES=ON
       
     make install
     \endverbatim
     
   - Build a project that can be imported into the eclipse IDE.  Will build using 8
     cores.  Note that if your system has limited memory, you should eliminate
     `-DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8` below. 
     \verbatim
     cmake [path to src]                  \
      -G "Eclipse CDT4 - Unix Makefiles"  \
      -DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8  \
      -DCMAKE_BUILD_TYPE=Debug            
     \endverbatim
     
   - Build a project with debug flags that can be imported into the XCode IDE.
     \verbatim
     cmake [path to src]                  \
      -G "Xcode"                          \
      -DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8  \
      -DCMAKE_BUILD_TYPE=Debug            
     \endverbatim
 
   - Build a version on a system with a 3.0 compute capability GPU and the CUDA SDK installed:
     \verbatim
     cmake [path to src]            \
      -DCMAKE_BUILD_TYPE=Release    \
      -DENABLE_CUDA=ON              \
      -DCUDA_ARCHITECTURE=3.0     
     make -j4          
     \endverbatim
   
 
 \subsection install Installation and Downstream Usage
 
 When you do `make install`, the following directory structure is created:
 \verbatim
 install_dir
  |- include
  |   |- spatialops
  |   |   |- ...
  |- lib
  |   |- spatialops
  |   |   |- ...
  |- bin
  |   + spatialops
  |- share
  |   |- SpatialOpsConfig.cmake
 \endverbatim
 
 If using CMake for downstream applications:
 
 -# configure/install SpatialOps as described in the \ref config section of this page
 -# Add the following to your `CMakeLists.txt` file:
    \code
    find_package( SpatialOps REQUIRED )
    \endcode
    Note that CMake's search path should include (or be directed to) the
    `[install_dir]/share` folder where SpatialOps was installed to.
    The `find_package` command will define two key variables:
    - `SpatialOps_INCLUDE_DIR` -- provides the appropriate inclusion path for the
      compiler.  This should be set using
      \code
      include_directories( ${SpatialOps_INCLUDE_DIR} )
      \endcode
    - `spatialops` -- the library to link to using
      \code
      target_link_libraries( target spatialops )
      \endcode
  
 If you are not using CMake for downstream applications:
 -# configure/install SpatialOps as described in the \ref config section of this page
 -# Link lines should include the `[install_dir]/lib/spatialops` path and the
    appropriate library located in that directory.
 -# Include `[install_dir]/include/` in your inclusion path. 
  
  
 \section tests Tests and Examples
 
 To build the tests and examples, set `ENABLE_TESTS=ON` and `ENABLE_EXAMPLES=ON`
 when configuring SpatialOps (see \ref config).
 
 
 \subsection runtest Running Tests
 
 To run tests, simply use:
 \verbatim
 ctest
 \endverbatim 
 or, to run multiple tests concurrently,
 \verbatim
 ctest -jN
 \endverbatim
 where `N` is the level of concurrency.


 \subsection runexample Running Examples

 If you have done `make install` then the examples are installed into `[install_dir]/bin/spatialops`.
 Otherwise, if you just do `make` then you will find the examples in the `examples` directory in your build directory.

 */
