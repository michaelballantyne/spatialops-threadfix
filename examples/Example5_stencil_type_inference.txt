/**
 \example Example5_stencil_type_inference.cpp

# Goal
Illustrate how to obtain stencil operator types.


# Key Concepts

 -# There are a number of predefined operators/stencils in SpatialOps. They
    can be obtained via two simple ways: 
    - The simplest way to obtain these is via the \link SpatialOps::BasicOpTypes
      BasicOpTypes\endlink struct.
    - Alternatively, one can use the \link SpatialOps::OperatorTypeBuilder
      OperatorTypeBuilder \endlink struct.
    These approaches are both illustrated in the example below.
      
 -# Each stencil defines the type of field that it consumes (the source field)
    as well as the type of field it produces (the destination field) as follows:
    \code{.cpp}
     typedef OpType::SrcFieldType  SrcType;
     typedef OpType::DestFieldType DestType;
    \endcode

 -# Because of this strong typing and type inference, SpatialOps can guarantee,
    at compile time, compatibility between fields and operators.

# Example Code

\sa \ref Example6_3D_Laplacian.h.  This uses the concepts shown below to
    create a very generic 3D Laplacian function.
 */
