/**
 \example Example7_stencils.cpp

# Goal
Illustrate how to use stencil operators within SpatialOps/Nebo

# Key Concepts
 -# There are a number of predefined operators/stencils in SpatialOps.  The 
    simplest way to obtain these is via the \link SpatialOps::BasicOpTypes
    BasicOpTypes\endlink struct. Much of this was covered in \ref Example5_stencil_type_inference.cpp
 -# Stencils can be stored and retrieved in the \link SpatialOps::OperatorDatabase
    OperatorDatabase\endlink which provides simple storage and retrieval of
    operators by type.
 -# SpatialOps defines many stencils for use on structured, finite-volume meshes.
    The `build_stencils` function can be used to easily populate an OperatorDatabase
    with the predefined operators in SpatialOps.

# Try this
 -# Use two interpolants to calculate `f` at faces and then interpolate back to cell centers:
    \code{.cpp}
    f2 <<= interpf2c( interpc2f( f ) );
    \endcode
    To do this:
    - Obtain the interpolant types.  Note that `interpc2f` is already there, and you can use
      \code{.cpp}
      BasicOpTypes<SVolField>::InterpF2C
      \endcode
      to get the operator type for face to cell interpolation.
    - Build the `f2` field (use `dfdx` and `fface` as examples).
    
 -# Instead of building `dfdx` and `fface` as shown in the example, use the `SpatialFieldStore`
    as shown in \ref Example1_field_creation.cpp 
    \code{.cpp}
    SpatFldPtr<SSurfXField> dfdxPtr = SpatFldPtr::get<SSurfXField>( x );
    \endcode
    Note that you will have a pointer now, so will need to de-reference it as appropriate
    when using it in nebo statements.

# Example Code

 */
