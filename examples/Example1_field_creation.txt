/**

\example Example1_field_creation.cpp  Basics of field creation.

# Goal of this example
This example will show how to create a field in SpatialOps

# Key Concepts

 -# A \link SpatialOps::SpatialField SpatialField \endlink is
comprised of a few things:

  - A \link SpatialOps::MemoryWindow MemoryWindow \endlink object
    describes the logical layout of the field in memory.  Among other things, a
    window contains a description of the domain size.

  - A \link SpatialOps::BoundaryCellInfo BoundaryCellInfo \endlink
    object describes the behavior of a field at a boundary.
    For face fields on structured meshes, the (+) face on the side of the
    domain has an extra storage location.  
    We will explore this more later.

  - A \link SpatialOps::GhostData GhostData \endlink
    object describes the number of ghost cells on each face of the domain.
    These ghost cells are used to exchange data between patches on different nodes
    and for stencil calculations.
    We will explore this more later.

  - A pointer to the raw block of memory for the field and its
    \link SpatialOps::StorageMode StorageMode \endlink.  
    This can either be supplied (for externally managed memory) or it will be
    created internally.  For internally created fields, the supplied memory
    block will be ignored and can be NULL.

  - The location of the field (CPU, GPU, etc.).  Fields can be created on a
    CPU, GPU, etc. and moved between these devices. In fact, a field can be on multiple
    devices at once.

  For now, don't worry about these details - they will be covered in more detail
  in later examples.

 -# A \link SpatialOps::SpatialField SpatialField \endlink is
  strongly typed.  There are several supported field types defined for fields
  associated with structured meshes listed \link fieldtypes here\endlink.  
  This will also be explored more in later examples.

 -# The \link SpatialOps::SpatialFieldStore SpatialFieldStore\endlink can be
    used to quickly build fields.  It returns
    \link SpatialOps::SpatFldPtr SpatFldPtr \endlink objects that have pointer
    semantics and are reference-counted.
    
# Example Code 
*/
