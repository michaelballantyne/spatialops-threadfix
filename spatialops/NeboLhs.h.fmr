#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")

(define (build-Initial-lhs name
                           FT
                           tpl-irreg-pars
                           tpl-reg-pars
                           typedefs
                           tpl-irreg-args
                           constructor
                           publics
                           sequential-assign-body
                           masked-assign-body
                           SW-cons-args
                           thread-parallel-assign-body
                           RS-cons-args
                           gpu-assign-body
                           cpu-ready-body
                           gpu-ready-body
                           gpu-device-index-body
                           gpu-cons-args
                           gpu-test-assign-body
                           privates)
  (define (assign name body . backend)
    (let* ([report (lambda (fcn) (if (null? backend)
                                     null
                                     (fcn backend)))]
           [report-start (report report-backend-start)]
           [report-finish (report report-backend-finish)])
      (def-template (typename 'RhsType)
        (def-void-function name
          (list (function-pmtr 'RhsType 'rhs)
                low-high-pmtr)
          report-start
          body
          report-finish))))
  (define (assign-call name)
    (val-call (type-template name 'RhsType)
              'rhs
              low-high-arg))
  (define (assign-error standard message)
    (build-error (list 'Nebo 'Assignment)
                 (list '(Left-hand side of assignment allocated on)
                       (if standard
                           (list (cout-break message '(but right-hand side is not))
                                 (cout-break '\(completely\) 'accessible 'on 'the 'same message))
                           message))))
  (build-Initial-general name
                         FT
                         tpl-irreg-pars
                         tpl-reg-pars
                         typedefs
                         tpl-irreg-args
                         constructor
                         (list (def-template (typename 'RhsType)
                                 (def-void-function 'assign
                                   (list (function-pmtr (const 'bool) 'useGhost)
                                         (function-pmtr 'RhsType 'rhs))
                                   (comment-env-chunk (val-member-call 'field_ 'reset_valid_ghosts (val-call 'calculate_actual_ghost
                                                                                                             'useGhost
                                                                                                             (val-member-call 'field_ 'get_ghost_data)
                                                                                                             (val-member-call 'field_ 'boundary_info)
                                                                                                             (val-member-call 'rhs 'possible_ghosts))))
                                   (val-typed-assign GhostData 'extents (val-call 'calculate_limits
                                                                                  'useGhost
                                                                                  (val-member-call 'field_ 'window_with_ghost)
                                                                                  (val-member-call 'field_ 'get_valid_ghost_data)
                                                                                  (val-member-call 'field_ 'get_ghost_data)
                                                                                  (val-member-call 'field_ 'boundary_info)
                                                                                  (val-member-call 'rhs 'possible_ghosts)))
                                   (val-typed-const-assign 'int 'xLow (add-spaces '- (val-member-call 'extents 'get_minus 0)))
                                   (val-typed-const-assign 'int 'xHigh (val-member-call 'extents 'get_plus 0))
                                   (val-typed-const-assign 'int 'yLow (add-spaces '- (val-member-call 'extents 'get_minus 1)))
                                   (val-typed-const-assign 'int 'yHigh (val-member-call 'extents 'get_plus 1))
                                   (val-typed-const-assign 'int 'zLow (add-spaces '- (val-member-call 'extents 'get_minus 2)))
                                   (val-typed-const-assign 'int 'zHigh (val-member-call 'extents 'get_plus 2))
                                   (pp-gpu-or (pp-gpu-test-or (assign-call 'gpu_test_assign)
                                                              (stmt-if-else (val-call 'gpu_ready)
                                                                            (stmt-if-else (val-member-call 'rhs 'gpu_ready (val-call 'gpu_device_index))
                                                                                          (assign-call 'gpu_assign)
                                                                                          (assign-error #true 'GPU))
                                                                            (stmt-if-else (val-call 'cpu_ready)
                                                                                          (stmt-if-else (val-member-call 'rhs 'cpu_ready)
                                                                                                        (assign-call 'cpu_assign)
                                                                                                        (assign-error #true 'CPU))
                                                                                          (assign-error #false (cout-break 'unknown '(device - not on CPU or GPU))))))
                                              (assign-call 'cpu_assign))))
                               (def-template (typename 'RhsType)
                                 (def-void-function 'masked_assign
                                   (list (function-pmtr (ref (const SpatialMask)) 'mask)
                                         (function-pmtr 'RhsType 'rhs))
                                   (report-backend-start (add-spaces 'masked 'assignment))
                                   masked-assign-body
                                   (pp-gpu-or (stmt-if-else (val-call 'gpu_ready)
                                                            (build-error (list 'Nebo 'Masked 'Assignment)
                                                                         (list '(Left-hand side of masked assignment allocated on)
                                                                               (cout-break 'GPU 'and 'this 'backend 'does 'not 'support 'GPU 'execution)))
                                                            (stmt-if-else (val-call 'cpu_ready)
                                                                          (stmt-if-else (val-member-call 'rhs 'cpu_ready)
                                                                                        masked-assign-body
                                                                                        (assign-error #true 'CPU))
                                                                          (assign-error #false (cout-break 'unknown '(device - not on CPU or GPU)))))
                                              (body masked-assign-body))
                                   (report-backend-finish (add-spaces 'masked 'assignment))))
                               (def-returning-function (dcl-function 'init 'SeqWalkType)
                                 null
                                 (val-call 'SeqWalkType SW-cons-args))
                               publics)
                         (list (assign 'cpu_assign
                                       (pp-threads-or (stmt-if-else (val-call 'is_thread_parallel)
                                                                    (assign-call 'thread_parallel_assign)
                                                                    (assign-call 'sequential_assign))
                                                      (assign-call 'sequential_assign)))
                               (assign 'sequential_assign sequential-assign-body 'sequential)
                               (pp-threads-only (add-blank-lines (assign 'thread_parallel_assign
                                                                         (list (add-spaces 'Semaphore
                                                                                           (val-call 'semaphore 0))
                                                                               (val-typed-const-assign 'int 'thread_count (val-member-call 'field_ 'get_partition_count))
                                                                               thread-parallel-assign-body
                                                                               (stmt-for (val-typed-assign 'int 'ii 0)
                                                                                         (val-less-than 'ii 'max)
                                                                                         (val-increment 'ii)
                                                                                         (val-member-call 'semaphore 'wait)))
                                                                         (add-spaces 'thread 'parallel))
                                                                 (def-returning-function (dcl-function 'resize 'ResizeType)
                                                                   null
                                                                   (val-call 'ResizeType RS-cons-args))))
                               (pp-gpu-only (add-blank-lines (assign 'gpu_assign gpu-assign-body 'CUDA)
                                                             (def-returning-function (constize (dcl-function 'cpu_ready 'bool))
                                                               null
                                                               cpu-ready-body)
                                                             (def-returning-function (constize (dcl-function 'gpu_ready 'bool))
                                                               null
                                                               gpu-ready-body)
                                                             (def-returning-function (constize (dcl-function 'gpu_device_index 'int))
                                                               null
                                                               gpu-device-index-body)
                                                             (def-returning-function (dcl-function 'gpu_init 'GPUWalkType)
                                                               null
                                                               (val-call 'GPUWalkType gpu-cons-args))
                                                             (pp-gpu-test-only (assign 'gpu_test_assign
                                                                                       gpu-test-assign-body
                                                                                       (add-spaces 'CUDA 'with 'Nebo 'copying)))))
                               privates)))
(define bs-Initial-lhs (arg-swap build-Initial-lhs 16 4 "bs-Initial-lhs"))
(define (build-Resize-lhs name
                          FT
                          tpl-irreg-pars
                          tpl-reg-pars
                          typedefs
                          tpl-irreg-args
                          constructor
                          assign-body
                          publics
                          SW-cons-args
                          privates)
  (build-Resize-general name
                        FT
                        tpl-irreg-pars
                        tpl-reg-pars
                        typedefs
                        tpl-irreg-args
                        constructor
                        (list (pp-threads-only
                               (def-template (typename 'RhsType)
                                 (def-void-function 'assign
                                   (list (function-pmtr (ref (const 'RhsType)) 'rhs)
                                         low-high-pmtr
                                         (function-pmtr (ptr 'Semaphore) 'semaphore))
                                   (list assign-body
                                         (val-call (concat 'semaphore '-> 'post))))))
                              publics)
                        (list (def-returning-function (dcl-function 'init
                                                                    'SeqWalkType)
                                null
                                (val-call 'SeqWalkType SW-cons-args))
                              privates)))
(define bs-Resize-lhs (arg-swap build-Resize-lhs 7 4 "bs-Resize-lhs"))
(define (build-SeqWalk-lhs name
                           FT
                           tpl-irreg-pars
                           tpl-reg-pars
                           typedefs
                           constructor
                           assign-body
                           publics
                           ref-result
                           privates)
  (build-SeqWalk-general name
                         FT
                         tpl-irreg-pars
                         tpl-reg-pars
                         typedefs
                         constructor
                         (list (def-template (typename 'RhsType)
                                 (def-void-function 'assign
                                   (list (function-pmtr 'RhsType 'rhs)
                                         low-high-pmtr)
                                   assign-body))
                               (def-returning-function (dcl-function 'ref
                                                                     (ref vt-chunk)
                                                                     index-pmtr)
                                 null
                                 ref-result)
                               publics)
                         privates))
(define bs-SeqWalk-lhs (arg-swap build-SeqWalk-lhs 6 4 "bs-SeqWalk-lhs"))
(define (build-gpu-lhs name
                       FT
                       tpl-irreg-pars
                       tpl-reg-pars
                       typedefs
                       constructor
                       assign-body
                       publics
                       valid-result
                       start-body
                       ref-result
                       privates)
  (build-gpu-general name
                     FT
                     tpl-irreg-pars
                     tpl-reg-pars
                     typedefs
                     constructor
                     (list (def-template (typename 'RhsType)
                             (device-only (def-void-function 'assign
                                            (list (function-pmtr 'RhsType 'rhs)
                                                  low-high-pmtr)
                                            (val-typed-const-assign 'int 'ii (val-add (val-multiply 'blockIdx.x 'blockDim.x) 'threadIdx.x))
                                            (val-typed-const-assign 'int 'jj (val-add (val-multiply 'blockIdx.y 'blockDim.y) 'threadIdx.y))
                                            (val-typed-const-assign 'int 'x (val-add 'ii 'xLow))
                                            (val-typed-const-assign 'int 'y (val-add 'jj 'yLow))
                                            (val-call 'start 'x 'y 'xHigh 'yHigh)
                                            assign-body)))
                           publics)
                     (list (device-only (def-returning-function (dcl-function 'valid 'bool)
                                          null
                                          valid-result))
                           (device-only (def-void-function 'start
                                          (list (add-spaces 'int 'x)
                                                (add-spaces 'int 'y)
                                                (function-pmtr (const 'int) 'xHigh)
                                                (function-pmtr (const 'int) 'yHigh))
                                          start-body))
                           (device-only (def-returning-function (dcl-function 'ref
                                                                              (ref vt-chunk)
                                                                              index-pmtr)
                                          null
                                          ref-result))
                           privates)))
(define bs-gpu-lhs (arg-swap build-gpu-lhs 8 4 "bs-gpu-lhs"))

                                        ; beginnning of file
(pp-header-file
 'NEBO_LHS_H
 (SpatialOps-namespace
  (pp-gpu-only (def-template (list (typename 'LhsType)
                                   (typename 'RhsType))
                 (global-only (def-function (general-function-declare 'gpu_assign_kernel
                                                                      'void
                                                                      (list (function-pmtr 'LhsType 'lhs)
                                                                            (function-pmtr 'RhsType 'rhs)
                                                                            low-high-pmtr))
                                (val-member-call 'lhs 'assign 'rhs low-high-arg)))))

  (build-struct NF-chunk
                std-FT
                null
                null
                (bs-Initial-lhs null
                                null
                                (bm-constructor (function-pmtr FT-chunk 'f)
                                                (val-construct 'field_ 'f)
                                                null)
                                null
                                (list (val-member-call (val-call 'init)
                                                       'assign
                                                       (val-member-call 'rhs 'init)
                                                       low-high-arg))
                                (let* ([Points (scope 'std (type-template 'vector IntVec))]
                                       [PointIterator (scope Points 'const_iterator)])
                                  (list (val-typed-assign 'SeqWalkType 'lhs (val-call 'init))
                                        (val-typed-assign (typename (scope 'RhsType 'SeqWalkType)) 'expr (val-member-call 'rhs 'init))
                                        (val-typed-assign PointIterator 'ip (val-member-call (val-member-call 'mask 'points)
                                                                                              'begin))
                                        (val-typed-assign (const PointIterator) 'ep (val-member-call (val-member-call 'mask 'points)
                                                                                                      'end))
                                        (stmt-for null
                                                  (val-not-equal 'ip 'ep)
                                                  (val-increment 'ip)
                                                  (val-typed-assign (const 'int) 'x (array-access (paren '*ip) 0))
                                                  (val-typed-assign (const 'int) 'y (array-access (paren '*ip) 1))
                                                  (val-typed-assign (const 'int) 'z (array-access (paren '*ip) 2))
                                                  (val-assign (val-member-call 'lhs 'ref 'x 'y 'z)
                                                               (val-member-call 'expr 'eval 'x 'y 'z)))))
                                'field_
                                (list (typedef (typename (scope 'RhsType 'ResizeType))
                                               'RhsResizeType)
                                      (val-typed-assign 'ResizeType 'new_lhs (val-call 'resize))
                                      (val-typed-assign 'RhsResizeType 'new_rhs (val-member-call 'rhs 'resize))
                                      (function-pmtr 'int 'localXLow)
                                      (function-pmtr 'int 'localXHigh)
                                      (function-pmtr 'int 'localYLow)
                                      (function-pmtr 'int 'localYHigh)
                                      (function-pmtr 'int 'localZLow)
                                      (function-pmtr 'int 'localZHigh)
                                      (val-typed-const-assign IntVec 'split (val-call 'nebo_find_partition
                                                                                      (val-call IntVec
                                                                                                (val-subtract 'xHigh 'xLow)
                                                                                                (val-subtract 'yHigh 'yLow)
                                                                                                (val-subtract 'zHigh 'zLow))
                                                                                      'thread_count))
                                      (val-typed-const-assign 'int 'max (val-call 'nebo_partition_count 'split))
                                      (val-typed-assign IntVec 'location ZeroIntVec)
                                      (stmt-for (val-typed-assign 'int 'count 0)
                                                (val-less-than 'count 'max)
                                                (val-increment 'count)
                                                (val-call 'nebo_set_up_extents
                                                          'location
                                                          'split
                                                          'localXLow
                                                          'localXHigh
                                                          'localYLow
                                                          'localYHigh
                                                          'localZLow
                                                          'localZHigh
                                                          'xLow
                                                          'xHigh
                                                          'yLow
                                                          'yHigh
                                                          'zLow
                                                          'zHigh)
                                                (val-member-call (val-call (scope 'ThreadPoolFIFO 'self))
                                                                 'schedule
                                                                 (val-call (scope 'boost 'bind)
                                                                           (take-ptr (scope 'ResizeType (type-template-function 'assign 'RhsResizeType)))
                                                                           'new_lhs
                                                                           'new_rhs
                                                                           'localXLow
                                                                           'localXHigh
                                                                           'localYLow
                                                                           'localYHigh
                                                                           'localZLow
                                                                           'localZHigh
                                                                           (take-ptr 'semaphore)))
                                                (val-assign 'location (val-call 'nebo_next_partition 'location 'split))))
                                'field_
                                (let ([dim-def (lambda (name extent)
                                                 (val-typed-assign 'int name (val-add (val-divide extent 'blockDim)
                                                                                      (ter-cond (val-greater-than (paren (val-modulo extent 'blockDim))
                                                                                                                  0)
                                                                                                1
                                                                                                0))))])
                                  (list (typedef (typename (scope 'RhsType 'GPUWalkType))
                                                 'RhsGPUWalkType)
                                        (val-typed-assign 'int 'xExtent (val-subtract 'xHigh 'xLow))
                                        (val-typed-assign 'int 'yExtent (val-subtract 'yHigh 'yLow))
                                        (val-typed-assign 'int 'blockDim 16)
                                        (dim-def 'xGDim 'xExtent)
                                        (dim-def 'yGDim 'yExtent)
                                        (add-spaces 'dim3 (val-call 'dimBlock 'blockDim 'blockDim))
                                        (add-spaces 'dim3 (val-call 'dimGrid 'xGDim 'yGDim))
                                        (pp-debug-only (add-blank-lines (stmt (add-spaces 'cudaError 'err))
                                                                        (stmt-if (val-not-equal 'cudaSuccess (paren (val-assign 'err (val-call 'cudaStreamSynchronize(val-member-call 'field_ 'get_stream)))))
                                                                                 (build-error-with-call "CUDA Kernel - before call" "\"\t - \""
                                                                                                        '<< (val-call 'cudaGetErrorString 'err)))))
                                        (val-call (kernel-call (type-template 'gpu_assign_kernel 'GPUWalkType 'RhsGPUWalkType)
                                                               'dimGrid
                                                               'dimBlock
                                                               0
                                                               (val-member-call 'field_ 'get_stream))
                                                  (val-call 'gpu_init)
                                                  (val-member-call 'rhs 'gpu_init (val-call 'gpu_device_index))
                                                  low-high-arg)
                                        (pp-debug-only (stmt-if (val-not-equal 'cudaSuccess (paren (val-assign 'err (val-call 'cudaStreamSynchronize(val-member-call 'field_ 'get_stream)))))
                                                                (build-error-with-call "CUDA Kernel - after call" "\"\t - \""
                                                                                       '<< (val-call 'cudaGetErrorString 'err))))))
                                (val-call 'IS_CPU_INDEX (val-member-call 'field_ 'device_index))
                                (val-call 'IS_GPU_INDEX (val-member-call 'field_ 'device_index))
                                (val-member-call 'field_ 'device_index)
                                'field_
                                (list (val-member-call 'rhs 'gpu_prep 0)
                                      (stmt-if-else (val-equal 'CPU_INDEX (val-member-call 'field_ 'device_index))
                                                    (list (function-pmtr FT-chunk
                                                                         (val-call 'gpu_field
                                                                                   (val-member-call 'field_ 'window_with_ghost)
                                                                                   (val-member-call 'field_ 'boundary_info)
                                                                                   (val-member-call 'field_ 'get_valid_ghost_data)
                                                                                   'NULL
                                                                                   (scope 'structured 'InternalStorage)
                                                                                   'GPU_INDEX))
                                                          (function-pmtr (type-template NF-chunk 'Initial FT-chunk)
                                                                         (val-call 'gpu_lhs 'gpu_field))
                                                          (list (let ([CDI (scope (scope 'ema 'cuda)
                                                                                  'CUDADeviceInterface)])
                                                                  (val-typed-assign (ref CDI) 'CDI (val-call (scope CDI 'self))))
                                                                (val-typed-assign (ref (const FT-chunk)) 'ftmp_ 'field_))
                                                          (val-member-call 'CDI
                                                                           'memcpy_to
                                                                           (val-member-call 'gpu_field
                                                                                            'field_values
                                                                                            'GPU_INDEX)
                                                                           (val-member-call 'ftmp_ 'field_values)
                                                                           (val-member-call 'ftmp_ 'allocated_bytes)
                                                                           0
                                                                           (val-member-call 'ftmp_ 'get_stream))
                                                          (val-member-call 'gpu_lhs
                                                                           (type-template-function 'gpu_assign 'RhsType)
                                                                           'rhs
                                                                           low-high-arg)
                                                          (val-member-call 'CDI
                                                                           'memcpy_from
                                                                           (val-member-call 'field_ 'field_values)
                                                                           (val-member-call 'gpu_field
                                                                                            'field_values
                                                                                            'GPU_INDEX)
                                                                           (val-member-call 'field_ 'allocated_bytes)
                                                                           0
                                                                           (val-member-call 'field_ 'get_stream)))
                                                    (val-call (type-template 'gpu_assign 'RhsType)
                                                              'rhs
                                                              low-high-arg)))
                                (stmt-dcl-variable FT-chunk 'field_))
                (bs-Resize-lhs null
                               null
                               (bm-constructor (function-pmtr FT-chunk 'f)
                                               (val-construct 'field_ 'f)
                                               null)
                               (val-member-call (val-call 'init)
                                                'assign
                                                (val-member-call 'rhs 'init)
                                                low-high-arg)
                               null
                               'field_
                               (stmt-dcl-variable FT-chunk 'field_))
                (bs-SeqWalk-lhs null
                                (bm-constructor (function-pmtr FT-chunk 'f)
                                                (list (val-construct 'xGlob_ (val-member-call (val-member-call 'f 'window_with_ghost)
                                                                                              'glob_dim
                                                                                              0))
                                                      (val-construct 'yGlob_ (val-member-call (val-member-call 'f 'window_with_ghost)
                                                                                              'glob_dim
                                                                                              1))
                                                      (val-construct 'base_ (compute-base 'f 'none)))
                                                null)
                                (stmt-for (val-typed-assign 'int 'z 'zLow)
                                          (val-less-than 'z 'zHigh)
                                          (val-increment 'z)
                                          (stmt-for (val-typed-assign 'int 'y 'yLow)
                                                    (val-less-than 'y 'yHigh)
                                                    (val-increment 'y)
                                                    (stmt-for (val-typed-assign 'int 'x 'xLow)
                                                              (val-less-than 'x 'xHigh)
                                                              (val-increment 'x)
                                                              (val-assign (val-call 'ref index-arg)
                                                                          (val-member-call 'rhs 'eval index-arg)))))
                                null
                                (array-access 'base_ (val-add 'x (val-multiply 'xGlob_ (paren (val-add 'y (paren (val-multiply 'yGlob_ 'z)))))))
                                (list (stmt-dcl-variable (const 'int) 'xGlob_)
                                      (stmt-dcl-variable (const 'int) 'yGlob_)
                                      (stmt-dcl-variable (ptr vt-chunk) 'base_)))
                (bs-gpu-lhs  null
                             (bm-constructor
                              (function-pmtr FT-chunk 'f)
                              (list (val-construct 'base_ (compute-base 'f (val-member-call 'f 'device_index)))
                                    (val-construct 'valid_ 'false)
                                    (val-construct 'xGlob_ (val-member-call (val-member-call 'f 'window_with_ghost)
                                                                            'glob_dim
                                                                            0))
                                    (val-construct 'yGlob_ (val-member-call (val-member-call 'f 'window_with_ghost)
                                                                            'glob_dim
                                                                            1)))
                              null)
                             (stmt-for (val-typed-assign 'int 'z 'zLow)
                                       (val-less-than 'z 'zHigh)
                                       (val-increment 'z)
                                       (stmt-if (val-call 'valid)
                                                (val-assign (val-call 'ref index-arg)
                                                            (val-member-call 'rhs 'eval index-arg))))
                             null
                             'valid_
                             (val-assign 'valid_ (paren (val-and (val-less-than 'x 'xHigh)
                                                                 (val-less-than 'y 'yHigh))))
                             (array-access 'base_ (val-add 'x (val-multiply 'xGlob_ (paren (val-add 'y (paren (val-multiply 'yGlob_ 'z)))))))
                             (list (stmt-dcl-variable (ptr vt-chunk) 'base_)
                                   (stmt-dcl-variable 'int 'valid_)
                                   (stmt-dcl-variable (const 'int) 'xGlob_)
                                   (stmt-dcl-variable (const 'int) 'yGlob_))))
  ))
