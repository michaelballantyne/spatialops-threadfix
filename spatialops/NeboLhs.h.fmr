#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")

(define (build-Initial-lhs name
                           FT
                           tpl-irreg-pars
                           tpl-reg-pars
                           typedefs
                           tpl-irreg-args
                           constructor
                           publics
                           sequential-assign-body
                           SW-cons-args
                           thread-parallel-assign-body
                           RS-cons-args
                           gpu-assign-body
                           cpu-ready-body
                           gpu-ready-body
                           gpu-device-index-body
                           gpu-cons-args
                           gpu-test-assign-body
                           privates)
  (define (assign name body . backend)
    (let* ([report (lambda (fcn) (if (null? backend)
                                     null
                                     (fcn backend)))]
           [report-start (report report-backend-start)]
           [report-finish (report report-backend-finish)])
      (tpl-def (tpl-pmtr 'RhsType)
               (v-fcn-def name
                          (list (ad 'RhsType 'rhs)
                                low-high-pmtr)
                          report-start
                          body
                          report-finish))))
  (define (assign-call name)
    (fc (tpl-use name 'RhsType)
        'rhs
        low-high-arg))
  (define (assign-error standard message)
    (build-error (list 'Nebo 'Assignment)
                 (list '(Left-hand side of assignment allocated on)
                       (if standard
                           (list (cout-break message '(but right-hand side is not))
                                 (cout-break '\(completely\) 'accessible 'on 'the 'same message))
                           message))))
  (build-Initial-general name
                         FT
                         tpl-irreg-pars
                         tpl-reg-pars
                         typedefs
                         tpl-irreg-args
                         constructor
                         (list (tpl-def (tpl-pmtr 'RhsType)
                                        (v-fcn-def 'assign
                                                   (list (adc 'bool 'useGhost)
                                                         (ad 'RhsType 'rhs))
                                                   (mfc 'field_ 'reset_valid_ghosts (fc 'calculate_actual_ghost
                                                                                        'useGhost
                                                                                        (mfc 'field_ 'get_ghost_data)
                                                                                        (mfc 'field_ 'boundary_info)
                                                                                        (mfc 'rhs 'possible_ghosts)))
                                                   (nt= GhostData 'extents (fc 'calculate_limits
                                                                               'useGhost
                                                                               (mfc 'field_ 'window_with_ghost)
                                                                               (mfc 'field_ 'get_valid_ghost_data)
                                                                               (mfc 'field_ 'get_ghost_data)
                                                                               (mfc 'field_ 'boundary_info)
                                                                               (mfc 'rhs 'possible_ghosts)))
                                                   (nt=c 'int 'xLow (bs '- (mfc 'extents 'get_minus "0")))
                                                   (nt=c 'int 'xHigh (mfc 'extents 'get_plus "0"))
                                                   (nt=c 'int 'yLow (bs '- (mfc 'extents 'get_minus "1")))
                                                   (nt=c 'int 'yHigh (mfc 'extents 'get_plus "1"))
                                                   (nt=c 'int 'zLow (bs '- (mfc 'extents 'get_minus "2")))
                                                   (nt=c 'int 'zHigh (mfc 'extents 'get_plus "2"))
                                                   (gpu-or (gpu-test-or (assign-call 'gpu_test_assign)
                                                                        (nifelse (fc 'gpu_ready)
                                                                                 (nifelse (mfc 'rhs 'gpu_ready (fc 'gpu_device_index))
                                                                                          (assign-call 'gpu_assign)
                                                                                          (assign-error #true 'GPU))
                                                                                 (nifelse (fc 'cpu_ready)
                                                                                          (nifelse (mfc 'rhs 'cpu_ready)
                                                                                                   (assign-call 'cpu_assign)
                                                                                                   (assign-error #true 'CPU))
                                                                                          (assign-error #false (cout-break 'unknown '(device - not on CPU or GPU))))))
                                                           (assign-call 'cpu_assign))))
                               publics)
                         (list (assign 'cpu_assign
                                       (threads-or (nifelse (fc 'is_thread_parallel)
                                                            (assign-call 'thread_parallel_assign)
                                                            (assign-call 'sequential_assign))
                                                   (assign-call 'sequential_assign)))
                               (assign 'sequential_assign sequential-assign-body 'sequential)
                               (r-fcn-def (fcn-dcl 'init 'SeqWalkType)
                                          null
                                          (fc 'SeqWalkType SW-cons-args))
                               (threads-only (bb (assign 'thread_parallel_assign
                                                         (list (bs 'Semaphore
                                                                   (fc 'semaphore "0"))
                                                               (nt=c 'int 'thread_count (mfc 'field_ 'get_partition_count))
                                                               thread-parallel-assign-body
                                                               (nfor (nt= 'int 'ii "0")
                                                                     (n< 'ii 'max)
                                                                     (n++ 'ii)
                                                                     (mfc 'semaphore 'wait)))
                                                         (bs 'thread 'parallel))
                                                 (r-fcn-def (fcn-dcl 'resize 'ResizeType)
                                                            null
                                                            (fc 'ResizeType RS-cons-args))))
                               (gpu-only (bb (assign 'gpu_assign gpu-assign-body 'CUDA)
                                             (r-fcn-def (constize (fcn-dcl 'cpu_ready 'bool))
                                                        null
                                                        cpu-ready-body)
                                             (r-fcn-def (constize (fcn-dcl 'gpu_ready 'bool))
                                                        null
                                                        gpu-ready-body)
                                             (r-fcn-def (constize (fcn-dcl 'gpu_device_index 'int))
                                                        null
                                                        gpu-device-index-body)
                                             (r-fcn-def (fcn-dcl 'gpu_init 'GPUWalkType)
                                                        null
                                                        (fc 'GPUWalkType gpu-cons-args))
                                             (gpu-test-only (assign 'gpu_test_assign
                                                                    gpu-test-assign-body
                                                                    (bs 'CUDA 'with 'Nebo 'copying)))))
                               privates)))
(define bs-Initial-lhs (arg-swap build-Initial-lhs 15 4 "bs-Initial-lhs"))
(define (build-Resize-lhs name
                          FT
                          tpl-irreg-pars
                          tpl-reg-pars
                          typedefs
                          tpl-irreg-args
                          constructor
                          assign-body
                          publics
                          SW-cons-args
                          privates)
  (build-Resize-general name
                        FT
                        tpl-irreg-pars
                        tpl-reg-pars
                        typedefs
                        tpl-irreg-args
                        constructor
                        (list (threads-only
                               (tpl-def (tpl-pmtr 'RhsType)
                                        (v-fcn-def 'assign
                                                   (list (adcr 'RhsType 'rhs)
                                                         low-high-pmtr
                                                         (adp 'Semaphore 'semaphore))
                                                   (list assign-body
                                                         (fc (c 'semaphore '-> 'post))))))
                              publics)
                        (list (r-fcn-def (fcn-dcl 'init
                                                  'SeqWalkType)
                                         null
                                         (fc 'SeqWalkType SW-cons-args))
                              privates)))
(define bs-Resize-lhs (arg-swap build-Resize-lhs 7 4 "bs-Resize-lhs"))
(define (build-SeqWalk-lhs name
                           FT
                           tpl-irreg-pars
                           tpl-reg-pars
                           typedefs
                           constructor
                           assign-body
                           publics
                           ref-result
                           privates)
  (build-SeqWalk-general name
                         FT
                         tpl-irreg-pars
                         tpl-reg-pars
                         typedefs
                         constructor
                         (list (tpl-def (tpl-pmtr 'RhsType)
                                        (v-fcn-def 'assign
                                                   (list (ad 'RhsType 'rhs)
                                                         low-high-pmtr)
                                                   assign-body))
                               publics)
                         (list (r-fcn-def (fcn-dcl 'ref
                                                   (ref vt-chunk)
                                                   index-pmtr)
                                          null
                                          ref-result)
                               privates)))
(define bs-SeqWalk-lhs (arg-swap build-SeqWalk-lhs 6 4 "bs-SeqWalk-lhs"))
(define (build-gpu-lhs name
                       FT
                       tpl-irreg-pars
                       tpl-reg-pars
                       typedefs
                       constructor
                       assign-body
                       publics
                       valid-result
                       start-body
                       ref-result
                       privates)
  (build-gpu-general name
                     FT
                     tpl-irreg-pars
                     tpl-reg-pars
                     typedefs
                     constructor
                     (list (tpl-def (tpl-pmtr 'RhsType)
                                    (device-use (v-fcn-def 'assign
                                                           (list (ad 'RhsType 'rhs)
                                                                 low-high-pmtr)
                                                           (nt=c 'int 'ii (n+ (n* 'blockIdx.x 'blockDim.x) 'threadIdx.x))
                                                           (nt=c 'int 'jj (n+ (n* 'blockIdx.y 'blockDim.y) 'threadIdx.y))
                                                           (nt=c 'int 'x (n+ 'ii 'xLow))
                                                           (nt=c 'int 'y (n+ 'jj 'yLow))
                                                           (fc 'start 'x 'y 'xHigh 'yHigh)
                                                           assign-body)))
                           publics)
                     (list (device-use (r-fcn-def (fcn-dcl 'valid 'bool)
                                                  null
                                                  valid-result))
                           (device-use (v-fcn-def 'start
                                                  (list (bs 'int 'x)
                                                        (bs 'int 'y)
                                                        (adc 'int 'xHigh)
                                                        (adc 'int 'yHigh))
                                                  start-body))
                           (device-use (r-fcn-def (fcn-dcl 'ref
                                                           (ref vt-chunk)
                                                           index-pmtr)
                                                  null
                                                  ref-result))
                           privates)))
(define bs-gpu-lhs (arg-swap build-gpu-lhs 8 4 "bs-gpu-lhs"))

                                        ; beginnning of file
(pp-header-file
 'NEBO_LHS_H
 (n 'SpatialOps
    (gpu-only (tpl-def (list (tpl-pmtr 'LhsType)
                             (tpl-pmtr 'RhsType))
                       (fcn-def (gbl-fcn-dcl 'gpu_assign_kernel
                                             (ad 'LhsType 'lhs)
                                             (ad 'RhsType 'rhs)
                                             low-high-pmtr)
                                (mfc 'lhs 'assign 'rhs low-high-arg))))

    (build-struct NF-chunk
                  std-FT
                  null
                  null
                  (bs-Initial-lhs null
                                  null
                                  (bm-constructor (ad FT-chunk 'f)
                                                  (cons-asgn 'field_ 'f)
                                                  null)
                                  null
                                  (list (mfc (fc 'init)
                                             'assign
                                             (mfc 'rhs 'init)
                                             low-high-arg))
                                  'field_
                                  (list (typedef (tpl-pmtr (scope 'RhsType 'ResizeType))
                                                 'RhsResizeType)
                                        (nt= 'ResizeType 'new_lhs (fc 'resize))
                                        (nt= 'RhsResizeType 'new_rhs (mfc 'rhs 'resize))
                                        (ad 'int 'localXLow)
                                        (ad 'int 'localXHigh)
                                        (ad 'int 'localYLow)
                                        (ad 'int 'localYHigh)
                                        (ad 'int 'localZLow)
                                        (ad 'int 'localZHigh)
                                        (nt=c IntVec 'split (fc 'nebo_find_partition
                                                                (fc IntVec
                                                                    (n- 'xHigh 'xLow)
                                                                    (n- 'yHigh 'yLow)
                                                                    (n- 'zHigh 'zLow))
                                                                'thread_count))
                                        (nt=c 'int 'max (fc 'nebo_partition_count 'split))
                                        (nt= IntVec 'location ZeroIntVec)
                                        (nfor (nt= 'int 'count "0")
                                              (n< 'count 'max)
                                              (n++ 'count)
                                              (fc 'nebo_set_up_extents
                                                  'location
                                                  'split
                                                  'localXLow
                                                  'localXHigh
                                                  'localYLow
                                                  'localYHigh
                                                  'localZLow
                                                  'localZHigh
                                                  'xLow
                                                  'xHigh
                                                  'yLow
                                                  'yHigh
                                                  'zLow
                                                  'zHigh)
                                              (mfc (fc (scope 'ThreadPoolFIFO 'self))
                                                   'schedule
                                                   (fc (scope 'boost 'bind)
                                                       (take-ptr (scope 'ResizeType (tpl-fcn-use 'assign 'RhsResizeType)))
                                                       'new_lhs
                                                       'new_rhs
                                                       'localXLow
                                                       'localXHigh
                                                       'localYLow
                                                       'localYHigh
                                                       'localZLow
                                                       'localZHigh
                                                       (take-ptr 'semaphore)))
                                              (n= 'location (fc 'nebo_next_partition 'location 'split))))
                                  'field_
                                  (let ([dim-def (lambda (name extent)
                                                   (nt= 'int name (n+ (n/ extent 'blockDim)
                                                                      (ter-cond (n> (par (n% extent 'blockDim))
                                                                                    "0")
                                                                                "1"
                                                                                "0"))))])
                                    (list (typedef (tpl-pmtr (scope 'RhsType 'GPUWalkType))
                                                   'RhsGPUWalkType)
                                          (nt= 'int 'xExtent (n- 'xHigh 'xLow))
                                          (nt= 'int 'yExtent (n- 'yHigh 'yLow))
                                          (nt= 'int 'blockDim "16")
                                          (dim-def 'xGDim 'xExtent)
                                          (dim-def 'yGDim 'yExtent)
                                          (bs 'dim3 (fc 'dimBlock 'blockDim 'blockDim))
                                          (bs 'dim3 (fc 'dimGrid 'xGDim 'yGDim))
                                          (debug-only (bb (cc (bs 'cudaError 'err))
                                                          (nif (n!= 'cudaSuccess (p (n= 'err (fc 'cudaStreamSynchronize(mfc 'field_ 'get_stream)))))
                                                               (build-error-with-call "CUDA Kernel - before call" "\"\t - \""
                                                                                      '<< (fc 'cudaGetErrorString 'err)))))
                                          (fc (kernel-use (tpl-use 'gpu_assign_kernel 'GPUWalkType 'RhsGPUWalkType)
                                                          'dimGrid
                                                          'dimBlock
                                                          "0"
                                                          (mfc 'field_ 'get_stream))
                                              (fc 'gpu_init)
                                              (mfc 'rhs 'gpu_init (fc 'gpu_device_index))
                                              low-high-arg)
                                          (debug-only (nif (n!= 'cudaSuccess (p (n= 'err (fc 'cudaStreamSynchronize(mfc 'field_ 'get_stream)))))
                                                           (build-error-with-call "CUDA Kernel - after call" "\"\t - \""
                                                                                  '<< (fc 'cudaGetErrorString 'err))))))
                                  (n== 'LOCAL_RAM (mfc 'field_ 'memory_device_type))
                                  (n== 'EXTERNAL_CUDA_GPU (mfc 'field_ 'memory_device_type))
                                  (mfc 'field_ 'device_index)
                                  'field_
                                  (list (mfc 'rhs 'gpu_prep "0")
                                        (nifelse (n== 'LOCAL_RAM (mfc 'field_ 'memory_device_type))
                                                 (list (ad FT-chunk
                                                           (fc 'gpu_field
                                                               (mfc 'field_ 'window_with_ghost)
                                                               (mfc 'field_ 'boundary_info)
                                                               (mfc 'field_ 'get_valid_ghost_data)
                                                               'NULL
                                                               (scope 'structured 'InternalStorage)
                                                               'EXTERNAL_CUDA_GPU
                                                               "0"))
                                                       (ad (tpl-use NF-chunk 'Initial FT-chunk)
                                                           (fc 'gpu_lhs 'gpu_field))
                                                       (mfc 'gpu_lhs
                                                            (tpl-fcn-use 'gpu_assign 'RhsType)
                                                            'rhs
                                                            low-high-arg)
                                                       (let ([CDI (scope (scope 'ema 'cuda)
                                                                         'CUDADeviceInterface)])
                                                         (nt= (ref CDI) 'CDI (fc (scope CDI 'self))))
                                                       (mfc 'CDI
                                                            'memcpy_from
                                                            (mfc 'field_ 'field_values)
                                                            (mfc 'gpu_field
                                                                 'field_values
                                                                 'EXTERNAL_CUDA_GPU
                                                                 "0")
                                                            (mfc 'field_ 'allocated_bytes)
                                                            "0"))
                                                 (fc (tpl-use 'gpu_assign 'RhsType)
                                                     'rhs
                                                     low-high-arg)))
                                  (sad FT-chunk 'field_))
                  (bs-Resize-lhs null
                                 null
                                 (bm-constructor (ad FT-chunk 'f)
                                                 (cons-asgn 'field_ 'f)
                                                 null)
                                 (mfc (fc 'init)
                                      'assign
                                      (mfc 'rhs 'init)
                                      low-high-arg)
                                 null
                                 'field_
                                 (sad FT-chunk 'field_))
                  (bs-SeqWalk-lhs null
                                  (bm-constructor (ad FT-chunk 'f)
                                                  (list (cons-asgn 'xGlob_ (mfc (mfc 'f 'window_with_ghost)
                                                                                'glob_dim
                                                                                "0"))
                                                        (cons-asgn 'yGlob_ (mfc (mfc 'f 'window_with_ghost)
                                                                                'glob_dim
                                                                                "1"))
                                                        (cons-asgn 'base_ (compute-base 'f 'none)))
                                                  null)
                                  (nfor (nt= 'int 'z 'zLow)
                                        (n< 'z 'zHigh)
                                        (n++ 'z)
                                        (nfor (nt= 'int 'y 'yLow)
                                              (n< 'y 'yHigh)
                                              (n++ 'y)
                                              (nfor (nt= 'int 'x 'xLow)
                                                    (n< 'x 'xHigh)
                                                    (n++ 'x)
                                                    (n= (fc 'ref index-arg)
                                                        (mfc 'rhs 'eval index-arg)))))
                                  null
                                  (c 'base_
                                     "["
                                     (n+ 'x (n* 'xGlob_ (par (n+ 'y (par (n* 'yGlob_ 'z))))))
                                     "]")
                                  (list (sadc 'int 'xGlob_)
                                        (sadc 'int 'yGlob_)
                                        (sadp vt-chunk 'base_)))
                  (bs-gpu-lhs  null
                               (bm-constructor
                                (ad FT-chunk 'f)
                                (list (cons-asgn 'base_ (compute-base 'f (mfc 'f 'device_index)))
                                      (cons-asgn 'valid_ 'false)
                                      (cons-asgn 'xGlob_ (mfc (mfc 'f 'window_with_ghost)
                                                              'glob_dim
                                                              "0"))
                                      (cons-asgn 'yGlob_ (mfc (mfc 'f 'window_with_ghost)
                                                              'glob_dim
                                                              "1")))
                                null)
                               (nfor (nt= 'int 'z 'zLow)
                                     (n< 'z 'zHigh)
                                     (n++ 'z)
                                     (nif (fc 'valid)
                                          (n= (fc 'ref index-arg)
                                              (mfc 'rhs 'eval index-arg))))
                               null
                               'valid_
                               (n= 'valid_ (par (n-and (n< 'x 'xHigh)
                                                             (n< 'y 'yHigh))))
                               (c 'base_
                                  "["
                                  (n+ 'x (n* 'xGlob_ (par (n+ 'y (par (n* 'yGlob_ 'z))))))
                                  "]")
                               (list (sadp vt-chunk 'base_)
                                     (sad 'int 'valid_)
                                     (sadc 'int 'xGlob_)
                                     (sadc 'int 'yGlob_))))
    ))
