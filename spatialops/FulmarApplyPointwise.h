/* This file was generated by fulmar version 0.9.2. */

#ifndef FULMAR_APPLY_POINTWISE_H
   #define FULMAR_APPLY_POINTWISE_H

   namespace SpatialOps {
      template<typename CurrentMode, typename Functor, typename Operand>
       struct ApplyPointwise1;
      template<typename Functor, typename Operand>
       struct ApplyPointwise1<Initial, Functor, Operand> {
         public:
          ApplyPointwise1<SeqWalk, Functor, typename Operand::SeqWalkType>
          typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise1<Resize, Functor, typename Operand::ResizeType>
             typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise1<GPUWalk, Functor, typename Operand::GPUWalkType>
             typedef GPUWalkType;
          #endif
          /* __CUDACC__ */

          ApplyPointwise1(Operand const & operand)
          : operand_(operand)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return operand_.ghosts_with_bc();
          }

          inline GhostData ghosts_without_bc(void) const {
             return operand_.ghosts_without_bc();
          }

          inline bool has_extents(void) const {
             return (operand_.has_extents());
          }

          inline IntVec extents(void) const { return operand_.extents(); }

          inline IntVec has_bc(void) const { return operand_.has_bc(); }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const { return (operand_.cpu_ready()); }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand_.gpu_init(deviceIndex,
                                                     extents,
                                                     ghosts,
                                                     hasBC,
                                                     deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand const operand_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor, typename Operand>
          struct ApplyPointwise1<Resize, Functor, Operand> {
            public:
             ApplyPointwise1<SeqWalk, Functor, typename Operand::SeqWalkType>
             typedef SeqWalkType;

             ApplyPointwise1(Operand const & operand)
             : operand_(operand)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand_.init(extents, ghosts, hasBC));
             }

            private:
             Operand const operand_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor, typename Operand>
       struct ApplyPointwise1<SeqWalk, Functor, Operand> {
         public:
          typename Operand::value_type typedef value_type;

          ApplyPointwise1(Operand const & operand)
          : operand_(operand)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand operand_;
      };
      #ifdef __CUDACC__
         template<typename Functor, typename Operand>
          struct ApplyPointwise1<GPUWalk, Functor, Operand> {
            public:
             typename Operand::value_type typedef value_type;

             ApplyPointwise1(Operand const & operand)
             : operand_(operand)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand operand_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand>
       struct FindFieldType1 {
         typename FindFieldType<Operand>::Result typedef Result;
      };

      template<typename Functor, typename Operand>
       inline NeboExpression<ApplyPointwise1<Initial,
                                             Functor,
                                             typename FinalType<Operand>::Result>,
                             typename FindFieldType1<Operand>::Result>
       apply_pointwise(Operand operand) {
          ApplyPointwise1<Initial, Functor, typename FinalType<Operand>::Result>
          typedef ReturnType;

          NeboExpression<ReturnType, typename FindFieldType1<Operand>::Result>
          typedef ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2>
       struct ApplyPointwise2;
      template<typename Functor, typename Operand1, typename Operand2>
       struct ApplyPointwise2<Initial, Functor, Operand1, Operand2> {
         public:
          ApplyPointwise2<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise2<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise2<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise2(Operand1 const & operand1, Operand2 const & operand2)
          : operand1_(operand1), operand2_(operand2)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(), operand2_.ghosts_with_bc());
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(), operand2_.ghosts_without_bc());
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else { extents = operand2_.extents(); };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : (operand2_.extents()));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : (operand2_.has_bc()));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(), operand2_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor, typename Operand1, typename Operand2>
          struct ApplyPointwise2<Resize, Functor, Operand1, Operand2> {
            public:
             ApplyPointwise2<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise2(Operand1 const & operand1,
                             Operand2 const & operand2)
             : operand1_(operand1), operand2_(operand2)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor, typename Operand1, typename Operand2>
       struct ApplyPointwise2<SeqWalk, Functor, Operand1, Operand2> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise2(Operand1 const & operand1, Operand2 const & operand2)
          : operand1_(operand1), operand2_(operand2)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z), operand2_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;
      };
      #ifdef __CUDACC__
         template<typename Functor, typename Operand1, typename Operand2>
          struct ApplyPointwise2<GPUWalk, Functor, Operand1, Operand2> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise2(Operand1 const & operand1,
                             Operand2 const & operand2)
             : operand1_(operand1), operand2_(operand2)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z), operand2_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1, typename Operand2>
       struct FindFieldType2 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename FindFieldType<Operand2>::Result>::
         Result typedef Result;
      };

      template<typename Functor, typename Operand1, typename Operand2>
       inline NeboExpression<ApplyPointwise2<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result>,
                             typename FindFieldType2<Operand1, Operand2>::Result>
       apply_pointwise(Operand1 operand1, Operand2 operand2) {
          ApplyPointwise2<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType2<Operand1, Operand2>::Result>
          typedef ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1), normalize(operand2)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3>
       struct ApplyPointwise3;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3>
       struct ApplyPointwise3<Initial, Functor, Operand1, Operand2, Operand3> {
         public:
          ApplyPointwise3<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType,
                          typename Operand3::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise3<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType,
                             typename Operand3::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise3<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType,
                             typename Operand3::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise3(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3)
          : operand1_(operand1), operand2_(operand2), operand3_(operand3)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(), operand3_.ghosts_with_bc()));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(), operand3_.ghosts_without_bc()));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else { extents = operand3_.extents(); };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : (operand3_.extents()))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : (operand3_.has_bc()))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3>
          struct ApplyPointwise3<Resize, Functor, Operand1, Operand2, Operand3> {
            public:
             ApplyPointwise3<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType,
                             typename Operand3::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise3(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3)
             : operand1_(operand1), operand2_(operand2), operand3_(operand3)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3>
       struct ApplyPointwise3<SeqWalk, Functor, Operand1, Operand2, Operand3> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise3(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3)
          : operand1_(operand1), operand2_(operand2), operand3_(operand3)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3>
          struct ApplyPointwise3<GPUWalk, Functor, Operand1, Operand2, Operand3> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise3(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3)
             : operand1_(operand1), operand2_(operand2), operand3_(operand3)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1, typename Operand2, typename Operand3>
       struct FindFieldType3 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           FindFieldType<Operand3>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3>
       inline NeboExpression<ApplyPointwise3<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result,
                                             typename FinalType<Operand3>::
                                             Result>,
                             typename FindFieldType3<Operand1,
                                                     Operand2,
                                                     Operand3>::Result>
       apply_pointwise(Operand1 operand1, Operand2 operand2, Operand3 operand3) {
          ApplyPointwise3<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result,
                          typename FinalType<Operand3>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType3<Operand1, Operand2, Operand3>::
                         Result> typedef ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4>
       struct ApplyPointwise4;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4>
       struct ApplyPointwise4<Initial,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4> {
         public:
          ApplyPointwise4<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType,
                          typename Operand3::SeqWalkType,
                          typename Operand4::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise4<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType,
                             typename Operand3::ResizeType,
                             typename Operand4::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise4<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType,
                             typename Operand3::GPUWalkType,
                             typename Operand4::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise4(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(),
                            min(operand3_.ghosts_with_bc(), operand4_.ghosts_with_bc())));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(),
                            min(operand3_.ghosts_without_bc(), operand4_.ghosts_without_bc())));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents() || operand4_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents() || operand4_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else {
                         if(operand3_.has_extents()) {
                            extents = operand3_.extents();
                         }
                         else { extents = operand4_.extents(); };
                      };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };

                   if(operand4_.has_extents()) {
                      assert(extents == operand4_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : ((operand3_.has_extents()
                                                                           ?
                                                                           operand3_.extents()
                                                                           : (operand4_.extents()))))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : ((operand3_.has_extents()
                                                                          ?
                                                                          operand3_.has_bc()
                                                                          : (operand4_.has_bc()))))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC),
                                operand4_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize(),
                                  operand4_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready() && operand4_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand4_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex); operand4_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;

          Operand4 const operand4_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4>
          struct ApplyPointwise4<Resize,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4> {
            public:
             ApplyPointwise4<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType,
                             typename Operand3::SeqWalkType,
                             typename Operand4::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise4(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC),
                                   operand4_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;

             Operand4 const operand4_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4>
       struct ApplyPointwise4<SeqWalk,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise4(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z),
                             operand4_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;

          Operand4 operand4_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4>
          struct ApplyPointwise4<GPUWalk,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise4(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z),
                                operand4_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;

             Operand4 operand4_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4>
       struct FindFieldType4 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           RefineFieldType<typename
                                                                           FindFieldType<Operand3>::
                                                                           Result,
                                                                           typename
                                                                           FindFieldType<Operand4>::
                                                                           Result>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4>
       inline NeboExpression<ApplyPointwise4<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result,
                                             typename FinalType<Operand3>::
                                             Result,
                                             typename FinalType<Operand4>::
                                             Result>,
                             typename FindFieldType4<Operand1,
                                                     Operand2,
                                                     Operand3,
                                                     Operand4>::Result>
       apply_pointwise(Operand1 operand1,
                       Operand2 operand2,
                       Operand3 operand3,
                       Operand4 operand4) {
          ApplyPointwise4<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result,
                          typename FinalType<Operand3>::Result,
                          typename FinalType<Operand4>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType4<Operand1,
                                                 Operand2,
                                                 Operand3,
                                                 Operand4>::Result> typedef
          ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3),
                                       normalize(operand4)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5>
       struct ApplyPointwise5;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5>
       struct ApplyPointwise5<Initial,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5> {
         public:
          ApplyPointwise5<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType,
                          typename Operand3::SeqWalkType,
                          typename Operand4::SeqWalkType,
                          typename Operand5::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise5<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType,
                             typename Operand3::ResizeType,
                             typename Operand4::ResizeType,
                             typename Operand5::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise5<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType,
                             typename Operand3::GPUWalkType,
                             typename Operand4::GPUWalkType,
                             typename Operand5::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise5(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(),
                            min(operand3_.ghosts_with_bc(),
                                min(operand4_.ghosts_with_bc(), operand5_.ghosts_with_bc()))));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(),
                            min(operand3_.ghosts_without_bc(),
                                min(operand4_.ghosts_without_bc(), operand5_.ghosts_without_bc()))));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents() || operand4_.has_extents() ||
                     operand5_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents() || operand4_.has_extents() ||
                    operand5_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else {
                         if(operand3_.has_extents()) {
                            extents = operand3_.extents();
                         }
                         else {
                            if(operand4_.has_extents()) {
                               extents = operand4_.extents();
                            }
                            else { extents = operand5_.extents(); };
                         };
                      };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };

                   if(operand4_.has_extents()) {
                      assert(extents == operand4_.extents());
                   };

                   if(operand5_.has_extents()) {
                      assert(extents == operand5_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : ((operand3_.has_extents()
                                                                           ?
                                                                           operand3_.extents()
                                                                           : ((operand4_.has_extents()
                                                                               ?
                                                                               operand4_.extents()
                                                                               :
                                                                               (operand5_.extents()))))))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : ((operand3_.has_extents()
                                                                          ?
                                                                          operand3_.has_bc()
                                                                          : ((operand4_.has_extents()
                                                                              ?
                                                                              operand4_.has_bc()
                                                                              : (operand5_.has_bc()))))))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC),
                                operand4_.init(extents, ghosts, hasBC),
                                operand5_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize(),
                                  operand4_.resize(),
                                  operand5_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready() && operand4_.cpu_ready() &&
                        operand5_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand4_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand5_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex); operand4_.gpu_prep(deviceIndex);
                   operand5_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;

          Operand4 const operand4_;

          Operand5 const operand5_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5>
          struct ApplyPointwise5<Resize,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5> {
            public:
             ApplyPointwise5<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType,
                             typename Operand3::SeqWalkType,
                             typename Operand4::SeqWalkType,
                             typename Operand5::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise5(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC),
                                   operand4_.init(extents, ghosts, hasBC),
                                   operand5_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;

             Operand4 const operand4_;

             Operand5 const operand5_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5>
       struct ApplyPointwise5<SeqWalk,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise5(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z),
                             operand4_.eval(x, y, z),
                             operand5_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;

          Operand4 operand4_;

          Operand5 operand5_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5>
          struct ApplyPointwise5<GPUWalk,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise5(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z),
                                operand4_.eval(x, y, z),
                                operand5_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;

             Operand4 operand4_;

             Operand5 operand5_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5>
       struct FindFieldType5 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           RefineFieldType<typename
                                                                           FindFieldType<Operand3>::
                                                                           Result,
                                                                           typename
                                                                           RefineFieldType<typename
                                                                                           FindFieldType<Operand4>::
                                                                                           Result,
                                                                                           typename
                                                                                           FindFieldType<Operand5>::
                                                                                           Result>::
                                                                           Result>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5>
       inline NeboExpression<ApplyPointwise5<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result,
                                             typename FinalType<Operand3>::
                                             Result,
                                             typename FinalType<Operand4>::
                                             Result,
                                             typename FinalType<Operand5>::
                                             Result>,
                             typename FindFieldType5<Operand1,
                                                     Operand2,
                                                     Operand3,
                                                     Operand4,
                                                     Operand5>::Result>
       apply_pointwise(Operand1 operand1,
                       Operand2 operand2,
                       Operand3 operand3,
                       Operand4 operand4,
                       Operand5 operand5) {
          ApplyPointwise5<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result,
                          typename FinalType<Operand3>::Result,
                          typename FinalType<Operand4>::Result,
                          typename FinalType<Operand5>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType5<Operand1,
                                                 Operand2,
                                                 Operand3,
                                                 Operand4,
                                                 Operand5>::Result> typedef
          ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3),
                                       normalize(operand4),
                                       normalize(operand5)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6>
       struct ApplyPointwise6;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6>
       struct ApplyPointwise6<Initial,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6> {
         public:
          ApplyPointwise6<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType,
                          typename Operand3::SeqWalkType,
                          typename Operand4::SeqWalkType,
                          typename Operand5::SeqWalkType,
                          typename Operand6::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise6<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType,
                             typename Operand3::ResizeType,
                             typename Operand4::ResizeType,
                             typename Operand5::ResizeType,
                             typename Operand6::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise6<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType,
                             typename Operand3::GPUWalkType,
                             typename Operand4::GPUWalkType,
                             typename Operand5::GPUWalkType,
                             typename Operand6::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise6(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(),
                            min(operand3_.ghosts_with_bc(),
                                min(operand4_.ghosts_with_bc(),
                                    min(operand5_.ghosts_with_bc(), operand6_.ghosts_with_bc())))));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(),
                            min(operand3_.ghosts_without_bc(),
                                min(operand4_.ghosts_without_bc(),
                                    min(operand5_.ghosts_without_bc(), operand6_.ghosts_without_bc())))));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents() || operand4_.has_extents() ||
                     operand5_.has_extents() || operand6_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents() || operand4_.has_extents() ||
                    operand5_.has_extents() || operand6_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else {
                         if(operand3_.has_extents()) {
                            extents = operand3_.extents();
                         }
                         else {
                            if(operand4_.has_extents()) {
                               extents = operand4_.extents();
                            }
                            else {
                               if(operand5_.has_extents()) {
                                  extents = operand5_.extents();
                               }
                               else { extents = operand6_.extents(); };
                            };
                         };
                      };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };

                   if(operand4_.has_extents()) {
                      assert(extents == operand4_.extents());
                   };

                   if(operand5_.has_extents()) {
                      assert(extents == operand5_.extents());
                   };

                   if(operand6_.has_extents()) {
                      assert(extents == operand6_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : ((operand3_.has_extents()
                                                                           ?
                                                                           operand3_.extents()
                                                                           : ((operand4_.has_extents()
                                                                               ?
                                                                               operand4_.extents()
                                                                               :
                                                                               ((operand5_.has_extents()
                                                                                 ?
                                                                                 operand5_.extents()
                                                                                 :
                                                                                 (operand6_.extents()))))))))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : ((operand3_.has_extents()
                                                                          ?
                                                                          operand3_.has_bc()
                                                                          : ((operand4_.has_extents()
                                                                              ?
                                                                              operand4_.has_bc()
                                                                              : ((operand5_.has_extents()
                                                                                  ?
                                                                                  operand5_.has_bc()
                                                                                  :
                                                                                  (operand6_.has_bc()))))))))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC),
                                operand4_.init(extents, ghosts, hasBC),
                                operand5_.init(extents, ghosts, hasBC),
                                operand6_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize(),
                                  operand4_.resize(),
                                  operand5_.resize(),
                                  operand6_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready() && operand4_.cpu_ready() &&
                        operand5_.cpu_ready() && operand6_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand4_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand5_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand6_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex); operand4_.gpu_prep(deviceIndex);
                   operand5_.gpu_prep(deviceIndex); operand6_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;

          Operand4 const operand4_;

          Operand5 const operand5_;

          Operand6 const operand6_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6>
          struct ApplyPointwise6<Resize,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6> {
            public:
             ApplyPointwise6<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType,
                             typename Operand3::SeqWalkType,
                             typename Operand4::SeqWalkType,
                             typename Operand5::SeqWalkType,
                             typename Operand6::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise6(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC),
                                   operand4_.init(extents, ghosts, hasBC),
                                   operand5_.init(extents, ghosts, hasBC),
                                   operand6_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;

             Operand4 const operand4_;

             Operand5 const operand5_;

             Operand6 const operand6_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6>
       struct ApplyPointwise6<SeqWalk,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise6(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z),
                             operand4_.eval(x, y, z),
                             operand5_.eval(x, y, z),
                             operand6_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;

          Operand4 operand4_;

          Operand5 operand5_;

          Operand6 operand6_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6>
          struct ApplyPointwise6<GPUWalk,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise6(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z),
                                operand4_.eval(x, y, z),
                                operand5_.eval(x, y, z),
                                operand6_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;

             Operand4 operand4_;

             Operand5 operand5_;

             Operand6 operand6_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6>
       struct FindFieldType6 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           RefineFieldType<typename
                                                                           FindFieldType<Operand3>::
                                                                           Result,
                                                                           typename
                                                                           RefineFieldType<typename
                                                                                           FindFieldType<Operand4>::
                                                                                           Result,
                                                                                           typename
                                                                                           RefineFieldType<typename
                                                                                                           FindFieldType<Operand5>::
                                                                                                           Result,
                                                                                                           typename
                                                                                                           FindFieldType<Operand6>::
                                                                                                           Result>::
                                                                                           Result>::
                                                                           Result>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6>
       inline NeboExpression<ApplyPointwise6<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result,
                                             typename FinalType<Operand3>::
                                             Result,
                                             typename FinalType<Operand4>::
                                             Result,
                                             typename FinalType<Operand5>::
                                             Result,
                                             typename FinalType<Operand6>::
                                             Result>,
                             typename FindFieldType6<Operand1,
                                                     Operand2,
                                                     Operand3,
                                                     Operand4,
                                                     Operand5,
                                                     Operand6>::Result>
       apply_pointwise(Operand1 operand1,
                       Operand2 operand2,
                       Operand3 operand3,
                       Operand4 operand4,
                       Operand5 operand5,
                       Operand6 operand6) {
          ApplyPointwise6<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result,
                          typename FinalType<Operand3>::Result,
                          typename FinalType<Operand4>::Result,
                          typename FinalType<Operand5>::Result,
                          typename FinalType<Operand6>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType6<Operand1,
                                                 Operand2,
                                                 Operand3,
                                                 Operand4,
                                                 Operand5,
                                                 Operand6>::Result> typedef
          ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3),
                                       normalize(operand4),
                                       normalize(operand5),
                                       normalize(operand6)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7>
       struct ApplyPointwise7;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7>
       struct ApplyPointwise7<Initial,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6,
                              Operand7> {
         public:
          ApplyPointwise7<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType,
                          typename Operand3::SeqWalkType,
                          typename Operand4::SeqWalkType,
                          typename Operand5::SeqWalkType,
                          typename Operand6::SeqWalkType,
                          typename Operand7::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise7<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType,
                             typename Operand3::ResizeType,
                             typename Operand4::ResizeType,
                             typename Operand5::ResizeType,
                             typename Operand6::ResizeType,
                             typename Operand7::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise7<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType,
                             typename Operand3::GPUWalkType,
                             typename Operand4::GPUWalkType,
                             typename Operand5::GPUWalkType,
                             typename Operand6::GPUWalkType,
                             typename Operand7::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise7(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6,
                          Operand7 const & operand7)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(),
                            min(operand3_.ghosts_with_bc(),
                                min(operand4_.ghosts_with_bc(),
                                    min(operand5_.ghosts_with_bc(),
                                        min(operand6_.ghosts_with_bc(),
                                            operand7_.ghosts_with_bc()))))));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(),
                            min(operand3_.ghosts_without_bc(),
                                min(operand4_.ghosts_without_bc(),
                                    min(operand5_.ghosts_without_bc(),
                                        min(operand6_.ghosts_without_bc(),
                                            operand7_.ghosts_without_bc()))))));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents() || operand4_.has_extents() ||
                     operand5_.has_extents() || operand6_.has_extents() ||
                     operand7_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents() || operand4_.has_extents() ||
                    operand5_.has_extents() || operand6_.has_extents() ||
                    operand7_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else {
                         if(operand3_.has_extents()) {
                            extents = operand3_.extents();
                         }
                         else {
                            if(operand4_.has_extents()) {
                               extents = operand4_.extents();
                            }
                            else {
                               if(operand5_.has_extents()) {
                                  extents = operand5_.extents();
                               }
                               else {
                                  if(operand6_.has_extents()) {
                                     extents = operand6_.extents();
                                  }
                                  else { extents = operand7_.extents(); };
                               };
                            };
                         };
                      };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };

                   if(operand4_.has_extents()) {
                      assert(extents == operand4_.extents());
                   };

                   if(operand5_.has_extents()) {
                      assert(extents == operand5_.extents());
                   };

                   if(operand6_.has_extents()) {
                      assert(extents == operand6_.extents());
                   };

                   if(operand7_.has_extents()) {
                      assert(extents == operand7_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : ((operand3_.has_extents()
                                                                           ?
                                                                           operand3_.extents()
                                                                           : ((operand4_.has_extents()
                                                                               ?
                                                                               operand4_.extents()
                                                                               :
                                                                               ((operand5_.has_extents()
                                                                                 ?
                                                                                 operand5_.extents()
                                                                                 :
                                                                                 ((operand6_.has_extents()
                                                                                   ?
                                                                                   operand6_.extents()
                                                                                   :
                                                                                   (operand7_.extents()))))))))))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : ((operand3_.has_extents()
                                                                          ?
                                                                          operand3_.has_bc()
                                                                          : ((operand4_.has_extents()
                                                                              ?
                                                                              operand4_.has_bc()
                                                                              : ((operand5_.has_extents()
                                                                                  ?
                                                                                  operand5_.has_bc()
                                                                                  :
                                                                                  ((operand6_.has_extents()
                                                                                    ?
                                                                                    operand6_.has_bc()
                                                                                    :
                                                                                    (operand7_.has_bc()))))))))))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC),
                                operand4_.init(extents, ghosts, hasBC),
                                operand5_.init(extents, ghosts, hasBC),
                                operand6_.init(extents, ghosts, hasBC),
                                operand7_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize(),
                                  operand4_.resize(),
                                  operand5_.resize(),
                                  operand6_.resize(),
                                  operand7_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready() && operand4_.cpu_ready() &&
                        operand5_.cpu_ready() && operand6_.cpu_ready() &&
                        operand7_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand4_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand5_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand6_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand7_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex); operand4_.gpu_prep(deviceIndex);
                   operand5_.gpu_prep(deviceIndex); operand6_.gpu_prep(deviceIndex);
                   operand7_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;

          Operand4 const operand4_;

          Operand5 const operand5_;

          Operand6 const operand6_;

          Operand7 const operand7_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7>
          struct ApplyPointwise7<Resize,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6,
                                 Operand7> {
            public:
             ApplyPointwise7<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType,
                             typename Operand3::SeqWalkType,
                             typename Operand4::SeqWalkType,
                             typename Operand5::SeqWalkType,
                             typename Operand6::SeqWalkType,
                             typename Operand7::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise7(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6,
                             Operand7 const & operand7)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC),
                                   operand4_.init(extents, ghosts, hasBC),
                                   operand5_.init(extents, ghosts, hasBC),
                                   operand6_.init(extents, ghosts, hasBC),
                                   operand7_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;

             Operand4 const operand4_;

             Operand5 const operand5_;

             Operand6 const operand6_;

             Operand7 const operand7_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7>
       struct ApplyPointwise7<SeqWalk,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6,
                              Operand7> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise7(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6,
                          Operand7 const & operand7)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z),
                             operand4_.eval(x, y, z),
                             operand5_.eval(x, y, z),
                             operand6_.eval(x, y, z),
                             operand7_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;

          Operand4 operand4_;

          Operand5 operand5_;

          Operand6 operand6_;

          Operand7 operand7_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7>
          struct ApplyPointwise7<GPUWalk,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6,
                                 Operand7> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise7(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6,
                             Operand7 const & operand7)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z),
                                operand4_.eval(x, y, z),
                                operand5_.eval(x, y, z),
                                operand6_.eval(x, y, z),
                                operand7_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;

             Operand4 operand4_;

             Operand5 operand5_;

             Operand6 operand6_;

             Operand7 operand7_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7>
       struct FindFieldType7 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           RefineFieldType<typename
                                                                           FindFieldType<Operand3>::
                                                                           Result,
                                                                           typename
                                                                           RefineFieldType<typename
                                                                                           FindFieldType<Operand4>::
                                                                                           Result,
                                                                                           typename
                                                                                           RefineFieldType<typename
                                                                                                           FindFieldType<Operand5>::
                                                                                                           Result,
                                                                                                           typename
                                                                                                           RefineFieldType<typename
                                                                                                                           FindFieldType<Operand6>::
                                                                                                                           Result,
                                                                                                                           typename
                                                                                                                           FindFieldType<Operand7>::
                                                                                                                           Result>::
                                                                                                           Result>::
                                                                                           Result>::
                                                                           Result>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7>
       inline NeboExpression<ApplyPointwise7<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result,
                                             typename FinalType<Operand3>::
                                             Result,
                                             typename FinalType<Operand4>::
                                             Result,
                                             typename FinalType<Operand5>::
                                             Result,
                                             typename FinalType<Operand6>::
                                             Result,
                                             typename FinalType<Operand7>::
                                             Result>,
                             typename FindFieldType7<Operand1,
                                                     Operand2,
                                                     Operand3,
                                                     Operand4,
                                                     Operand5,
                                                     Operand6,
                                                     Operand7>::Result>
       apply_pointwise(Operand1 operand1,
                       Operand2 operand2,
                       Operand3 operand3,
                       Operand4 operand4,
                       Operand5 operand5,
                       Operand6 operand6,
                       Operand7 operand7) {
          ApplyPointwise7<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result,
                          typename FinalType<Operand3>::Result,
                          typename FinalType<Operand4>::Result,
                          typename FinalType<Operand5>::Result,
                          typename FinalType<Operand6>::Result,
                          typename FinalType<Operand7>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType7<Operand1,
                                                 Operand2,
                                                 Operand3,
                                                 Operand4,
                                                 Operand5,
                                                 Operand6,
                                                 Operand7>::Result> typedef
          ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3),
                                       normalize(operand4),
                                       normalize(operand5),
                                       normalize(operand6),
                                       normalize(operand7)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8>
       struct ApplyPointwise8;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8>
       struct ApplyPointwise8<Initial,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6,
                              Operand7,
                              Operand8> {
         public:
          ApplyPointwise8<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType,
                          typename Operand3::SeqWalkType,
                          typename Operand4::SeqWalkType,
                          typename Operand5::SeqWalkType,
                          typename Operand6::SeqWalkType,
                          typename Operand7::SeqWalkType,
                          typename Operand8::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise8<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType,
                             typename Operand3::ResizeType,
                             typename Operand4::ResizeType,
                             typename Operand5::ResizeType,
                             typename Operand6::ResizeType,
                             typename Operand7::ResizeType,
                             typename Operand8::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise8<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType,
                             typename Operand3::GPUWalkType,
                             typename Operand4::GPUWalkType,
                             typename Operand5::GPUWalkType,
                             typename Operand6::GPUWalkType,
                             typename Operand7::GPUWalkType,
                             typename Operand8::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise8(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6,
                          Operand7 const & operand7,
                          Operand8 const & operand8)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7),
            operand8_(operand8)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(),
                            min(operand3_.ghosts_with_bc(),
                                min(operand4_.ghosts_with_bc(),
                                    min(operand5_.ghosts_with_bc(),
                                        min(operand6_.ghosts_with_bc(),
                                            min(operand7_.ghosts_with_bc(),
                                                operand8_.ghosts_with_bc())))))));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(),
                            min(operand3_.ghosts_without_bc(),
                                min(operand4_.ghosts_without_bc(),
                                    min(operand5_.ghosts_without_bc(),
                                        min(operand6_.ghosts_without_bc(),
                                            min(operand7_.ghosts_without_bc(),
                                                operand8_.ghosts_without_bc())))))));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents() || operand4_.has_extents() ||
                     operand5_.has_extents() || operand6_.has_extents() ||
                     operand7_.has_extents() || operand8_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents() || operand4_.has_extents() ||
                    operand5_.has_extents() || operand6_.has_extents() ||
                    operand7_.has_extents() || operand8_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else {
                         if(operand3_.has_extents()) {
                            extents = operand3_.extents();
                         }
                         else {
                            if(operand4_.has_extents()) {
                               extents = operand4_.extents();
                            }
                            else {
                               if(operand5_.has_extents()) {
                                  extents = operand5_.extents();
                               }
                               else {
                                  if(operand6_.has_extents()) {
                                     extents = operand6_.extents();
                                  }
                                  else {
                                     if(operand7_.has_extents()) {
                                        extents = operand7_.extents();
                                     }
                                     else { extents = operand8_.extents(); };
                                  };
                               };
                            };
                         };
                      };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };

                   if(operand4_.has_extents()) {
                      assert(extents == operand4_.extents());
                   };

                   if(operand5_.has_extents()) {
                      assert(extents == operand5_.extents());
                   };

                   if(operand6_.has_extents()) {
                      assert(extents == operand6_.extents());
                   };

                   if(operand7_.has_extents()) {
                      assert(extents == operand7_.extents());
                   };

                   if(operand8_.has_extents()) {
                      assert(extents == operand8_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : ((operand3_.has_extents()
                                                                           ?
                                                                           operand3_.extents()
                                                                           : ((operand4_.has_extents()
                                                                               ?
                                                                               operand4_.extents()
                                                                               :
                                                                               ((operand5_.has_extents()
                                                                                 ?
                                                                                 operand5_.extents()
                                                                                 :
                                                                                 ((operand6_.has_extents()
                                                                                   ?
                                                                                   operand6_.extents()
                                                                                   :
                                                                                   ((operand7_.has_extents()
                                                                                     ?
                                                                                     operand7_.extents()
                                                                                     :
                                                                                     (operand8_.extents()))))))))))))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : ((operand3_.has_extents()
                                                                          ?
                                                                          operand3_.has_bc()
                                                                          : ((operand4_.has_extents()
                                                                              ?
                                                                              operand4_.has_bc()
                                                                              : ((operand5_.has_extents()
                                                                                  ?
                                                                                  operand5_.has_bc()
                                                                                  :
                                                                                  ((operand6_.has_extents()
                                                                                    ?
                                                                                    operand6_.has_bc()
                                                                                    :
                                                                                    ((operand7_.has_extents()
                                                                                      ?
                                                                                      operand7_.has_bc()
                                                                                      :
                                                                                      (operand8_.has_bc()))))))))))))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC),
                                operand4_.init(extents, ghosts, hasBC),
                                operand5_.init(extents, ghosts, hasBC),
                                operand6_.init(extents, ghosts, hasBC),
                                operand7_.init(extents, ghosts, hasBC),
                                operand8_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize(),
                                  operand4_.resize(),
                                  operand5_.resize(),
                                  operand6_.resize(),
                                  operand7_.resize(),
                                  operand8_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready() && operand4_.cpu_ready() &&
                        operand5_.cpu_ready() && operand6_.cpu_ready() &&
                        operand7_.cpu_ready() && operand8_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand4_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand5_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand6_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand7_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand8_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex); operand4_.gpu_prep(deviceIndex);
                   operand5_.gpu_prep(deviceIndex); operand6_.gpu_prep(deviceIndex);
                   operand7_.gpu_prep(deviceIndex); operand8_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;

          Operand4 const operand4_;

          Operand5 const operand5_;

          Operand6 const operand6_;

          Operand7 const operand7_;

          Operand8 const operand8_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7,
                  typename Operand8>
          struct ApplyPointwise8<Resize,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6,
                                 Operand7,
                                 Operand8> {
            public:
             ApplyPointwise8<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType,
                             typename Operand3::SeqWalkType,
                             typename Operand4::SeqWalkType,
                             typename Operand5::SeqWalkType,
                             typename Operand6::SeqWalkType,
                             typename Operand7::SeqWalkType,
                             typename Operand8::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise8(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6,
                             Operand7 const & operand7,
                             Operand8 const & operand8)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7),
               operand8_(operand8)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC),
                                   operand4_.init(extents, ghosts, hasBC),
                                   operand5_.init(extents, ghosts, hasBC),
                                   operand6_.init(extents, ghosts, hasBC),
                                   operand7_.init(extents, ghosts, hasBC),
                                   operand8_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;

             Operand4 const operand4_;

             Operand5 const operand5_;

             Operand6 const operand6_;

             Operand7 const operand7_;

             Operand8 const operand8_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8>
       struct ApplyPointwise8<SeqWalk,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6,
                              Operand7,
                              Operand8> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise8(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6,
                          Operand7 const & operand7,
                          Operand8 const & operand8)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7),
            operand8_(operand8)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z),
                             operand4_.eval(x, y, z),
                             operand5_.eval(x, y, z),
                             operand6_.eval(x, y, z),
                             operand7_.eval(x, y, z),
                             operand8_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;

          Operand4 operand4_;

          Operand5 operand5_;

          Operand6 operand6_;

          Operand7 operand7_;

          Operand8 operand8_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7,
                  typename Operand8>
          struct ApplyPointwise8<GPUWalk,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6,
                                 Operand7,
                                 Operand8> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise8(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6,
                             Operand7 const & operand7,
                             Operand8 const & operand8)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7),
               operand8_(operand8)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z),
                                operand4_.eval(x, y, z),
                                operand5_.eval(x, y, z),
                                operand6_.eval(x, y, z),
                                operand7_.eval(x, y, z),
                                operand8_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;

             Operand4 operand4_;

             Operand5 operand5_;

             Operand6 operand6_;

             Operand7 operand7_;

             Operand8 operand8_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8>
       struct FindFieldType8 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           RefineFieldType<typename
                                                                           FindFieldType<Operand3>::
                                                                           Result,
                                                                           typename
                                                                           RefineFieldType<typename
                                                                                           FindFieldType<Operand4>::
                                                                                           Result,
                                                                                           typename
                                                                                           RefineFieldType<typename
                                                                                                           FindFieldType<Operand5>::
                                                                                                           Result,
                                                                                                           typename
                                                                                                           RefineFieldType<typename
                                                                                                                           FindFieldType<Operand6>::
                                                                                                                           Result,
                                                                                                                           typename
                                                                                                                           RefineFieldType<typename
                                                                                                                                           FindFieldType<Operand7>::
                                                                                                                                           Result,
                                                                                                                                           typename
                                                                                                                                           FindFieldType<Operand8>::
                                                                                                                                           Result>::
                                                                                                                           Result>::
                                                                                                           Result>::
                                                                                           Result>::
                                                                           Result>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8>
       inline NeboExpression<ApplyPointwise8<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result,
                                             typename FinalType<Operand3>::
                                             Result,
                                             typename FinalType<Operand4>::
                                             Result,
                                             typename FinalType<Operand5>::
                                             Result,
                                             typename FinalType<Operand6>::
                                             Result,
                                             typename FinalType<Operand7>::
                                             Result,
                                             typename FinalType<Operand8>::
                                             Result>,
                             typename FindFieldType8<Operand1,
                                                     Operand2,
                                                     Operand3,
                                                     Operand4,
                                                     Operand5,
                                                     Operand6,
                                                     Operand7,
                                                     Operand8>::Result>
       apply_pointwise(Operand1 operand1,
                       Operand2 operand2,
                       Operand3 operand3,
                       Operand4 operand4,
                       Operand5 operand5,
                       Operand6 operand6,
                       Operand7 operand7,
                       Operand8 operand8) {
          ApplyPointwise8<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result,
                          typename FinalType<Operand3>::Result,
                          typename FinalType<Operand4>::Result,
                          typename FinalType<Operand5>::Result,
                          typename FinalType<Operand6>::Result,
                          typename FinalType<Operand7>::Result,
                          typename FinalType<Operand8>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType8<Operand1,
                                                 Operand2,
                                                 Operand3,
                                                 Operand4,
                                                 Operand5,
                                                 Operand6,
                                                 Operand7,
                                                 Operand8>::Result> typedef
          ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3),
                                       normalize(operand4),
                                       normalize(operand5),
                                       normalize(operand6),
                                       normalize(operand7),
                                       normalize(operand8)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9>
       struct ApplyPointwise9;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9>
       struct ApplyPointwise9<Initial,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6,
                              Operand7,
                              Operand8,
                              Operand9> {
         public:
          ApplyPointwise9<SeqWalk,
                          Functor,
                          typename Operand1::SeqWalkType,
                          typename Operand2::SeqWalkType,
                          typename Operand3::SeqWalkType,
                          typename Operand4::SeqWalkType,
                          typename Operand5::SeqWalkType,
                          typename Operand6::SeqWalkType,
                          typename Operand7::SeqWalkType,
                          typename Operand8::SeqWalkType,
                          typename Operand9::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise9<Resize,
                             Functor,
                             typename Operand1::ResizeType,
                             typename Operand2::ResizeType,
                             typename Operand3::ResizeType,
                             typename Operand4::ResizeType,
                             typename Operand5::ResizeType,
                             typename Operand6::ResizeType,
                             typename Operand7::ResizeType,
                             typename Operand8::ResizeType,
                             typename Operand9::ResizeType> typedef ResizeType;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise9<GPUWalk,
                             Functor,
                             typename Operand1::GPUWalkType,
                             typename Operand2::GPUWalkType,
                             typename Operand3::GPUWalkType,
                             typename Operand4::GPUWalkType,
                             typename Operand5::GPUWalkType,
                             typename Operand6::GPUWalkType,
                             typename Operand7::GPUWalkType,
                             typename Operand8::GPUWalkType,
                             typename Operand9::GPUWalkType> typedef GPUWalkType
             ;
          #endif
          /* __CUDACC__ */

          ApplyPointwise9(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6,
                          Operand7 const & operand7,
                          Operand8 const & operand8,
                          Operand9 const & operand9)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7),
            operand8_(operand8),
            operand9_(operand9)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(),
                            min(operand3_.ghosts_with_bc(),
                                min(operand4_.ghosts_with_bc(),
                                    min(operand5_.ghosts_with_bc(),
                                        min(operand6_.ghosts_with_bc(),
                                            min(operand7_.ghosts_with_bc(),
                                                min(operand8_.ghosts_with_bc(),
                                                    operand9_.ghosts_with_bc()))))))));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(),
                            min(operand3_.ghosts_without_bc(),
                                min(operand4_.ghosts_without_bc(),
                                    min(operand5_.ghosts_without_bc(),
                                        min(operand6_.ghosts_without_bc(),
                                            min(operand7_.ghosts_without_bc(),
                                                min(operand8_.ghosts_without_bc(),
                                                    operand9_.ghosts_without_bc()))))))));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents() || operand4_.has_extents() ||
                     operand5_.has_extents() || operand6_.has_extents() ||
                     operand7_.has_extents() || operand8_.has_extents() ||
                     operand9_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents() || operand4_.has_extents() ||
                    operand5_.has_extents() || operand6_.has_extents() ||
                    operand7_.has_extents() || operand8_.has_extents() ||
                    operand9_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else {
                         if(operand3_.has_extents()) {
                            extents = operand3_.extents();
                         }
                         else {
                            if(operand4_.has_extents()) {
                               extents = operand4_.extents();
                            }
                            else {
                               if(operand5_.has_extents()) {
                                  extents = operand5_.extents();
                               }
                               else {
                                  if(operand6_.has_extents()) {
                                     extents = operand6_.extents();
                                  }
                                  else {
                                     if(operand7_.has_extents()) {
                                        extents = operand7_.extents();
                                     }
                                     else {
                                        if(operand8_.has_extents()) {
                                           extents = operand8_.extents();
                                        }
                                        else { extents = operand9_.extents(); };
                                     };
                                  };
                               };
                            };
                         };
                      };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };

                   if(operand4_.has_extents()) {
                      assert(extents == operand4_.extents());
                   };

                   if(operand5_.has_extents()) {
                      assert(extents == operand5_.extents());
                   };

                   if(operand6_.has_extents()) {
                      assert(extents == operand6_.extents());
                   };

                   if(operand7_.has_extents()) {
                      assert(extents == operand7_.extents());
                   };

                   if(operand8_.has_extents()) {
                      assert(extents == operand8_.extents());
                   };

                   if(operand9_.has_extents()) {
                      assert(extents == operand9_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : ((operand3_.has_extents()
                                                                           ?
                                                                           operand3_.extents()
                                                                           : ((operand4_.has_extents()
                                                                               ?
                                                                               operand4_.extents()
                                                                               :
                                                                               ((operand5_.has_extents()
                                                                                 ?
                                                                                 operand5_.extents()
                                                                                 :
                                                                                 ((operand6_.has_extents()
                                                                                   ?
                                                                                   operand6_.extents()
                                                                                   :
                                                                                   ((operand7_.has_extents()
                                                                                     ?
                                                                                     operand7_.extents()
                                                                                     :
                                                                                     ((operand8_.has_extents()
                                                                                       ?
                                                                                       operand8_.extents()
                                                                                       :
                                                                                       (operand9_.extents()))))))))))))))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : ((operand3_.has_extents()
                                                                          ?
                                                                          operand3_.has_bc()
                                                                          : ((operand4_.has_extents()
                                                                              ?
                                                                              operand4_.has_bc()
                                                                              : ((operand5_.has_extents()
                                                                                  ?
                                                                                  operand5_.has_bc()
                                                                                  :
                                                                                  ((operand6_.has_extents()
                                                                                    ?
                                                                                    operand6_.has_bc()
                                                                                    :
                                                                                    ((operand7_.has_extents()
                                                                                      ?
                                                                                      operand7_.has_bc()
                                                                                      :
                                                                                      ((operand8_.has_extents()
                                                                                        ?
                                                                                        operand8_.has_bc()
                                                                                        :
                                                                                        (operand9_.has_bc()))))))))))))))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC),
                                operand4_.init(extents, ghosts, hasBC),
                                operand5_.init(extents, ghosts, hasBC),
                                operand6_.init(extents, ghosts, hasBC),
                                operand7_.init(extents, ghosts, hasBC),
                                operand8_.init(extents, ghosts, hasBC),
                                operand9_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize(),
                                  operand4_.resize(),
                                  operand5_.resize(),
                                  operand6_.resize(),
                                  operand7_.resize(),
                                  operand8_.resize(),
                                  operand9_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready() && operand4_.cpu_ready() &&
                        operand5_.cpu_ready() && operand6_.cpu_ready() &&
                        operand7_.cpu_ready() && operand8_.cpu_ready() &&
                        operand9_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand4_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand5_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand6_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand7_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand8_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand9_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex); operand4_.gpu_prep(deviceIndex);
                   operand5_.gpu_prep(deviceIndex); operand6_.gpu_prep(deviceIndex);
                   operand7_.gpu_prep(deviceIndex); operand8_.gpu_prep(deviceIndex);
                   operand9_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;

          Operand4 const operand4_;

          Operand5 const operand5_;

          Operand6 const operand6_;

          Operand7 const operand7_;

          Operand8 const operand8_;

          Operand9 const operand9_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7,
                  typename Operand8,
                  typename Operand9>
          struct ApplyPointwise9<Resize,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6,
                                 Operand7,
                                 Operand8,
                                 Operand9> {
            public:
             ApplyPointwise9<SeqWalk,
                             Functor,
                             typename Operand1::SeqWalkType,
                             typename Operand2::SeqWalkType,
                             typename Operand3::SeqWalkType,
                             typename Operand4::SeqWalkType,
                             typename Operand5::SeqWalkType,
                             typename Operand6::SeqWalkType,
                             typename Operand7::SeqWalkType,
                             typename Operand8::SeqWalkType,
                             typename Operand9::SeqWalkType> typedef SeqWalkType
             ;

             ApplyPointwise9(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6,
                             Operand7 const & operand7,
                             Operand8 const & operand8,
                             Operand9 const & operand9)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7),
               operand8_(operand8),
               operand9_(operand9)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC),
                                   operand4_.init(extents, ghosts, hasBC),
                                   operand5_.init(extents, ghosts, hasBC),
                                   operand6_.init(extents, ghosts, hasBC),
                                   operand7_.init(extents, ghosts, hasBC),
                                   operand8_.init(extents, ghosts, hasBC),
                                   operand9_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;

             Operand4 const operand4_;

             Operand5 const operand5_;

             Operand6 const operand6_;

             Operand7 const operand7_;

             Operand8 const operand8_;

             Operand9 const operand9_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9>
       struct ApplyPointwise9<SeqWalk,
                              Functor,
                              Operand1,
                              Operand2,
                              Operand3,
                              Operand4,
                              Operand5,
                              Operand6,
                              Operand7,
                              Operand8,
                              Operand9> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise9(Operand1 const & operand1,
                          Operand2 const & operand2,
                          Operand3 const & operand3,
                          Operand4 const & operand4,
                          Operand5 const & operand5,
                          Operand6 const & operand6,
                          Operand7 const & operand7,
                          Operand8 const & operand8,
                          Operand9 const & operand9)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7),
            operand8_(operand8),
            operand9_(operand9)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z),
                             operand4_.eval(x, y, z),
                             operand5_.eval(x, y, z),
                             operand6_.eval(x, y, z),
                             operand7_.eval(x, y, z),
                             operand8_.eval(x, y, z),
                             operand9_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;

          Operand4 operand4_;

          Operand5 operand5_;

          Operand6 operand6_;

          Operand7 operand7_;

          Operand8 operand8_;

          Operand9 operand9_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7,
                  typename Operand8,
                  typename Operand9>
          struct ApplyPointwise9<GPUWalk,
                                 Functor,
                                 Operand1,
                                 Operand2,
                                 Operand3,
                                 Operand4,
                                 Operand5,
                                 Operand6,
                                 Operand7,
                                 Operand8,
                                 Operand9> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise9(Operand1 const & operand1,
                             Operand2 const & operand2,
                             Operand3 const & operand3,
                             Operand4 const & operand4,
                             Operand5 const & operand5,
                             Operand6 const & operand6,
                             Operand7 const & operand7,
                             Operand8 const & operand8,
                             Operand9 const & operand9)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7),
               operand8_(operand8),
               operand9_(operand9)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z),
                                operand4_.eval(x, y, z),
                                operand5_.eval(x, y, z),
                                operand6_.eval(x, y, z),
                                operand7_.eval(x, y, z),
                                operand8_.eval(x, y, z),
                                operand9_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;

             Operand4 operand4_;

             Operand5 operand5_;

             Operand6 operand6_;

             Operand7 operand7_;

             Operand8 operand8_;

             Operand9 operand9_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9>
       struct FindFieldType9 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           RefineFieldType<typename
                                                                           FindFieldType<Operand3>::
                                                                           Result,
                                                                           typename
                                                                           RefineFieldType<typename
                                                                                           FindFieldType<Operand4>::
                                                                                           Result,
                                                                                           typename
                                                                                           RefineFieldType<typename
                                                                                                           FindFieldType<Operand5>::
                                                                                                           Result,
                                                                                                           typename
                                                                                                           RefineFieldType<typename
                                                                                                                           FindFieldType<Operand6>::
                                                                                                                           Result,
                                                                                                                           typename
                                                                                                                           RefineFieldType<typename
                                                                                                                                           FindFieldType<Operand7>::
                                                                                                                                           Result,
                                                                                                                                           typename
                                                                                                                                           RefineFieldType<typename
                                                                                                                                                           FindFieldType<Operand8>::
                                                                                                                                                           Result,
                                                                                                                                                           typename
                                                                                                                                                           FindFieldType<Operand9>::
                                                                                                                                                           Result>::
                                                                                                                                           Result>::
                                                                                                                           Result>::
                                                                                                           Result>::
                                                                                           Result>::
                                                                           Result>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9>
       inline NeboExpression<ApplyPointwise9<Initial,
                                             Functor,
                                             typename FinalType<Operand1>::
                                             Result,
                                             typename FinalType<Operand2>::
                                             Result,
                                             typename FinalType<Operand3>::
                                             Result,
                                             typename FinalType<Operand4>::
                                             Result,
                                             typename FinalType<Operand5>::
                                             Result,
                                             typename FinalType<Operand6>::
                                             Result,
                                             typename FinalType<Operand7>::
                                             Result,
                                             typename FinalType<Operand8>::
                                             Result,
                                             typename FinalType<Operand9>::
                                             Result>,
                             typename FindFieldType9<Operand1,
                                                     Operand2,
                                                     Operand3,
                                                     Operand4,
                                                     Operand5,
                                                     Operand6,
                                                     Operand7,
                                                     Operand8,
                                                     Operand9>::Result>
       apply_pointwise(Operand1 operand1,
                       Operand2 operand2,
                       Operand3 operand3,
                       Operand4 operand4,
                       Operand5 operand5,
                       Operand6 operand6,
                       Operand7 operand7,
                       Operand8 operand8,
                       Operand9 operand9) {
          ApplyPointwise9<Initial,
                          Functor,
                          typename FinalType<Operand1>::Result,
                          typename FinalType<Operand2>::Result,
                          typename FinalType<Operand3>::Result,
                          typename FinalType<Operand4>::Result,
                          typename FinalType<Operand5>::Result,
                          typename FinalType<Operand6>::Result,
                          typename FinalType<Operand7>::Result,
                          typename FinalType<Operand8>::Result,
                          typename FinalType<Operand9>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType9<Operand1,
                                                 Operand2,
                                                 Operand3,
                                                 Operand4,
                                                 Operand5,
                                                 Operand6,
                                                 Operand7,
                                                 Operand8,
                                                 Operand9>::Result> typedef
          ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3),
                                       normalize(operand4),
                                       normalize(operand5),
                                       normalize(operand6),
                                       normalize(operand7),
                                       normalize(operand8),
                                       normalize(operand9)));
       }

      template<typename CurrentMode,
               typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9,
               typename Operand10>
       struct ApplyPointwise10;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9,
               typename Operand10>
       struct ApplyPointwise10<Initial,
                               Functor,
                               Operand1,
                               Operand2,
                               Operand3,
                               Operand4,
                               Operand5,
                               Operand6,
                               Operand7,
                               Operand8,
                               Operand9,
                               Operand10> {
         public:
          ApplyPointwise10<SeqWalk,
                           Functor,
                           typename Operand1::SeqWalkType,
                           typename Operand2::SeqWalkType,
                           typename Operand3::SeqWalkType,
                           typename Operand4::SeqWalkType,
                           typename Operand5::SeqWalkType,
                           typename Operand6::SeqWalkType,
                           typename Operand7::SeqWalkType,
                           typename Operand8::SeqWalkType,
                           typename Operand9::SeqWalkType,
                           typename Operand10::SeqWalkType> typedef SeqWalkType;

          #ifdef ENABLE_THREADS
             ApplyPointwise10<Resize,
                              Functor,
                              typename Operand1::ResizeType,
                              typename Operand2::ResizeType,
                              typename Operand3::ResizeType,
                              typename Operand4::ResizeType,
                              typename Operand5::ResizeType,
                              typename Operand6::ResizeType,
                              typename Operand7::ResizeType,
                              typename Operand8::ResizeType,
                              typename Operand9::ResizeType,
                              typename Operand10::ResizeType> typedef ResizeType
             ;
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             ApplyPointwise10<GPUWalk,
                              Functor,
                              typename Operand1::GPUWalkType,
                              typename Operand2::GPUWalkType,
                              typename Operand3::GPUWalkType,
                              typename Operand4::GPUWalkType,
                              typename Operand5::GPUWalkType,
                              typename Operand6::GPUWalkType,
                              typename Operand7::GPUWalkType,
                              typename Operand8::GPUWalkType,
                              typename Operand9::GPUWalkType,
                              typename Operand10::GPUWalkType> typedef
             GPUWalkType;
          #endif
          /* __CUDACC__ */

          ApplyPointwise10(Operand1 const & operand1,
                           Operand2 const & operand2,
                           Operand3 const & operand3,
                           Operand4 const & operand4,
                           Operand5 const & operand5,
                           Operand6 const & operand6,
                           Operand7 const & operand7,
                           Operand8 const & operand8,
                           Operand9 const & operand9,
                           Operand10 const & operand10)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7),
            operand8_(operand8),
            operand9_(operand9),
            operand10_(operand10)
          {}

          inline GhostData ghosts_with_bc(void) const {
             return min(operand1_.ghosts_with_bc(),
                        min(operand2_.ghosts_with_bc(),
                            min(operand3_.ghosts_with_bc(),
                                min(operand4_.ghosts_with_bc(),
                                    min(operand5_.ghosts_with_bc(),
                                        min(operand6_.ghosts_with_bc(),
                                            min(operand7_.ghosts_with_bc(),
                                                min(operand8_.ghosts_with_bc(),
                                                    min(operand9_.ghosts_with_bc(),
                                                        operand10_.ghosts_with_bc())))))))));
          }

          inline GhostData ghosts_without_bc(void) const {
             return min(operand1_.ghosts_without_bc(),
                        min(operand2_.ghosts_without_bc(),
                            min(operand3_.ghosts_without_bc(),
                                min(operand4_.ghosts_without_bc(),
                                    min(operand5_.ghosts_without_bc(),
                                        min(operand6_.ghosts_without_bc(),
                                            min(operand7_.ghosts_without_bc(),
                                                min(operand8_.ghosts_without_bc(),
                                                    min(operand9_.ghosts_without_bc(),
                                                        operand10_.ghosts_without_bc())))))))));
          }

          inline bool has_extents(void) const {
             return (operand1_.has_extents() || operand2_.has_extents() ||
                     operand3_.has_extents() || operand4_.has_extents() ||
                     operand5_.has_extents() || operand6_.has_extents() ||
                     operand7_.has_extents() || operand8_.has_extents() ||
                     operand9_.has_extents() || operand10_.has_extents());
          }

          inline IntVec extents(void) const {
             #ifndef NDEBUG
                if((operand1_.has_extents() || operand2_.has_extents() ||
                    operand3_.has_extents() || operand4_.has_extents() ||
                    operand5_.has_extents() || operand6_.has_extents() ||
                    operand7_.has_extents() || operand8_.has_extents() ||
                    operand9_.has_extents() || operand10_.has_extents())) {
                   IntVec extents;

                   if(operand1_.has_extents()) { extents = operand1_.extents(); }
                   else {
                      if(operand2_.has_extents()) {
                         extents = operand2_.extents();
                      }
                      else {
                         if(operand3_.has_extents()) {
                            extents = operand3_.extents();
                         }
                         else {
                            if(operand4_.has_extents()) {
                               extents = operand4_.extents();
                            }
                            else {
                               if(operand5_.has_extents()) {
                                  extents = operand5_.extents();
                               }
                               else {
                                  if(operand6_.has_extents()) {
                                     extents = operand6_.extents();
                                  }
                                  else {
                                     if(operand7_.has_extents()) {
                                        extents = operand7_.extents();
                                     }
                                     else {
                                        if(operand8_.has_extents()) {
                                           extents = operand8_.extents();
                                        }
                                        else {
                                           if(operand9_.has_extents()) {
                                              extents = operand9_.extents();
                                           }
                                           else {
                                              extents = operand10_.extents();
                                           };
                                        };
                                     };
                                  };
                               };
                            };
                         };
                      };
                   };

                   if(operand1_.has_extents()) {
                      assert(extents == operand1_.extents());
                   };

                   if(operand2_.has_extents()) {
                      assert(extents == operand2_.extents());
                   };

                   if(operand3_.has_extents()) {
                      assert(extents == operand3_.extents());
                   };

                   if(operand4_.has_extents()) {
                      assert(extents == operand4_.extents());
                   };

                   if(operand5_.has_extents()) {
                      assert(extents == operand5_.extents());
                   };

                   if(operand6_.has_extents()) {
                      assert(extents == operand6_.extents());
                   };

                   if(operand7_.has_extents()) {
                      assert(extents == operand7_.extents());
                   };

                   if(operand8_.has_extents()) {
                      assert(extents == operand8_.extents());
                   };

                   if(operand9_.has_extents()) {
                      assert(extents == operand9_.extents());
                   };

                   if(operand10_.has_extents()) {
                      assert(extents == operand10_.extents());
                   };
                }
             #endif
             /* NDEBUG */;

             return (operand1_.has_extents() ? operand1_.extents() : ((operand2_.has_extents()
                                                                       ?
                                                                       operand2_.extents()
                                                                       : ((operand3_.has_extents()
                                                                           ?
                                                                           operand3_.extents()
                                                                           : ((operand4_.has_extents()
                                                                               ?
                                                                               operand4_.extents()
                                                                               :
                                                                               ((operand5_.has_extents()
                                                                                 ?
                                                                                 operand5_.extents()
                                                                                 :
                                                                                 ((operand6_.has_extents()
                                                                                   ?
                                                                                   operand6_.extents()
                                                                                   :
                                                                                   ((operand7_.has_extents()
                                                                                     ?
                                                                                     operand7_.extents()
                                                                                     :
                                                                                     ((operand8_.has_extents()
                                                                                       ?
                                                                                       operand8_.extents()
                                                                                       :
                                                                                       ((operand9_.has_extents()
                                                                                         ?
                                                                                         operand9_.extents()
                                                                                         :
                                                                                         (operand10_.extents()))))))))))))))))));
          }

          inline IntVec has_bc(void) const {
             return (operand1_.has_extents() ? operand1_.has_bc() : ((operand2_.has_extents()
                                                                      ?
                                                                      operand2_.has_bc()
                                                                      : ((operand3_.has_extents()
                                                                          ?
                                                                          operand3_.has_bc()
                                                                          : ((operand4_.has_extents()
                                                                              ?
                                                                              operand4_.has_bc()
                                                                              : ((operand5_.has_extents()
                                                                                  ?
                                                                                  operand5_.has_bc()
                                                                                  :
                                                                                  ((operand6_.has_extents()
                                                                                    ?
                                                                                    operand6_.has_bc()
                                                                                    :
                                                                                    ((operand7_.has_extents()
                                                                                      ?
                                                                                      operand7_.has_bc()
                                                                                      :
                                                                                      ((operand8_.has_extents()
                                                                                        ?
                                                                                        operand8_.has_bc()
                                                                                        :
                                                                                        ((operand9_.has_extents()
                                                                                          ?
                                                                                          operand9_.has_bc()
                                                                                          :
                                                                                          (operand10_.has_bc()))))))))))))))))));
          }

          inline SeqWalkType init(IntVec const & extents,
                                  GhostData const & ghosts,
                                  IntVec const & hasBC) const {
             return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                operand2_.init(extents, ghosts, hasBC),
                                operand3_.init(extents, ghosts, hasBC),
                                operand4_.init(extents, ghosts, hasBC),
                                operand5_.init(extents, ghosts, hasBC),
                                operand6_.init(extents, ghosts, hasBC),
                                operand7_.init(extents, ghosts, hasBC),
                                operand8_.init(extents, ghosts, hasBC),
                                operand9_.init(extents, ghosts, hasBC),
                                operand10_.init(extents, ghosts, hasBC));
          }

          #ifdef ENABLE_THREADS
             inline ResizeType resize(void) const {
                return ResizeType(operand1_.resize(),
                                  operand2_.resize(),
                                  operand3_.resize(),
                                  operand4_.resize(),
                                  operand5_.resize(),
                                  operand6_.resize(),
                                  operand7_.resize(),
                                  operand8_.resize(),
                                  operand9_.resize(),
                                  operand10_.resize());
             }
          #endif
          /* ENABLE_THREADS */

          #ifdef __CUDACC__
             inline bool cpu_ready(void) const {
                return (operand1_.cpu_ready() && operand2_.cpu_ready() &&
                        operand3_.cpu_ready() && operand4_.cpu_ready() &&
                        operand5_.cpu_ready() && operand6_.cpu_ready() &&
                        operand7_.cpu_ready() && operand8_.cpu_ready() &&
                        operand9_.cpu_ready() && operand10_.cpu_ready());
             }

             inline bool gpu_ready(int const deviceIndex) const { return false; }

             inline GPUWalkType gpu_init(IntVec const & extents,
                                         GhostData const & ghosts,
                                         IntVec const & hasBC,
                                         int const deviceIndex) const {
                return GPUWalkType(operand1_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand2_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand3_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand4_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand5_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand6_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand7_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand8_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand9_.gpu_init(deviceIndex,
                                                      extents,
                                                      ghosts,
                                                      hasBC,
                                                      deviceIndex),
                                   operand10_.gpu_init(deviceIndex,
                                                       extents,
                                                       ghosts,
                                                       hasBC,
                                                       deviceIndex));
             }

             #ifdef NEBO_GPU_TEST
                inline void gpu_prep(int const deviceIndex) const {
                   operand1_.gpu_prep(deviceIndex); operand2_.gpu_prep(deviceIndex);
                   operand3_.gpu_prep(deviceIndex); operand4_.gpu_prep(deviceIndex);
                   operand5_.gpu_prep(deviceIndex); operand6_.gpu_prep(deviceIndex);
                   operand7_.gpu_prep(deviceIndex); operand8_.gpu_prep(deviceIndex);
                   operand9_.gpu_prep(deviceIndex); operand10_.gpu_prep(deviceIndex);
                }
             #endif
             /* NEBO_GPU_TEST */
          #endif
          /* __CUDACC__ */

         private:
          Operand1 const operand1_;

          Operand2 const operand2_;

          Operand3 const operand3_;

          Operand4 const operand4_;

          Operand5 const operand5_;

          Operand6 const operand6_;

          Operand7 const operand7_;

          Operand8 const operand8_;

          Operand9 const operand9_;

          Operand10 const operand10_;
      };
      #ifdef ENABLE_THREADS
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7,
                  typename Operand8,
                  typename Operand9,
                  typename Operand10>
          struct ApplyPointwise10<Resize,
                                  Functor,
                                  Operand1,
                                  Operand2,
                                  Operand3,
                                  Operand4,
                                  Operand5,
                                  Operand6,
                                  Operand7,
                                  Operand8,
                                  Operand9,
                                  Operand10> {
            public:
             ApplyPointwise10<SeqWalk,
                              Functor,
                              typename Operand1::SeqWalkType,
                              typename Operand2::SeqWalkType,
                              typename Operand3::SeqWalkType,
                              typename Operand4::SeqWalkType,
                              typename Operand5::SeqWalkType,
                              typename Operand6::SeqWalkType,
                              typename Operand7::SeqWalkType,
                              typename Operand8::SeqWalkType,
                              typename Operand9::SeqWalkType,
                              typename Operand10::SeqWalkType> typedef
             SeqWalkType;

             ApplyPointwise10(Operand1 const & operand1,
                              Operand2 const & operand2,
                              Operand3 const & operand3,
                              Operand4 const & operand4,
                              Operand5 const & operand5,
                              Operand6 const & operand6,
                              Operand7 const & operand7,
                              Operand8 const & operand8,
                              Operand9 const & operand9,
                              Operand10 const & operand10)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7),
               operand8_(operand8),
               operand9_(operand9),
               operand10_(operand10)
             {}

             inline SeqWalkType init(IntVec const & extents,
                                     GhostData const & ghosts,
                                     IntVec const & hasBC) const {
                return SeqWalkType(operand1_.init(extents, ghosts, hasBC),
                                   operand2_.init(extents, ghosts, hasBC),
                                   operand3_.init(extents, ghosts, hasBC),
                                   operand4_.init(extents, ghosts, hasBC),
                                   operand5_.init(extents, ghosts, hasBC),
                                   operand6_.init(extents, ghosts, hasBC),
                                   operand7_.init(extents, ghosts, hasBC),
                                   operand8_.init(extents, ghosts, hasBC),
                                   operand9_.init(extents, ghosts, hasBC),
                                   operand10_.init(extents, ghosts, hasBC));
             }

            private:
             Operand1 const operand1_;

             Operand2 const operand2_;

             Operand3 const operand3_;

             Operand4 const operand4_;

             Operand5 const operand5_;

             Operand6 const operand6_;

             Operand7 const operand7_;

             Operand8 const operand8_;

             Operand9 const operand9_;

             Operand10 const operand10_;
         }
      #endif
      /* ENABLE_THREADS */;
      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9,
               typename Operand10>
       struct ApplyPointwise10<SeqWalk,
                               Functor,
                               Operand1,
                               Operand2,
                               Operand3,
                               Operand4,
                               Operand5,
                               Operand6,
                               Operand7,
                               Operand8,
                               Operand9,
                               Operand10> {
         public:
          typename Operand1::value_type typedef value_type;

          ApplyPointwise10(Operand1 const & operand1,
                           Operand2 const & operand2,
                           Operand3 const & operand3,
                           Operand4 const & operand4,
                           Operand5 const & operand5,
                           Operand6 const & operand6,
                           Operand7 const & operand7,
                           Operand8 const & operand8,
                           Operand9 const & operand9,
                           Operand10 const & operand10)
          : operand1_(operand1),
            operand2_(operand2),
            operand3_(operand3),
            operand4_(operand4),
            operand5_(operand5),
            operand6_(operand6),
            operand7_(operand7),
            operand8_(operand8),
            operand9_(operand9),
            operand10_(operand10)
          {}

          inline value_type eval(int const x, int const y, int const z) const {
             return functor_(operand1_.eval(x, y, z),
                             operand2_.eval(x, y, z),
                             operand3_.eval(x, y, z),
                             operand4_.eval(x, y, z),
                             operand5_.eval(x, y, z),
                             operand6_.eval(x, y, z),
                             operand7_.eval(x, y, z),
                             operand8_.eval(x, y, z),
                             operand9_.eval(x, y, z),
                             operand10_.eval(x, y, z));
          }

         private:
          Functor functor_;

          Operand1 operand1_;

          Operand2 operand2_;

          Operand3 operand3_;

          Operand4 operand4_;

          Operand5 operand5_;

          Operand6 operand6_;

          Operand7 operand7_;

          Operand8 operand8_;

          Operand9 operand9_;

          Operand10 operand10_;
      };
      #ifdef __CUDACC__
         template<typename Functor,
                  typename Operand1,
                  typename Operand2,
                  typename Operand3,
                  typename Operand4,
                  typename Operand5,
                  typename Operand6,
                  typename Operand7,
                  typename Operand8,
                  typename Operand9,
                  typename Operand10>
          struct ApplyPointwise10<GPUWalk,
                                  Functor,
                                  Operand1,
                                  Operand2,
                                  Operand3,
                                  Operand4,
                                  Operand5,
                                  Operand6,
                                  Operand7,
                                  Operand8,
                                  Operand9,
                                  Operand10> {
            public:
             typename Operand1::value_type typedef value_type;

             ApplyPointwise10(Operand1 const & operand1,
                              Operand2 const & operand2,
                              Operand3 const & operand3,
                              Operand4 const & operand4,
                              Operand5 const & operand5,
                              Operand6 const & operand6,
                              Operand7 const & operand7,
                              Operand8 const & operand8,
                              Operand9 const & operand9,
                              Operand10 const & operand10)
             : operand1_(operand1),
               operand2_(operand2),
               operand3_(operand3),
               operand4_(operand4),
               operand5_(operand5),
               operand6_(operand6),
               operand7_(operand7),
               operand8_(operand8),
               operand9_(operand9),
               operand10_(operand10)
             {}

             __device__ inline value_type eval(int const x,
                                               int const y,
                                               int const z) const {
                return functor_(operand1_.eval(x, y, z),
                                operand2_.eval(x, y, z),
                                operand3_.eval(x, y, z),
                                operand4_.eval(x, y, z),
                                operand5_.eval(x, y, z),
                                operand6_.eval(x, y, z),
                                operand7_.eval(x, y, z),
                                operand8_.eval(x, y, z),
                                operand9_.eval(x, y, z),
                                operand10_.eval(x, y, z));
             }

            private:
             Functor functor_;

             Operand1 operand1_;

             Operand2 operand2_;

             Operand3 operand3_;

             Operand4 operand4_;

             Operand5 operand5_;

             Operand6 operand6_;

             Operand7 operand7_;

             Operand8 operand8_;

             Operand9 operand9_;

             Operand10 operand10_;
         }
      #endif
      /* __CUDACC__ */

      template<typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9,
               typename Operand10>
       struct FindFieldType10 {
         typename RefineFieldType<typename FindFieldType<Operand1>::Result,
                                  typename RefineFieldType<typename
                                                           FindFieldType<Operand2>::
                                                           Result,
                                                           typename
                                                           RefineFieldType<typename
                                                                           FindFieldType<Operand3>::
                                                                           Result,
                                                                           typename
                                                                           RefineFieldType<typename
                                                                                           FindFieldType<Operand4>::
                                                                                           Result,
                                                                                           typename
                                                                                           RefineFieldType<typename
                                                                                                           FindFieldType<Operand5>::
                                                                                                           Result,
                                                                                                           typename
                                                                                                           RefineFieldType<typename
                                                                                                                           FindFieldType<Operand6>::
                                                                                                                           Result,
                                                                                                                           typename
                                                                                                                           RefineFieldType<typename
                                                                                                                                           FindFieldType<Operand7>::
                                                                                                                                           Result,
                                                                                                                                           typename
                                                                                                                                           RefineFieldType<typename
                                                                                                                                                           FindFieldType<Operand8>::
                                                                                                                                                           Result,
                                                                                                                                                           typename
                                                                                                                                                           RefineFieldType<typename
                                                                                                                                                                           FindFieldType<Operand9>::
                                                                                                                                                                           Result,
                                                                                                                                                                           typename
                                                                                                                                                                           FindFieldType<Operand10>::
                                                                                                                                                                           Result>::
                                                                                                                                                           Result>::
                                                                                                                                           Result>::
                                                                                                                           Result>::
                                                                                                           Result>::
                                                                                           Result>::
                                                                           Result>::
                                                           Result>::Result>::
         Result typedef Result;
      };

      template<typename Functor,
               typename Operand1,
               typename Operand2,
               typename Operand3,
               typename Operand4,
               typename Operand5,
               typename Operand6,
               typename Operand7,
               typename Operand8,
               typename Operand9,
               typename Operand10>
       inline NeboExpression<ApplyPointwise10<Initial,
                                              Functor,
                                              typename FinalType<Operand1>::
                                              Result,
                                              typename FinalType<Operand2>::
                                              Result,
                                              typename FinalType<Operand3>::
                                              Result,
                                              typename FinalType<Operand4>::
                                              Result,
                                              typename FinalType<Operand5>::
                                              Result,
                                              typename FinalType<Operand6>::
                                              Result,
                                              typename FinalType<Operand7>::
                                              Result,
                                              typename FinalType<Operand8>::
                                              Result,
                                              typename FinalType<Operand9>::
                                              Result,
                                              typename FinalType<Operand10>::
                                              Result>,
                             typename FindFieldType10<Operand1,
                                                      Operand2,
                                                      Operand3,
                                                      Operand4,
                                                      Operand5,
                                                      Operand6,
                                                      Operand7,
                                                      Operand8,
                                                      Operand9,
                                                      Operand10>::Result>
       apply_pointwise(Operand1 operand1,
                       Operand2 operand2,
                       Operand3 operand3,
                       Operand4 operand4,
                       Operand5 operand5,
                       Operand6 operand6,
                       Operand7 operand7,
                       Operand8 operand8,
                       Operand9 operand9,
                       Operand10 operand10) {
          ApplyPointwise10<Initial,
                           Functor,
                           typename FinalType<Operand1>::Result,
                           typename FinalType<Operand2>::Result,
                           typename FinalType<Operand3>::Result,
                           typename FinalType<Operand4>::Result,
                           typename FinalType<Operand5>::Result,
                           typename FinalType<Operand6>::Result,
                           typename FinalType<Operand7>::Result,
                           typename FinalType<Operand8>::Result,
                           typename FinalType<Operand9>::Result,
                           typename FinalType<Operand10>::Result> typedef
          ReturnType;

          NeboExpression<ReturnType,
                         typename FindFieldType10<Operand1,
                                                  Operand2,
                                                  Operand3,
                                                  Operand4,
                                                  Operand5,
                                                  Operand6,
                                                  Operand7,
                                                  Operand8,
                                                  Operand9,
                                                  Operand10>::Result> typedef
          ReturnTerm;

          return ReturnTerm(ReturnType(normalize(operand1),
                                       normalize(operand2),
                                       normalize(operand3),
                                       normalize(operand4),
                                       normalize(operand5),
                                       normalize(operand6),
                                       normalize(operand7),
                                       normalize(operand8),
                                       normalize(operand9),
                                       normalize(operand10)));
       };
   } /* SpatialOps */

#endif
/* FULMAR_APPLY_POINTWISE_H */
