#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")

(define (single-assign name
                       lhs-pmtr
                       lhs-type
                       lhs-type-s
                       use-ghost
                       tpl-pmtrs
                       rhs-input-type
                       rhs-type
                       rhs-expr)
  (def-template (map typename (flatten* tpl-pmtrs lhs-pmtr))
    (def-returning-function (dcl-function name
                                          (ref (const lhs-type))
                                          (function-pmtr (ref lhs-type) 'lhs)
                                          (function-pmtr (ref (const rhs-input-type)) 'rhs))
      (list (if rhs-type
                (typedef rhs-type 'RhsType)
                null)
            (val-member-call (val-call (type-template NF-chunk 'Initial lhs-type-s)
                                       'lhs)
                             (type-template-function 'assign 'RhsType)
                             use-ghost
                             rhs-expr))
      'lhs)))
(define (assigns name use-ghost)
  (internal-smt-list
   blank-line
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  null
                  (typename (scope FT-chunk vt-chunk))
                  (type-template NS-chunk 'Initial (typename (scope FT-chunk vt-chunk)))
                  (val-call 'RhsType 'rhs))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  null
                  FT-chunk
                  (type-template NCF-chunk 'Initial FT-chunk)
                  (val-call 'RhsType 'rhs))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  'RhsType
                  (type-template NE-chunk 'RhsType FT-chunk)
                  #false
                  (val-member-call 'rhs 'expr))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  null
                  (SVFT-def-with-T (typename (scope FT-chunk vt-chunk)))
                  (type-template NCSVF-chunk 'Initial (typename (scope FT-chunk vt-chunk)))
                  (val-call 'RhsType 'rhs))
   (single-assign name
                  FT-chunk
                  FT-chunk
                  FT-chunk
                  use-ghost
                  'RhsType
                  (type-template NSVE-chunk 'RhsType (typename (scope FT-chunk vt-chunk)))
                  #false
                  (val-member-call 'rhs 'expr))
   (single-assign name
                  'T
                  SVFT-def-chunk
                  (space-after SVFT-def-chunk)
                  use-ghost
                  null
                  (typename (scope SVFT-def-chunk vt-chunk))
                  (type-template NS-chunk 'Initial (typename (scope SVFT-def-chunk vt-chunk)))
                  (val-call 'RhsType 'rhs))
   (single-assign name
                  'T
                  SVFT-def-chunk
                  (space-after SVFT-def-chunk)
                  use-ghost
                  null
                  SVFT-def-chunk
                  (type-template NCSVF-chunk 'Initial 'T)
                  (val-call 'RhsType 'rhs))
   (single-assign name
                  'T
                  SVFT-def-chunk
                  (space-after SVFT-def-chunk)
                  use-ghost
                  'RhsType
                  (type-template NSVE-chunk 'RhsType 'T)
                  #false
                  (val-member-call 'rhs 'expr))))

                                        ; beginnning of file
(pp-header-file
 'NEBO_ASSIGNMENT_H
 (SpatialOps-namespace
  (assigns (add-spaces 'operator '<<=)
           'true)
  (assigns 'interior_assign
           'false)
  ))
