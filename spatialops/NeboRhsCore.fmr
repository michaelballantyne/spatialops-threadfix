#lang fulmar

 ; Copyright (c) 2014 The University of Utah
 ;
 ; Permission is hereby granted, free of charge, to any person obtaining a copy
 ; of this software and associated documentation files (the "Software"), to
 ; deal in the Software without restriction, including without limitation the
 ; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ; sell copies of the Software, and to permit persons to whom the Software is
 ; furnished to do so, subject to the following conditions:
 ;
 ; The above copyright notice and this permission notice shall be included in
 ; all copies or substantial portions of the Software.
 ;
 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ; IN THE SOFTWARE.

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")

(provide (all-defined-out))

(define (build-Initial-rhs name
                           FT
                           tpl-irreg-pars
                           tpl-reg-pars
                           typedefs
                           tpl-irreg-args
                           constructor
                           possible-ghosts
                           minimum-ghosts
                           has-extent
                           extent-check
                           extent-expr
                           SW-cons-args
                           RS-cons-args
                           cpu-ready-body
                           gpu-ready-body
                           gpu-cons-args
                           gpu-prep-body
                           publics
                           privates)
  (build-Initial-general name
                         FT
                         tpl-irreg-pars
                         tpl-reg-pars
                         typedefs
                         tpl-irreg-args
                         constructor
                         (list (def-returning-function (constize (dcl-function 'possible_ghosts GhostData))
                                 null
                                 possible-ghosts)
                               (def-returning-function (constize (dcl-function 'minimum_ghosts GhostData))
                                 null
                                 minimum-ghosts)
                               (def-returning-function (constize (dcl-function 'has_extent 'bool))
                                 null
                                 has-extent)
                               (def-returning-function (constize (dcl-function 'extent 'int (function-pmtr (const 'int) 'dir)))
                                 (if (not (null? extent-check))
                                     (pp-debug-only extent-check)
                                     null)
                                 extent-expr)
                               (def-returning-function (constize (dcl-function 'init 'SeqWalkType))
                                 null
                                 (val-call 'SeqWalkType SW-cons-args))
                               (pp-threads-only (def-returning-function (constize (dcl-function 'resize 'ResizeType))
                                                  null
                                                  (val-call 'ResizeType RS-cons-args)))
                               (pp-gpu-only (add-blank-lines (def-returning-function (constize (dcl-function 'cpu_ready 'bool))
                                                               null
                                                               cpu-ready-body)
                                                             (def-returning-function (constize (dcl-function 'gpu_ready 'bool (function-pmtr (const 'int) DI-chunk)))
                                                               null
                                                               gpu-ready-body)
                                                             (def-returning-function (constize (dcl-function 'gpu_init 'GPUWalkType (function-pmtr (const 'int) DI-chunk)))
                                                               null
                                                               (val-call 'GPUWalkType gpu-cons-args))
                                                             (pp-gpu-test-only (def-function (constize (dcl-function 'gpu_prep 'void (function-pmtr (const 'int) DI-chunk)))
                                                                                 gpu-prep-body))))
                               publics)
                         privates))
(define bs-Initial-rhs (arg-swap build-Initial-rhs 16 4 "bs-Initial-rhs"))
(define (build-Resize-rhs name
                          FT
                          tpl-irreg-pars
                          tpl-reg-pars
                          typedefs
                          tpl-irreg-args
                          constructor
                          SW-cons-args
                          publics
                          privates)
  (build-Resize-general name
                        FT
                        tpl-irreg-pars
                        tpl-reg-pars
                        typedefs
                        tpl-irreg-args
                        constructor
                        (list (def-returning-function (constize (dcl-function 'init
                                                                              'SeqWalkType))
                                null
                                (val-call 'SeqWalkType SW-cons-args))
                              publics)
                        privates))
(define bs-Resize-rhs (arg-swap build-Resize-rhs 6 4 "bs-Resize-rhs"))
(define (build-SeqWalk-rhs name
                           FT
                           tpl-irreg-pars
                           tpl-reg-pars
                           typedefs
                           constructor
                           eval-type
                           eval-result
                           publics
                           privates)
  (build-SeqWalk-general name
                         FT
                         tpl-irreg-pars
                         tpl-reg-pars
                         typedefs
                         constructor
                         (list (def-returning-function (constize (dcl-function 'eval
                                                                               eval-type
                                                                               index-pmtr))
                                 null
                                 eval-result)
                               publics)
                         privates))
(define bs-SeqWalk-rhs (arg-swap build-SeqWalk-rhs 6 4 "bs-SeqWalk-rhs"))
(define (build-gpu-rhs name
                       FT
                       tpl-irreg-pars
                       tpl-reg-pars
                       typedefs
                       constructor
                       eval-type
                       eval-result
                       publics
                       privates)
  (build-gpu-general name
                     FT
                     tpl-irreg-pars
                     tpl-reg-pars
                     typedefs
                     constructor
                     (list (device-only (def-returning-function (constize (dcl-function 'eval
                                                                                        eval-type
                                                                                        index-pmtr))
                                          null
                                          eval-result))
                           publics)
                     privates))
(define bs-gpu-rhs (arg-swap build-gpu-rhs 6 4 "bs-gpu-rhs"))
