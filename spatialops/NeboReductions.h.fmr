#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")

(define value-type (tpl-pmtr (scope FT-chunk 'value_type)))

(define (build-scalar-reduction name body)
  (tpl-def (tpl-pmtr AT-chunk)
           (r-fcn-def (fcn-dcl name
                               AT-chunk
                               (ad AT-chunk 'a)
                               (ad AT-chunk 'b))
                      null
                      body)))

(define (build-reduction name tpl-pmtrs arg body return-expr)
  (tpl-def tpl-pmtrs
           (r-fcn-def (fcn-dcl name value-type arg)
                      body
                      return-expr)))

(define (build-reduction-pair name return-expr)
  (list (build-reduction name
                         (list (tpl-pmtr 'ExprType)
                               (tpl-pmtr FT-chunk))
                         (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                               'fexpr)
                         null
                         return-expr)
        (build-reduction name
                         (tpl-pmtr FT-chunk)
                         (adcr FT-chunk 'field)
                         (typedef (tpl-use NCF-chunk 'Initial FT-chunk) 'ExprType)
                         (fc name
                             (fc (tpl-use NE-chunk 'ExprType FT-chunk)
                                 (fc 'ExprType 'field))))))

(define (build-general-nebo-reduction name return-expr)
  (list (build-reduction-pair name (return-expr #false))
        (build-reduction-pair (c name '_interior)
                              (return-expr #true))))

(define (build-nebo-reduction name scalar-name initial-value)
  (build-general-nebo-reduction name (lambda (is-interior)
                                       (fc 'nebo_fold
                                           (if is-interior 'false 'true)
                                           scalar-name
                                           initial-value
                                           'fexpr))))

                                        ; beginnning of file
(pp-header-file
 'NEBO_REDUCTIONS_H
 (map (lambda (name)
        (list (m (c 'field_ name)
                 null
                 (c 'nebo_ name))
              (m (c 'field_ name '_interior)
                 null
                 (c 'nebo_ name '_interior))))
      (list 'max
            'min
            'sum
            'norm))

 (n 'SpatialOps
    (tpl-def (list (tpl-pmtr 'ExprType)
                   (tpl-pmtr FT-chunk))
             (r-fcn-def (fcn-dcl 'nebo_fold
                                 value-type
                                 (ad 'bool 'useGhost)
                                 (gen-fcn-dcl (p (c "*" 'proc))
                                              value-type
                                              value-type
                                              value-type)
                                 (ad value-type 'initialValue)
                                 (adcr (tpl-use NE-chunk 'ExprType FT-chunk) 'fexpr))
                        (list (typedef value-type 'value_type)
                              (nt= 'ExprType 'initial (mfc 'fexpr 'expr))
                              (nt= GhostData 'ghosts (ter-cond 'useGhost
                                                               (mfc 'initial 'possible_ghosts)
                                                               (mfc 'initial 'minimum_ghosts)))
                              (nt=c 'int 'xLow (bs "-" (mfc 'ghosts 'get_minus "0")))
                              (nt=c 'int 'xHigh (n+ (mfc 'initial 'extent "0")
                                                    (mfc 'ghosts 'get_plus "0")))
                              (nt=c 'int 'yLow (bs "-" (mfc 'ghosts 'get_minus "1")))
                              (nt=c 'int 'yHigh (n+ (mfc 'initial 'extent "1")
                                                    (mfc 'ghosts 'get_plus "1")))
                              (nt=c 'int 'zLow (bs "-" (mfc 'ghosts 'get_minus "2")))
                              (nt=c 'int 'zHigh (n+ (mfc 'initial 'extent "2")
                                                    (mfc 'ghosts 'get_plus "2")))
                              (nt= 'value_type 'result 'initialValue)
                              (nt= (tpl-pmtr (scope 'ExprType 'SeqWalkType))
                                   'expr
                                   (mfc 'initial 'init))
                              (nfor (nt= 'int 'z 'zLow)
                                    (n< 'z 'zHigh)
                                    (n++ 'z)
                                    (nfor (nt= 'int 'y 'yLow)
                                          (n< 'y 'yHigh)
                                          (n++ 'y)
                                          (nfor (nt= 'int 'x 'xLow)
                                                (n< 'x 'xHigh)
                                                (n++ 'x)
                                                (n= 'result (fc 'proc 'result (mfc 'expr 'eval index-arg)))))))
                        'result))

    (build-scalar-reduction 'nebo_scalar_max (ter-cond (p (bs 'a '< 'b)) 'b 'a))
    (build-scalar-reduction 'nebo_scalar_min (ter-cond (p (bs 'a '> 'b)) 'b 'a))
    (build-scalar-reduction 'nebo_scalar_sum (n+ 'a 'b))

    (build-nebo-reduction 'nebo_max 'nebo_scalar_max (n/ "-1.0" "0.0"))
    (build-nebo-reduction 'nebo_min 'nebo_scalar_min (n/ "1.0" "0.0"))
    (build-nebo-reduction 'nebo_sum 'nebo_scalar_sum "0.0")
    (build-general-nebo-reduction 'nebo_norm (lambda (is-interior)
                                               (fc (scope 'std 'sqrt)
                                                   (fc (if is-interior 'nebo_sum_interior 'nebo_sum)
                                                       (fc 'pow 'fexpr "2")))))
    ))
