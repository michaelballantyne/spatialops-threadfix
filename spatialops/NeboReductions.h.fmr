#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")

(define (build-catamorphism-with-field name
                                       tpl-pmtrs
                                       return-type
                                       pmtrs
                                       args
                                       body
                                       return-expr)
  (define (build-simple-catamorphism name
                                     tpl-pmtrs
                                     return-type
                                     args
                                     body
                                     return-expr)
    (tpl-def (list tpl-pmtrs (tpl-pmtr FT-chunk))
             (r-fcn-def (fcn-dcl name return-type args)
                        body
                        return-expr)))
  (list (build-simple-catamorphism name
                                   (list tpl-pmtrs (tpl-pmtr 'ExprType))
                                   return-type
                                   (list pmtrs
                                         (adcr (tpl-use NE-chunk 'ExprType FT-chunk)
                                               'fexpr))
                                   body
                                   return-expr)
        (build-simple-catamorphism name
                                   tpl-pmtrs
                                   return-type
                                   (list pmtrs
                                         (adcr FT-chunk 'field))
                                   (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                                            'ExprType)
                                   (fc name
                                       args
                                       (fc (tpl-use NE-chunk 'ExprType FT-chunk)
                                           (fc 'ExprType
                                               'field))))))

(define (build-catamorphism name
                            tpl-pmtrs
                            return-type
                            pmtrs
                            args
                            body
                            return-expr)
  (list (build-catamorphism-with-field name
                                       tpl-pmtrs
                                       return-type
                                       pmtrs
                                       args
                                       (list (nt= GhostData 'ghosts (mfc (mfc 'fexpr 'expr)
                                                                         'possible_ghosts))
                                             body)
                                       return-expr)
        (build-catamorphism-with-field (c name '_interior)
                                       tpl-pmtrs
                                       return-type
                                       pmtrs
                                       args
                                       (list (ad GhostData (fc 'ghosts "0"))
                                             body)
                                       return-expr)))

(define (build-applied-catamorphism name body proc)
  (list (build-catamorphism-with-field name
                                       null
                                       (tpl-pmtr (scope FT-chunk vt-chunk))
                                       null
                                       null
                                       body
                                       (fc 'nebo_reduce proc 'fexpr))
        (build-catamorphism-with-field (c name '_interior)
                                       null
                                       (tpl-pmtr (scope FT-chunk vt-chunk))
                                       null
                                       null
                                       body
                                       (fc 'nebo_reduce_interior proc 'fexpr))))

(define (build-used-catamorphism name return-expr)
  (list (build-catamorphism-with-field name
                                       null
                                       (tpl-pmtr (scope FT-chunk vt-chunk))
                                       null
                                       null
                                       null
                                       (return-expr empty))
        (build-catamorphism-with-field (c name '_interior)
                                       null
                                       (tpl-pmtr (scope FT-chunk vt-chunk))
                                       null
                                       null
                                       null
                                       (return-expr '_interior))))

(define proc (p (c "*" 'proc)))

                                        ; beginnning of file
(pp-header-file
 'NEBO_REDUCTIONS_H
 (map (lambda (name)
        (list (m (c 'field_ name)
                 null
                 (c 'nebo_ name))
              (m (c 'field_ name '_interior)
                 null
                 (c 'nebo_ name '_interior))))
      (list 'fold
            'reduce
            'max
            'min
            'sum
            'norm))

 (n 'SpatialOps
    (build-catamorphism 'nebo_fold
                        (tpl-pmtr 'ResultType)
                        'ResultType
                        (list (gen-fcn-dcl proc
                                           (cref 'ResultType)
                                           (cref 'ResultType)
                                           (cref (tpl-pmtr (scope FT-chunk vt-chunk))))
                              (adcr 'ResultType 'initialValue))
                        (list 'proc 'initialValue)
                        (list (nt= 'ResultType 'result 'initialValue)
                              (nt= (tpl-pmtr (scope 'ExprType 'ReductionType))
                                   'expr
                                   (mfc (mfc 'fexpr 'expr)
                                        'reduce_init))
                              (nwhile (n-not (mfc 'expr 'at_end))
                                      (n= 'result (fc 'proc 'result (mfc 'expr 'eval)))
                                      (mfc 'expr 'next)))
                        'result)
    (let ([build-reduce
           (lambda (return-qual)
             (define atomic-type (tpl-pmtr (scope FT-chunk vt-chunk)))
             (build-catamorphism 'nebo_reduce
                                 null
                                 atomic-type
                                 (gen-fcn-dcl proc
                                              (return-qual atomic-type)
                                              (cref atomic-type)
                                              (cref atomic-type))
                                 'proc
                                 (list (nt= (tpl-pmtr (scope 'ExprType 'ReductionType))
                                            'expr
                                            (mfc (mfc 'fexpr 'expr)
                                                 'reduce_init))
                                       (nt= atomic-type 'result (mfc 'expr 'eval))
                                       (mfc 'expr 'next)
                                       (nwhile (n-not (mfc 'expr 'at_end))
                                               (n= 'result (fc 'proc 'result (mfc 'expr 'eval)))
                                               (mfc 'expr 'next)))
                                 'result))])
      (list (build-reduce cref)
            (build-reduce identity)))
    (build-applied-catamorphism 'nebo_max
                                null
                                (scope 'std 'max))
    (build-applied-catamorphism 'nebo_min
                                null
                                (scope 'std 'min))
    (tpl-def (tpl-pmtr AT-chunk)
             (r-fcn-def (fcn-dcl 'sum
                                 AT-chunk
                                 (b s AT-chunk 'const "&" 'a)
                                 (b s AT-chunk 'const "&" 'b))
                        null
                        (b s 'a "+" 'b)))
    (build-applied-catamorphism 'nebo_sum
                                null
                                (tpl-use 'sum (tpl-pmtr (scope FT-chunk vt-chunk))))
    (build-used-catamorphism 'nebo_norm
                             (lambda (ext)
                               (fc (scope 'std 'sqrt)
                                   (fc (c 'nebo_sum ext)
                                       (fc 'pow 'fexpr "2")))))
    )
 )
