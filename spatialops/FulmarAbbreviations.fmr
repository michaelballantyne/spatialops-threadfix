#lang fulmar

 ; Copyright (c) 2014 The University of Utah
 ;
 ; Permission is hereby granted, free of charge, to any person obtaining a copy
 ; of this software and associated documentation files (the "Software"), to
 ; deal in the Software without restriction, including without limitation the
 ; rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 ; sell copies of the Software, and to permit persons to whom the Software is
 ; furnished to do so, subject to the following conditions:
 ;
 ; The above copyright notice and this permission notice shall be included in
 ; all copies or substantial portions of the Software.
 ;
 ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 ; IN THE SOFTWARE.

(provide (all-defined-out))

(define l literal)
(define c concat)
(define b between)
(define b/a between/attach)
(define n namespace-define)
(define d described-smts)
(define p paren-list)
(define m macro-define)
(define s (spaces 1))
(define (cs . chunks)
  (c chunks s))
(define (scs . chunks)
  (c s chunks s))
(define (cc . chunks)
  (c chunks ";"))
(define (ccs first second)
  (c first ";" s second))
(define (bs . chunks)
  (apply b s chunks))
(define (bb . chunks)
  (apply b blank-line chunks))
(define (bn . chunks)
  (apply b new-line chunks))
(define (sbs . chunks)
  (cc (bs chunks)))
(define (bl-smts . chunks)
  (internal-smt-list blank-line chunks))
(define (nl-smts . chunks)
  (smt-list new-line chunks))
(define typedef typedef-smt)
(define (s-typedef first second)
  (cc (typedef-smt first second)))
(define fc function-call)
(define mfc member-function-call)
(define fcn-def function-define)
(define v-fcn-def void-function-define)
(define v-fcn-dcl void-function-declare)
(define r-fcn-def returning-function-define)
(define fcn-dcl function-declare)
(define gen-fcn-dcl general-function-declare)
(define s-fcn-dcl static-function-declare)
(define tpl-def template-define)
(define srt-dcl struct-declare)
(define (s-srt-dcl . chunks)
  (cc (apply srt-dcl chunks)))
(define srt-def struct-define)
(define (s-srt-def . chunks)
  (cc (apply srt-def chunks)))
(define tpl-srt-dcl template-struct-declare)
(define (s-tpl-srt-dcl . chunks)
  (cc (apply tpl-srt-dcl chunks)))
(define tpl-srt-def template-struct-define)
(define (s-tpl-srt-def . chunks)
  (cc (apply tpl-srt-def chunks)))
(define tpl-use template-use)
(define (tpl-pmtr pmtr)
  (bs 'typename pmtr))
(define (sub-tpl-use pmtr)
  (bs 'template pmtr))
(define (tpl-fcn-use . pmtrs)
  (sub-tpl-use (apply tpl-use pmtrs)))
(define pub-sec public-section)
(define priv-sec private-section)
(define cons-asgn constructor-assignment)
(define scope scope-resolution-operator)
(define (enum . enums)
  (sbs 'enum (body-list "," enums)))
(define (pp-cond-or name then else)
  (pp-conditional-ifdef name
                        (c then)
                        (if (not else)
                            #false
                            (c else))))
(define (threads-or then else)
  (pp-cond-or 'FIELD_EXPRESSION_THREADS then else))
(define (threads-only . chunks)
  (threads-or chunks #false))
(define (gpu-or then else)
  (pp-cond-or '__CUDACC__ then else))
(define (gpu-only . chunks)
  (gpu-or chunks #false))
(define (gpu-test-or then else)
  (pp-cond-or 'NEBO_GPU_TEST then else))
(define (gpu-test-only . chunks)
  (gpu-test-or chunks #false))
(define (report-backend-or then else)
  (pp-cond-or 'NEBO_REPORT_BACKEND then else))
(define (report-backend-only . chunks)
  (report-backend-or chunks #false))
(define (kernel-use name . args)
  (tpl-use name (tpl-use null (tpl-use null args))))
(define (device-use . chunks)
  (bs '__device__ chunks))
(define (host-device-use . chunks)
  (bs (gpu-only (bs '__host__ '__device__))
      chunks))
(define (gbl-fcn-dcl name . params)
  (bs '__global__ (general-function-declare name 'void params)))
(define (report-backend-cout type backend-name)
  (report-backend-only (bs (scope 'std 'cout)
                           '<<
                           (surround "\"" (bs type 'Nebo backend-name))
                           '<<
                           (scope 'std 'endl))))
(define (report-backend-start backend-name)
  (report-backend-cout 'Starting backend-name))
(define (report-backend-finish backend-name)
  (report-backend-cout 'Finished backend-name))
(define (full-gpu-test-or then else)
  (gpu-only (gpu-test-or then else)))
(define (full-gpu-test-only . chunks)
  (full-gpu-test-or chunks #false))
(define (debug-only . chunks)
  (pp-conditional-ifndef 'NDEBUG
                         (c chunks)
                         #false))
(define (par . chunks)
  (p (bs chunks)))
(define (ter-cond if then else)
  (par if '? then ': else))
(define (op-asgn op lhs . rhs)
  (bs lhs op rhs))
(define (n= lhs . rhs)
  (op-asgn '= lhs rhs))
(define (nt= type lhs . rhs)
  (n= (bs type lhs) rhs))
(define (nt=c type lhs . rhs)
  (nt= (bs 'const type) lhs rhs))
(define (n+= lhs . rhs)
  (op-asgn '+= lhs rhs))
(define (n== lhs . rhs)
  (op-asgn '== lhs rhs))
(define (n!= lhs . rhs)
  (op-asgn '!= lhs rhs))
(define (n< lhs . rhs)
  (op-asgn '< lhs rhs))
(define (n> lhs . rhs)
  (op-asgn '> lhs rhs))
(define (n<= lhs . rhs)
  (op-asgn '<= lhs rhs))
(define (n>= lhs . rhs)
  (op-asgn '>= lhs rhs))
(define (n+ lhs . rhs)
  (op-asgn '+ lhs rhs))
(define (n- lhs . rhs)
  (op-asgn '- lhs rhs))
(define (n* lhs . rhs)
  (op-asgn '* lhs rhs))
(define (n/ lhs . rhs)
  (op-asgn '/ lhs rhs))
(define (n% lhs . rhs)
  (op-asgn '% lhs rhs))
(define (n++ chunk)
  (l chunk '++))
(define (n-and lhs . rhs)
  (b (scs '&&) lhs rhs))
(define (n-or lhs . rhs)
  (b (scs "||") lhs rhs))
(define (n-not chunk)
  (c '! (par chunk)))
(define (tc . chunks)
  (bs chunks 'const))
(define (stc . chunks)
  (cc (tc chunks)))
(define (ref . chunks)
  (bs chunks '&))
(define (cref . chunks)
  (ref (tc chunks)))
(define (ptr . chunks)
  (bs chunks '*))
(define (cptr . chunks)
  (ptr (tc chunks)))
(define (ad type arg)
  (bs type arg))
(define (sad type arg)
  (cc (ad type arg)))
(define (adc type arg)
  (bs (tc type) arg))
(define (sadc type arg)
  (cc (adc type arg)))
(define (adr type arg)
  (bs (ref type) arg))
(define (sadr type arg)
  (cc (adr type arg)))
(define (adcr type arg)
  (bs (cref type) arg))
(define (sadcr type arg)
  (cc (adcr type arg)))
(define (adp type arg)
  (bs (ptr type) arg))
(define (sadp type arg)
  (cc (adp type arg)))
(define (adcp type arg)
  (bs (cptr type) arg))
(define (sadcp type arg)
  (cc (adcp type arg)))
(define (take-ptr . chunks)
  (c '& chunks))
(define (nif check . then)
  (bs (fc 'if check)
      (body then)))
(define (nelse else)
  (bs 'else (body else)))
(define (nifelse check then else)
  (b new-line
     (nif check then)
     (nelse else)))
(define (nelseif check . then)
  (bs 'else (nif check then)))
(define (nifelseif check1 then1 check2 then2)
  (b new-line
     (nif check1 then1)
     (nelseif check2 then2)))
(define (nwhile while . smts)
  (bs (fc 'while while)
      (body smts)))
(define (nfor init check next . smts)
  (bs (fc 'for (bs (cc init)
                   (cc check)
                   next))
      (body smts)))
