#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")
(require "NeboRhsCore.fmr")

(define (build-Nary-struct name
                           number
                           eval-return-type
                           internal-use)
  (define num-lst
    (if (>= 1 number)
        '("")
        (map number->string (sequence->list (in-range 1 (+ 1 number))))))
  (define IN-op-lst
    (map (lambda (str) (l 'op str)) num-lst))
  (define op-lst
    (map (lambda (str) (l 'operand str)) num-lst))
  (define Op-lst
    (map (lambda (str) (l 'Operand str)) num-lst))
  (define op_-lst
    (map (lambda (op) (l op '_)) op-lst))
  (define (mapper proc . lsts)
    (apply map proc lsts))
  (define (op_-mfc fcn . args)
    (map (lambda (op_) (mfc op_ fcn args))
         op_-lst))
  (define (IN-typedef type)
    (lambda (Op) (tpl-pmtr (scope Op type))))
  (define ghosts
    (letrec ([mins (lambda (calls)
                      (cond [(equal? 1 (length calls)) (first calls)]
                            [else (fc 'min
                                      (first calls)
                                      (mins (rest calls)))]))])
      (mins (mapper (lambda (op) (mfc op 'possible_ghosts))
                    op_-lst))))
  (define gen-data-mems
    (mapper (lambda (Op op_) (sadc Op op_))
            Op-lst
            op_-lst))
  (define (gen-typedef type)
    (lambda (Op) (tpl-pmtr (scope Op type))))
  (define gen-constructor
    (bm-constructor (mapper (lambda (Op op) (adcr Op op))
                            Op-lst
                            op-lst)
                    (mapper (lambda (op_ op) (cons-asgn op_ op))
                            op_-lst
                            op-lst)
                    null))
  (define next
    (b/a ";" s (op_-mfc 'next)))
  (define (exec-check n-logical fcn . args)
    (par (n-logical (op_-mfc fcn args))))
  (define (exec-or-check fcn)
    (exec-check n-or fcn))
  (define (exec-and-check fcn . args)
    (exec-check n-and fcn args))
  (define exec-data-mems
    (mapper (lambda (Op op_) (sad Op op_))
            Op-lst
            op_-lst))
  (build-struct name
                no-FT
                null
                Op-lst
                (bs-Initial-rhs null
                                null
                                gen-constructor
                                ghosts
                                (op_-mfc 'init)
                                (op_-mfc 'resize)
                                (exec-and-check 'cpu_ready)
                                (exec-and-check 'gpu_ready DI-chunk)
                                (op_-mfc 'gpu_init DI-chunk)
                                (b/a ";" s (op_-mfc 'gpu_prep DI-chunk))
                                (op_-mfc 'reduce_init)
                                null
                                gen-data-mems)
                (bs-Resize-rhs null
                               null
                               gen-constructor
                               (op_-mfc 'init)
                               null
                               gen-data-mems)
                (bs-SeqWalk-rhs (s-typedef (tpl-pmtr (scope (first Op-lst) vt-chunk))
                                           vt-chunk)
                                gen-constructor
                                eval-return-type
                                (internal-use index-arg)
                                null
                                exec-data-mems)
                (bs-gpu-rhs (s-typedef (tpl-pmtr (scope (first Op-lst) vt-chunk))
                                       vt-chunk)
                            gen-constructor
                            eval-return-type
                            (internal-use index-arg)
                            null
                            exec-data-mems)
                (bs-Reduction (s-typedef (tpl-pmtr (scope (first Op-lst) vt-chunk))
                                         vt-chunk)
                              gen-constructor
                              next
                              (exec-or-check 'at_end)
                              (exec-or-check 'has_length)
                              eval-return-type
                              (internal-use null)
                              null
                              exec-data-mems)))

(define (build-binary-function-struct name internal-name)
  (build-Nary-struct name
                     2
                     vt-chunk
                     (lambda (args)
                       (fc internal-name
                           (mfc 'operand1_ 'eval args)
                           (mfc 'operand2_ 'eval args)))))

(define (build-binary-operator-struct name internal-name)
  (build-Nary-struct name
                     2
                     vt-chunk
                     (lambda (args)
                       (par (mfc 'operand1_ 'eval args)
                            internal-name
                            (mfc 'operand2_ 'eval args)))))

(define (build-unary-function-struct name internal-name)
  (build-Nary-struct name
                     1
                     vt-chunk
                     (lambda (args)
                       (fc internal-name
                           (mfc 'operand_ 'eval args)))))

(define (build-comparison-struct name internal-name)
  (build-Nary-struct name
                     2
                     'bool
                     (lambda (args)
                       (par (mfc 'operand1_ 'eval args)
                            internal-name
                            (mfc 'operand2_ 'eval args)))))

(define (build-unary-logical-function-struct name internal-name)
  (build-Nary-struct name
                     1
                     'bool
                     (lambda (args)
                       (fc internal-name
                           (mfc 'operand_ 'eval args)))))

(define (build-logical-operator-struct name internal-name)
  (build-Nary-struct name
                     2
                     'bool
                     (lambda (args)
                       (par (mfc 'operand1_ 'eval args)
                            internal-name
                            (mfc 'operand2_ 'eval args)))))

(define (build-extremum-function-struct name comparison)
  (build-Nary-struct name
                     2
                     vt-chunk
                     (lambda (args)
                       (ter-cond (par (mfc 'operand1_ 'eval args)
                                      comparison
                                      (mfc 'operand2_ 'eval args))
                                 (mfc 'operand1_ 'eval args)
                                 (mfc 'operand2_ 'eval args)))))

(define (add-spacing-check arg)
  (cs arg))

(define (ignore-spacing-check arg)
  arg)

(define if-arg-Scalar
  (list 'none
        (lambda (num value-type checked-value-type)
          (let ([type (tpl-use NS-chunk 'Initial value-type)]
                [arg (l 'arg num)])
            (list 'Scalar
                  #false
                  #false
                  null
                  add-spacing-check
                  type
                  type
                  (adcr checked-value-type arg)
                  (fc type arg))))))

(define if-arg-Field
  (list 'field
        (lambda (num value-type checked-value-type)
          (let ([type (tpl-use NCF-chunk 'Initial FT-chunk)]
                [arg (l 'arg num)])
            (list 'Field
                  #true
                  #false
                  null
                  add-spacing-check
                  (tpl-use NCF-chunk 'Initial (tpl-pmtr (scope (tpl-use 'NeboFieldCheck
                                                                        (tpl-pmtr (scope FT-chunk ft-chunk))
                                                                        FT-chunk)
                                                               'Result)))
                  type
                  (adcr FT-chunk arg)
                  (fc type arg))))))

(define if-arg-SubExpr
  (list 'field
        (lambda (num value-type checked-value-type)
          (let* ([type (l 'SubExpr num)]
                 [arg (l 'arg num)])
            (list 'SubExpr
                  #true
                  #false
                  type
                  ignore-spacing-check
                  type
                  type
                  (adcr (tpl-use NE-chunk type FT-chunk)
                        arg)
                  (mfc arg 'expr))))))

(define if-arg-Boolean
  (list 'boolean-only
        (lambda (num value-type checked-value-type)
          (let ([type (tpl-use NS-chunk 'Initial 'bool)]
                [arg (l 'arg num)])
            (list 'Boolean
                  #false
                  #false
                  null
                  add-spacing-check
                  type
                  type
                  (adcr 'bool arg)
                  (fc type arg))))))

(define if-arg-SubBoolExpr
  (list 'field
        (lambda (num value-type checked-value-type)
          (let* ([type (l 'SubBoolExpr num)]
                 [arg (l 'arg num)])
            (list 'SubBoolExpr
                  #true
                  #false
                  type
                  ignore-spacing-check
                  type
                  type
                  (adcr (tpl-use NBE-chunk type FT-chunk)
                        arg)
                  (mfc arg 'expr))))))

(define if-arg-Mask
  (list 'field
        (lambda (num value-type checked-value-type)
          (let* ([type (tpl-use 'NeboMask 'Initial FT-chunk)]
                 [arg (l 'arg num)])
            (list 'Mask
                  #true
                  #false
                  null
                  add-spacing-check
                  (tpl-use 'NeboMask 'Initial (tpl-pmtr (scope (tpl-use 'NeboFieldCheck
                                                                        (tpl-pmtr (scope FT-chunk ft-chunk))
                                                                        FT-chunk)
                                                               'Result)))
                  type
                  (adcr (tpl-use (scope 'structured 'SpatialMask)
                                 FT-chunk)
                        arg)
                  (fc type arg))))))

(define if-arg-SingleValue
  (list 'atomic-only
        (lambda (num value-type checked-value-type)
          (let* ([type (tpl-use NCSVF-chunk 'Initial value-type)]
                 [arg (l 'arg num)])
            (list 'SingleValue
                  #false
                  #true
                  null
                  add-spacing-check
                  (tpl-use NCSVF-chunk 'Initial value-type)
                  type
                  (adcr (SVFT-def-with-T value-type) arg)
                  (fc type arg))))))

(define if-arg-SubSingleValueExpr
  (list 'atomic-only
        (lambda (num value-type checked-value-type)
          (let ([type (l 'SubExpr num)]
                [arg (l 'arg num)])
            (list 'SingleValueExpr
                  #false
                  #true
                  type
                  ignore-spacing-check
                  type
                  type
                  (adcr (tpl-use NSVE-chunk type value-type)
                        arg)
                  (mfc arg 'expr))))))

(define if-arg-SubBoolSingleValueExpr
  (list 'atomic-only
        (lambda (num value-type checked-value-type)
          (let ([type (l 'SubBoolExpr num)]
                [arg (l 'arg num)])
            (list 'SubBoolSingleValueExpr
                  #false
                  #true
                  null
                  ignore-spacing-check
                  type
                  type
                  (adcr (tpl-use NBSVE-chunk type value-type)
                        arg)
                  (mfc arg 'expr))))))

(define (build-interface-case name
                              external-name
                              return-style
                              input-arg-info-lst)
  (let* ([prep-tpl-args (lambda (checks args)
                         (flatten* (take args (- (length args)
                                                1))
                                   ((last checks)
                                    (last args))))]
         [num-lst (let ([number (length input-arg-info-lst)])
                    (cond [(= 0 number) (error "Empty list of arguments to build-interface-case")]
                          [(= 1 number) (list "")]
                          [else (map number->string (sequence->list (in-range 1 (+ 1 number))))]))]
         [style (foldl (lambda (cur prev)
                         (cond [(or (equal? 'field cur)
                                    (equal? 'field prev))
                                'field]
                               [(or (equal? 'atomic-only cur)
                                    (equal? 'atomic-only prev))
                                'atomic-only]
                               [(or (equal? 'boolean-only cur)
                                    (equal? 'boolean-only prev))
                                'boolean-only]
                               [(or (equal? 'none cur)
                                    (equal? 'none prev))
                                'none]
                               [else
                                (error "Trying to build an operator with unknown styles: " cur prev)]))
                       'default
                       (map first input-arg-info-lst))]
         [value-type (cond [(equal? 'none style)
                            'error!] ; if style is none, this should be a boolean operation, and value-type should not be used
                           [(equal? 'atomic-only style)
                            'T]
                           [else
                            (tpl-pmtr (scope FT-chunk vt-chunk))])]
         [checked-value-type (if (equal? 'T value-type)
                                 (tpl-pmtr (scope SVFT-def-chunk vt-chunk))
                                 value-type)]
         [arg-info-lst (map (lambda (arg num) ((second arg)
                                               num
                                               value-type
                                               checked-value-type))
                            input-arg-info-lst
                            num-lst)]
         [description-lst (map first arg-info-lst)]
         [include-tpl (cond [(ormap second arg-info-lst)
                             FT-chunk]
                            [(ormap third arg-info-lst)
                             'T]
                            [else
                             null])]
         [tpl-arg-lst (map fourth arg-info-lst)]
         [last-spacing (map fifth arg-info-lst)]
         [return-type (lambda (arg)
                        (cond [(and (equal? 'field style)
                                    (equal? 'scalar return-style))
                               (tpl-use NE-chunk arg FT-chunk)]
                              [(and (equal? 'field style)
                                    (equal? 'boolean return-style))
                               (tpl-use NBE-chunk arg FT-chunk)]
                              [(and (equal? 'atomic-only style)
                                    (equal? 'scalar return-style))
                               (tpl-use NSVE-chunk arg 'T)]
                              [(and (equal? 'atomic-only style)
                                    (equal? 'boolean return-style))
                               (tpl-use NBSVE-chunk arg 'T)]
                              [else
                               (error "Trying to build an operator that has an unclear return structure: " style return-style)]))]
         [construct-return-type (lambda (args)
                                 (tpl-use name 'Initial (prep-tpl-args last-spacing args)))]
         [result-type-type (construct-return-type (map sixth arg-info-lst))]
         [return-tpl-type (construct-return-type (map seventh arg-info-lst))]
         [parameter-lst (map eighth arg-info-lst)]
         [arg-use-lst (map ninth arg-info-lst)])
    (d (c (add-between description-lst (scs 'X)))
       (tpl-def (map tpl-pmtr (flatten* tpl-arg-lst include-tpl))
                (r-fcn-def (fcn-dcl external-name
                                    (return-type result-type-type)
                                    parameter-lst)
                           (list (typedef return-tpl-type 'ReturnType)
                                 (typedef (return-type 'ReturnType)
                                          'ReturnTerm))
                           (fc 'ReturnTerm (fc 'ReturnType arg-use-lst)))))))

(define (build-binary-interface name
                                external-name
                                op-return-style
                                if-args)
  (let* ([raw-cross-products (foldl (lambda (arg1 previous)
                                      (append (foldl (lambda (arg2 previous)
                                                       (cons (list arg1 arg2)
                                                             previous))
                                                     null
                                                     if-args)
                                              previous))
                                    null
                                    if-args)]
                                        ;This removes Scalar X Scalar or Boolean X Boolean
         [cross-products (rest (reverse raw-cross-products))])
    (bb (map (lambda (args) (build-interface-case name
                                                  external-name
                                                  op-return-style
                                                  args))
             cross-products))))

(define (build-unary-interface name
                               external-name
                               expression-term
                               if-args)
  (bb (map (lambda (arg) (build-interface-case name
                                               external-name
                                               expression-term
                                               (list arg)))
           if-args)))

(define binary-expr-arg-lst (list if-arg-Scalar if-arg-Field if-arg-SubExpr if-arg-SingleValue if-arg-SubSingleValueExpr))
(define unary-expr-arg-lst (list if-arg-Field if-arg-SubExpr if-arg-SingleValue if-arg-SubSingleValueExpr))
(define binary-logical-expr-arg-lst (list if-arg-Boolean if-arg-SubBoolExpr if-arg-Mask))
(define unary-logical-expr-arg-lst (list if-arg-SubBoolExpr if-arg-Mask))
(define (build-binary-function name internal-name external-name)
  (bl-smts (build-binary-function-struct name internal-name)
           (build-binary-interface name external-name 'scalar binary-expr-arg-lst)))
(define (build-binary-operator name internal-name external-name)
  (bl-smts (build-binary-operator-struct name internal-name)
           (build-binary-interface name external-name 'scalar binary-expr-arg-lst)))
(define (build-unary-function name internal-name external-name)
  (bl-smts (build-unary-function-struct name internal-name)
           (build-unary-interface name external-name 'scalar unary-expr-arg-lst)))
(define (build-comparison-operator name internal-name external-name)
  (bl-smts (build-comparison-struct name internal-name)
           (build-binary-interface name external-name 'boolean binary-expr-arg-lst)))
(define (build-binary-logical-operator name internal-name external-name)
  (bl-smts (build-logical-operator-struct name internal-name)
           (build-binary-interface name external-name 'boolean binary-logical-expr-arg-lst)))
(define (build-unary-logical-function name internal-name external-name)
  (bl-smts (build-unary-logical-function-struct name internal-name)
           (build-unary-interface name external-name 'boolean unary-logical-expr-arg-lst)))
(define (build-unary-to-logical-function name internal-name external-name)
  (bl-smts (build-unary-logical-function-struct name internal-name)
           (build-unary-interface name external-name 'boolean unary-expr-arg-lst)))
(define (build-extremum-function name comparison external-name)
  (bl-smts (build-extremum-function-struct name comparison)
           (build-binary-interface name external-name 'scalar binary-expr-arg-lst)))

                                        ; beginnning of file
(pp-header-file
 'NEBO_OPERATORS_H
 (n 'SpatialOps
    (build-binary-operator 'SumOp '+ (bs 'operator '+))
    (build-binary-operator 'DiffOp '- (bs 'operator '-))
    (build-binary-operator 'ProdOp '* (bs 'operator '*))
    (build-binary-operator 'DivOp '/ (bs 'operator '/))
    (build-unary-function 'SinFcn
                          (scope 'std 'sin)
                          'sin)
    (build-unary-function 'CosFcn
                          (scope 'std 'cos)
                          'cos)
    (build-unary-function 'TanFcn
                          (scope 'std 'tan)
                          'tan)
    (build-unary-function 'ExpFcn
                          (scope 'std 'exp)
                          'exp)
    (build-unary-function 'TanhFcn
                          (scope 'std 'tanh)
                          'tanh)
    (build-unary-function 'AbsFcn
                          (scope 'std 'abs)
                          'abs)
    (build-unary-function 'NegFcn '- (bs 'operator '-))
    (build-binary-function 'PowFcn
                           (scope 'std 'pow)
                           'pow)
    (build-unary-function 'SqrtFcn
                          (scope 'std 'sqrt)
                          'sqrt)
    (build-unary-function 'LogFcn
                          (scope 'std 'log)
                          'log)
    (build-unary-function 'Log10Fcn
                          (scope 'std 'log10)
                          'log10)
    (build-unary-function 'ErfFcn
                          'erf;(scope 'std 'erf)
                          'erf)
    (build-unary-function 'ErfcFcn
                          'erfc;(scope 'std 'erfc)
                          'erfc)
    (build-comparison-operator 'EqualCmp '== (bs 'operator '==))
    (build-comparison-operator 'InequalCmp '!= (bs 'operator '!=))
    (build-comparison-operator 'LessThanCmp '< (bs 'operator '<))
    (build-comparison-operator 'LessThanEqualCmp '<= (bs 'operator '<=))
    (build-comparison-operator 'GreaterThanCmp '> (bs 'operator '>))
    (build-comparison-operator 'GreaterThanEqualCmp '>= (bs 'operator '>=))
    (build-binary-logical-operator 'AndOp '&& (bs 'operator '&&))
    (build-binary-logical-operator 'OrOp "||" (bs 'operator "||"))
    (build-unary-logical-function 'NotOp '! (bs 'operator '!))
    (build-extremum-function 'MaxFcn '> 'max)
    (build-extremum-function 'MinFcn '< 'min)
                                        ; commented out isnan because nvcc has some weird problem with it
                                        ;   (build-unary-to-logical-function 'IsNanFcn
                                        ;                                    (scope 'std 'isnan)
                                        ;                                    'isnan)
    )
 )
