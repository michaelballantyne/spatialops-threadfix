#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")
(require "NeboRhsCore.fmr")

(define (build-Nary-struct name
                           number
                           eval-return-type
                           CPU-internal-use
                           GPU-internal-use)
  (define num-lst
    (if (>= 1 number)
        '("")
        (map number->string (sequence->list (in-range 1 (+ 1 number))))))
  (define IN-op-lst
    (map (lambda (str) (literal 'op str)) num-lst))
  (define op-lst
    (map (lambda (str) (literal 'operand str)) num-lst))
  (define Op-lst
    (map (lambda (str) (literal 'Operand str)) num-lst))
  (define op_-lst
    (map (lambda (op) (literal op '_)) op-lst))
  (define (mapper proc . lsts)
    (apply map proc lsts))
  (define (op_-mfc fcn . args)
    (map (lambda (op_) (val-member-call op_ fcn args))
         op_-lst))
  (define (IN-typedef type)
    (lambda (Op) (typename (scope Op type))))
  (define (ghosts call)
    (letrec ([mins (lambda (calls)
                     (cond [(equal? 1 (length calls)) (first calls)]
                           [else (val-call 'min
                                           (first calls)
                                           (mins (rest calls)))]))])
      (mins (mapper (lambda (op) (val-member-call op call))
                    op_-lst))))
  (define gen-data-mems
    (mapper (lambda (Op op_) (stmt-dcl-variable (const Op) op_))
            Op-lst
            op_-lst))
  (define (gen-typedef type)
    (lambda (Op) (typename (scope Op type))))
  (define gen-constructor
    (bm-constructor (mapper (lambda (Op op) (function-pmtr (ref (const Op)) op))
                            Op-lst
                            op-lst)
                    (mapper (lambda (op_ op) (val-construct op_ op))
                            op_-lst
                            op-lst)
                    null))
  (define next
    (between/attach ";" space (op_-mfc 'next)))
  (define (exec-check n-logical fcn . args)
    (paren (n-logical (op_-mfc fcn args))))
  (define (exec-or-check fcn)
    (exec-check val-or fcn))
  (define (exec-and-check fcn . args)
    (exec-check val-and fcn args))
  (define exec-data-mems
    (mapper (lambda (Op op_) (stmt-dcl-variable Op op_))
            Op-lst
            op_-lst))
  (define (assign-extent remaining)
    (define assignment (val-assign 'extent (val-member-call (car remaining) 'extent 'dir)))
    (if (= 1 (length remaining))
        assignment
        (stmt-if-else (val-member-call (car remaining) 'has_extent)
                      assignment
                      (assign-extent (cdr remaining)))))
  (define (check-extent remaining)
    (define assert (stmt-if (val-member-call (car remaining) 'has_extent)
                            (val-call 'assert (val-equal 'extent (val-member-call (car remaining) 'extent 'dir)))))
    (if (= 1 (length remaining))
        assert
        (list assert
              (check-extent (cdr remaining)))))
  (define (return-extent remaining)
    (define returned (val-member-call (car remaining) 'extent 'dir))
    (if (= 1 (length remaining))
        returned
        (ter-cond (val-member-call (car remaining) 'has_extent)
                  returned
                  (paren (return-extent (cdr remaining))))))
  (build-struct name
                no-FT
                null
                Op-lst
                (bs-Initial-rhs null
                                null
                                gen-constructor
                                (ghosts 'possible_ghosts)
                                (ghosts 'minimum_ghosts)
                                (exec-or-check 'has_extent)
                                (if (= 1 number)
                                    null
                                    (stmt-if (exec-or-check 'has_extent)
                                             (function-pmtr 'int 'extent)
                                             (assign-extent op_-lst)
                                             (check-extent op_-lst)))
                                (return-extent op_-lst)
                                (op_-mfc 'init)
                                (op_-mfc 'resize)
                                (exec-and-check 'cpu_ready)
                                (exec-and-check 'gpu_ready DI-chunk)
                                (op_-mfc 'gpu_init DI-chunk)
                                (between/attach ";" space (op_-mfc 'gpu_prep DI-chunk))
                                null
                                gen-data-mems)
                (bs-Resize-rhs null
                               null
                               gen-constructor
                               (op_-mfc 'init)
                               null
                               gen-data-mems)
                (bs-SeqWalk-rhs (stmt-typedef (typename (scope (first Op-lst) vt-chunk))
                                              vt-chunk)
                                gen-constructor
                                eval-return-type
                                (CPU-internal-use index-arg)
                                null
                                exec-data-mems)
                (bs-gpu-rhs (stmt-typedef (typename (scope (first Op-lst) vt-chunk))
                                          vt-chunk)
                            gen-constructor
                            eval-return-type
                            (GPU-internal-use index-arg)
                            null
                            exec-data-mems)))

(define (build-binary-function-struct name internal-name)
  (let ([internal-use (lambda (args)
                        (val-call internal-name
                                  (val-member-call 'operand1_ 'eval args)
                                  (val-member-call 'operand2_ 'eval args)))])
    (build-Nary-struct name
                       2
                       vt-chunk
                       internal-use
                       internal-use)))

(define (build-binary-operator-struct name internal-name)
  (let ([internal-use (lambda (args)
                        (paren (val-member-call 'operand1_ 'eval args)
                               internal-name
                               (val-member-call 'operand2_ 'eval args)))])
    (build-Nary-struct name
                       2
                       vt-chunk
                       internal-use
                       internal-use)))

(define (build-unary-function-struct name CPU-internal-name GPU-internal-name)
  (define (internal-use internal-name) (lambda (args)
                                         (val-call internal-name
                                                   (val-member-call 'operand_ 'eval args))))
  (build-Nary-struct name
                     1
                     vt-chunk
                     (internal-use CPU-internal-name)
                     (internal-use GPU-internal-name)))

(define (build-comparison-struct name internal-name)
  (let ([internal-use (lambda (args)
                        (paren (val-member-call 'operand1_ 'eval args)
                               internal-name
                               (val-member-call 'operand2_ 'eval args)))])
    (build-Nary-struct name
                       2
                       'bool
                       internal-use
                       internal-use)))

(define (build-unary-logical-function-struct name internal-name)
  (let ([internal-use (lambda (args)
                        (val-call internal-name
                                  (val-member-call 'operand_ 'eval args)))])
    (build-Nary-struct name
                       1
                       'bool
                       internal-use
                       internal-use)))

(define (build-logical-operator-struct name internal-name)
  (let ([internal-use (lambda (args)
                        (paren (val-member-call 'operand1_ 'eval args)
                               internal-name
                               (val-member-call 'operand2_ 'eval args)))])
    (build-Nary-struct name
                       2
                       'bool
                       internal-use
                       internal-use)))

(define (build-extremum-function-struct name comparison)
  (let ([internal-use (lambda (args)
                        (ter-cond (paren (val-member-call 'operand1_ 'eval args)
                                         comparison
                                         (val-member-call 'operand2_ 'eval args))
                                  (val-member-call 'operand1_ 'eval args)
                                  (val-member-call 'operand2_ 'eval args)))])
    (build-Nary-struct name
                       2
                       vt-chunk
                       internal-use
                       internal-use)))

(define (add-spacing-check arg)
  (space-after arg))

(define (ignore-spacing-check arg)
  arg)

(define if-arg-Scalar
  (list 'none
        (lambda (num value-type checked-value-type)
          (let ([type (type-template NS-chunk 'Initial value-type)]
                [arg (literal 'arg num)])
            (list 'Scalar
                  #false
                  #false
                  null
                  add-spacing-check
                  type
                  type
                  (function-pmtr (ref (const checked-value-type)) arg)
                  (val-call type arg))))))

(define if-arg-Field
  (list 'field
        (lambda (num value-type checked-value-type)
          (let ([type (type-template NCF-chunk 'Initial FT-chunk)]
                [arg (literal 'arg num)])
            (list 'Field
                  #true
                  #false
                  null
                  add-spacing-check
                  (type-template NCF-chunk 'Initial (typename (scope (type-template 'NeboFieldCheck
                                                                                    (typename (scope FT-chunk ft-chunk))
                                                                                    FT-chunk)
                                                                     'Result)))
                  type
                  (function-pmtr (ref (const FT-chunk)) arg)
                  (val-call type arg))))))

(define if-arg-SubExpr
  (list 'field
        (lambda (num value-type checked-value-type)
          (let* ([type (literal 'SubExpr num)]
                 [arg (literal 'arg num)])
            (list 'SubExpr
                  #true
                  #false
                  type
                  ignore-spacing-check
                  type
                  type
                  (function-pmtr (ref (const (type-template NE-chunk type FT-chunk)))
                                 arg)
                  (val-member-call arg 'expr))))))

(define if-arg-Boolean
  (list 'boolean-only
        (lambda (num value-type checked-value-type)
          (let ([type (type-template NS-chunk 'Initial 'bool)]
                [arg (literal 'arg num)])
            (list 'Boolean
                  #false
                  #false
                  null
                  add-spacing-check
                  type
                  type
                  (function-pmtr (ref (const 'bool)) arg)
                  (val-call type arg))))))

(define if-arg-SubBoolExpr
  (list 'field
        (lambda (num value-type checked-value-type)
          (let* ([type (literal 'SubBoolExpr num)]
                 [arg (literal 'arg num)])
            (list 'SubBoolExpr
                  #true
                  #false
                  type
                  ignore-spacing-check
                  type
                  type
                  (function-pmtr (ref (const (type-template NBE-chunk type FT-chunk)))
                                 arg)
                  (val-member-call arg 'expr))))))

(define if-arg-Mask
  (list 'field
        (lambda (num value-type checked-value-type)
          (let* ([type (type-template 'NeboMask 'Initial FT-chunk)]
                 [arg (literal 'arg num)])
            (list 'Mask
                  #true
                  #false
                  null
                  add-spacing-check
                  (type-template 'NeboMask 'Initial (typename (scope (type-template 'NeboFieldCheck
                                                                                    (typename (scope FT-chunk ft-chunk))
                                                                                    FT-chunk)
                                                                     'Result)))
                  type
                  (function-pmtr (ref (const (type-template (scope 'structured 'SpatialMask)
                                                            FT-chunk)))
                                 arg)
                  (val-call type arg))))))

(define if-arg-SingleValue
  (list 'atomic-only
        (lambda (num value-type checked-value-type)
          (let* ([type (type-template NCSVF-chunk 'Initial value-type)]
                 [arg (literal 'arg num)])
            (list 'SingleValue
                  #false
                  #true
                  null
                  add-spacing-check
                  (type-template NCSVF-chunk 'Initial value-type)
                  type
                  (function-pmtr (ref (const (SVFT-def-with-T value-type))) arg)
                  (val-call type arg))))))

(define if-arg-SubSingleValueExpr
  (list 'atomic-only
        (lambda (num value-type checked-value-type)
          (let ([type (literal 'SubExpr num)]
                [arg (literal 'arg num)])
            (list 'SingleValueExpr
                  #false
                  #true
                  type
                  ignore-spacing-check
                  type
                  type
                  (function-pmtr (ref (const (type-template NSVE-chunk type value-type)))
                                 arg)
                  (val-member-call arg 'expr))))))

(define if-arg-SubBoolSingleValueExpr
  (list 'atomic-only
        (lambda (num value-type checked-value-type)
          (let ([type (literal 'SubBoolExpr num)]
                [arg (literal 'arg num)])
            (list 'SubBoolSingleValueExpr
                  #false
                  #true
                  null
                  ignore-spacing-check
                  type
                  type
                  (function-pmtr (ref (const (type-template NBSVE-chunk type value-type)))
                                 arg)
                  (val-member-call arg 'expr))))))

(define (build-interface-case name
                              external-name
                              return-style
                              input-arg-info-lst)
  (let* ([prep-tpl-args (lambda (checks args)
                          (flatten* (take args (- (length args)
                                                  1))
                                    ((last checks)
                                     (last args))))]
         [num-lst (let ([number (length input-arg-info-lst)])
                    (cond [(= 0 number) (error "Empty list of arguments to build-interface-case")]
                          [(= 1 number) (list "")]
                          [else (map number->string (sequence->list (in-range 1 (+ 1 number))))]))]
         [style (foldl (lambda (cur prev)
                         (cond [(or (equal? 'field cur)
                                    (equal? 'field prev))
                                'field]
                               [(or (equal? 'atomic-only cur)
                                    (equal? 'atomic-only prev))
                                'atomic-only]
                               [(or (equal? 'boolean-only cur)
                                    (equal? 'boolean-only prev))
                                'boolean-only]
                               [(or (equal? 'none cur)
                                    (equal? 'none prev))
                                'none]
                               [else
                                (error "Trying to build an operator with unknown styles: " cur prev)]))
                       'default
                       (map first input-arg-info-lst))]
         [value-type (cond [(equal? 'none style)
                            'error!] ; if style is none, this should be a boolean operation, and value-type should not be used
                           [(equal? 'atomic-only style)
                            'T]
                           [else
                            (typename (scope FT-chunk vt-chunk))])]
         [checked-value-type (if (equal? 'T value-type)
                                 (typename (scope SVFT-def-chunk vt-chunk))
                                 value-type)]
         [arg-info-lst (map (lambda (arg num) ((second arg)
                                               num
                                               value-type
                                               checked-value-type))
                            input-arg-info-lst
                            num-lst)]
         [description-lst (map first arg-info-lst)]
         [include-tpl (cond [(ormap second arg-info-lst)
                             FT-chunk]
                            [(ormap third arg-info-lst)
                             'T]
                            [else
                             null])]
         [tpl-arg-lst (map fourth arg-info-lst)]
         [last-spacing (map fifth arg-info-lst)]
         [return-type (lambda (arg)
                        (cond [(and (equal? 'field style)
                                    (equal? 'scalar return-style))
                               (type-template NE-chunk arg FT-chunk)]
                              [(and (equal? 'field style)
                                    (equal? 'boolean return-style))
                               (type-template NBE-chunk arg FT-chunk)]
                              [(and (equal? 'atomic-only style)
                                    (equal? 'scalar return-style))
                               (type-template NSVE-chunk arg 'T)]
                              [(and (equal? 'atomic-only style)
                                    (equal? 'boolean return-style))
                               (type-template NBSVE-chunk arg 'T)]
                              [else
                               (error "Trying to build an operator that has an unclear return structure: " style return-style)]))]
         [construct-return-type (lambda (args)
                                  (type-template name 'Initial (prep-tpl-args last-spacing args)))]
         [result-type-type (construct-return-type (map sixth arg-info-lst))]
         [return-tpl-type (construct-return-type (map seventh arg-info-lst))]
         [parameter-lst (map eighth arg-info-lst)]
         [arg-use-lst (map ninth arg-info-lst)])
    (described-smts (concat (add-between description-lst (spaces-around 'X)))
                    (def-template (map typename (flatten* tpl-arg-lst include-tpl))
                      (def-returning-function (dcl-function external-name
                                                            (return-type result-type-type)
                                                            parameter-lst)
                        (list (typedef return-tpl-type 'ReturnType)
                              (typedef (return-type 'ReturnType)
                                       'ReturnTerm))
                        (val-call 'ReturnTerm (val-call 'ReturnType arg-use-lst)))))))

(define (build-binary-interface name
                                external-name
                                op-return-style
                                if-args)
  (let* ([raw-cross-products (foldl (lambda (arg1 previous)
                                      (append (foldl (lambda (arg2 previous)
                                                       (cons (list arg1 arg2)
                                                             previous))
                                                     null
                                                     if-args)
                                              previous))
                                    null
                                    if-args)]
                                        ;This removes Scalar X Scalar or Boolean X Boolean
         [cross-products (rest (reverse raw-cross-products))])
    (add-blank-lines (map (lambda (args) (build-interface-case name
                                                               external-name
                                                               op-return-style
                                                               args))
                          cross-products))))

(define (build-unary-interface name
                               external-name
                               expression-term
                               if-args)
  (add-blank-lines (map (lambda (arg) (build-interface-case name
                                                            external-name
                                                            expression-term
                                                            (list arg)))
                        if-args)))

(define binary-expr-arg-lst (list if-arg-Scalar if-arg-Field if-arg-SubExpr if-arg-SingleValue if-arg-SubSingleValueExpr))
(define unary-expr-arg-lst (list if-arg-Field if-arg-SubExpr if-arg-SingleValue if-arg-SubSingleValueExpr))
(define binary-logical-expr-arg-lst (list if-arg-Boolean if-arg-SubBoolExpr if-arg-Mask))
(define unary-logical-expr-arg-lst (list if-arg-SubBoolExpr if-arg-Mask))
(define (build-binary-function name internal-name external-name)
  (internal-smt-list blank-line
                     (build-binary-function-struct name internal-name)
                     (build-binary-interface name external-name 'scalar binary-expr-arg-lst)))
(define (build-binary-operator name internal-name external-name)
  (internal-smt-list blank-line
                     (build-binary-operator-struct name internal-name)
                     (build-binary-interface name external-name 'scalar binary-expr-arg-lst)))
(define (build-unary-function name CPU-internal-name GPU-internal-name external-name)
  (internal-smt-list blank-line
                     (build-unary-function-struct name CPU-internal-name GPU-internal-name)
                     (build-unary-interface name external-name 'scalar unary-expr-arg-lst)))
(define (build-comparison-operator name internal-name external-name)
  (internal-smt-list blank-line
                     (build-comparison-struct name internal-name)
                     (build-binary-interface name external-name 'boolean binary-expr-arg-lst)))
(define (build-binary-logical-operator name internal-name external-name)
  (internal-smt-list blank-line
                     (build-logical-operator-struct name internal-name)
                     (build-binary-interface name external-name 'boolean binary-logical-expr-arg-lst)))
(define (build-unary-logical-function name internal-name external-name)
  (internal-smt-list blank-line
                     (build-unary-logical-function-struct name internal-name)
                     (build-unary-interface name external-name 'boolean unary-logical-expr-arg-lst)))
(define (build-unary-to-logical-function name internal-name external-name)
  (internal-smt-list blank-line
                     (build-unary-logical-function-struct name internal-name)
                     (build-unary-interface name external-name 'boolean unary-expr-arg-lst)))
(define (build-extremum-function name comparison external-name)
  (internal-smt-list blank-line
                     (build-extremum-function-struct name comparison)
                     (build-binary-interface name external-name 'scalar binary-expr-arg-lst)))

                                        ; beginnning of file
(pp-header-file
 'NEBO_OPERATORS_H
 (SpatialOps-namespace
  (build-binary-operator 'SumOp '+ (add-spaces 'operator '+))
  (build-binary-operator 'DiffOp '- (add-spaces 'operator '-))
  (build-binary-operator 'ProdOp '* (add-spaces 'operator '*))
  (build-binary-operator 'DivOp '/ (add-spaces 'operator '/))
  (build-unary-function 'SinFcn
                        (scope 'std 'sin)
                        (scope 'std 'sin)
                        'sin)
  (build-unary-function 'CosFcn
                        (scope 'std 'cos)
                        (scope 'std 'cos)
                        'cos)
  (build-unary-function 'TanFcn
                        (scope 'std 'tan)
                        (scope 'std 'tan)
                        'tan)
  (build-unary-function 'ExpFcn
                        (scope 'std 'exp)
                        (scope 'std 'exp)
                        'exp)
  (build-unary-function 'TanhFcn
                        (scope 'std 'tanh)
                        (scope 'std 'tanh)
                        'tanh)
  (build-unary-function 'AbsFcn
                        (scope 'std 'abs)
                        (scope 'std 'abs)
                        'abs)
  (build-unary-function 'NegFcn
                        '-
                        '-
                        (add-spaces 'operator '-))
  (build-binary-function 'PowFcn
                         (scope 'std 'pow)
                         'pow)
  (build-unary-function 'SqrtFcn
                        (scope 'std 'sqrt)
                        (scope 'std 'sqrt)
                        'sqrt)
  (build-unary-function 'LogFcn
                        (scope 'std 'log)
                        (scope 'std 'log)
                        'log)
  (build-unary-function 'Log10Fcn
                        (scope 'std 'log10)
                        (scope 'std 'log10)
                        'log10)
  (build-unary-function 'ErfFcn
                        (scope 'boost (scope 'math 'erf))
                        'erf
                        'erf)
  (build-unary-function 'ErfcFcn
                        (scope 'boost (scope 'math 'erfc))
                        'erfc
                        'erfc)
  (build-unary-function 'InvErfFcn
                        (scope 'boost (scope 'math 'erf_inv))
                        'erfinv
                        'inv_erf)
  (build-unary-function 'InvErfcFcn
                        (scope 'boost (scope 'math 'erfc_inv))
                        'erfcinv
                        'inv_erfc)
  (build-comparison-operator 'EqualCmp '== (add-spaces 'operator '==))
  (build-comparison-operator 'InequalCmp '!= (add-spaces 'operator '!=))
  (build-comparison-operator 'LessThanCmp '< (add-spaces 'operator '<))
  (build-comparison-operator 'LessThanEqualCmp '<= (add-spaces 'operator '<=))
  (build-comparison-operator 'GreaterThanCmp '> (add-spaces 'operator '>))
  (build-comparison-operator 'GreaterThanEqualCmp '>= (add-spaces 'operator '>=))
  (build-binary-logical-operator 'AndOp '&& (add-spaces 'operator '&&))
  (build-binary-logical-operator 'OrOp "||" (add-spaces 'operator "||"))
  (build-unary-logical-function 'NotOp '! (add-spaces 'operator '!))
  (build-extremum-function 'MaxFcn '> 'max)
  (build-extremum-function 'MinFcn '< 'min)
                                        ; commented out isnan because nvcc has some weird problem with it
                                        ;   (build-unary-to-logical-function 'IsNanFcn
                                        ;                                    (scope 'std 'isnan)
                                        ;                                    'isnan)
  ))
