#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")
(require "NeboRhsCore.fmr")

(define (build-CondBuilder-private extra-tpl-pmtrs
                                   remaining-type
                                   new-result-type
                                   private)
  (section-private (stmt-dcl-template-struct 'ReverseClausesRecursive
                                             (list (typename 'Remaining)
                                                   (typename 'PreceedingResult)))
                   (stmt-def-template-struct 'ReverseClausesRecursive
                                             (typename 'PreceedingResult)
                                             (list Nil-chunk 'PreceedingResult)
                                             (stmt-typedef 'PreceedingResult
                                                           'Result)
                                             (def-returning-function (dcl-static-function 'reverse
                                                                                          'Result
                                                                                          (function-pmtr (ref (const Nil-chunk)) 'nil)
                                                                                          (function-pmtr (ref (const 'PreceedingResult)) 'r))
                                               null
                                               'r))
                   (stmt-def-template-struct 'ReverseClausesRecursive
                                             (list extra-tpl-pmtrs
                                                   (typename 'Following)
                                                   (typename 'PreceedingResult))
                                             (list remaining-type
                                                   'PreceedingResult)
                                             (stmt-typedef remaining-type 'Remaining)
                                             (stmt-typedef new-result-type 'NewResult)
                                             (stmt-typedef (type-template 'ReverseClausesRecursive 'Following 'NewResult)
                                                           'InternalCall)
                                             (stmt-typedef (typename (scope 'InternalCall 'Result))
                                                           'Result)
                                             (def-returning-function (dcl-static-function 'reverse
                                                                                          'Result
                                                                                          (function-pmtr (ref (const 'Remaining)) 'l)
                                                                                          (function-pmtr (ref (const 'PreceedingResult)) 'r))
                                               null
                                               (val-call (scope 'InternalCall 'reverse)
                                                         (val-member-call 'l 'otherwise)
                                                         (val-call 'NewResult
                                                                   (val-member-call 'l 'clause)
                                                                   'r))))
                   private))

(define (build-CondBuilder-public construct-args
                                  construct-asgns
                                  public)
  (section-public (constructor 'CondBuilder
                               construct-args
                               construct-asgns)
                  (stmt-dcl-template-struct 'ReverseClauses
                                            (typename 'Final))
                  (stmt-def-template-struct 'ReverseClauses
                                            (typename 'Final)
                                            null
                                            (stmt-typedef  (type-template 'ReverseClausesRecursive 'Clauses 'Final)
                                                           'InternalCall)
                                            (stmt-typedef  (typename (scope 'InternalCall 'Result))
                                                           'Result)
                                            (def-returning-function (dcl-static-function 'reverse
                                                                                         'Result
                                                                                         (function-pmtr (ref (const 'Clauses)) 'cs)
                                                                                         (function-pmtr (ref (const 'Final)) 'f))
                                              null
                                              (val-call (scope 'InternalCall 'reverse)
                                                        'cs
                                                        'f)))
                  (def-template (typename 'Final)
                    (def-returning-function (dcl-function 'reverse
                                                          (typename (scope (type-template 'ReverseClauses 'Final)
                                                                           'Result))
                                                          (function-pmtr (ref (const 'Final)) 'f))
                      (typedef (type-template 'ReverseClauses 'Final)
                               'InternalCall)
                      (val-call (scope 'InternalCall 'reverse)
                                'clauses_
                                'f)))
                  public))

(define (build-CondBuilder extra-tpl-pmtrs
                           remaining-type
                           new-result-type
                           tpl-pmtrs
                           tpl-arg
                           private
                           construct-args
                           construct-asgns
                           public)
  (def-template-struct 'CondBuilder
    (map* typename tpl-pmtrs)
    tpl-arg
    (section-public (stmt-typedef tpl-arg 'Clauses))
    (build-CondBuilder-private extra-tpl-pmtrs
                               remaining-type
                               new-result-type
                               private)
    (build-CondBuilder-public construct-args
                              construct-asgns
                              public)))

(define FT-test (typename (scope (type-template 'NeboFieldCheck
                                                (typename (scope FT-chunk ft-chunk))
                                                FT-chunk)
                                 'Result)))

(define (previous-none? previous)
  (eq? 'none (first previous)))
(define (previous-simple? previous)
  (eq? 'simple (first previous)))
(define (previous-full? previous)
  (eq? 'full (first previous)))
(define previous-FT-def second)
(define previous-FT-ref third)
(define previous-simple-type fourth)
(define previous-full-type fifth)
(define previous-typedef sixth)
(define previous-converted-type seventh)
(define previous-value eighth)
(define previous-convert-value ninth)

(define previous-none
  (list 'none
        FT-chunk
        FT-test
        Nil-chunk
        Nil-chunk
        null
        Nil-chunk
        (val-call Nil-chunk)
        (val-call Nil-chunk)))
(define previous-simple
  (list 'simple
        FT-chunk
        FT-test
        'Clauses
        (typename (scope (scope 'Clauses (type-template-function 'Convert FT-test))
                         'Converted))
        (typedef (typename (scope (scope 'Clauses (type-template-function 'Convert FT-chunk))
                                  'Converted))
                 'ConvertedClauses)
        'ConvertedClauses
        'clauses_
        (val-member-call 'clauses_ (type-template-function 'convert FT-chunk))))
(define previous-full
  (list 'full
        null
        FT-chunk
        'error!
        'Clauses
        null
        'Clauses
        'clauses_
        'clauses_))

(define (condition-final? condition)
  (eq? 'final (first condition)))
(define (condition-bool? condition)
  (eq? 'bool (first condition)))
(define (condition-expr? condition)
  (eq? 'expr (first condition)))
(define (condition-mask? condition)
  (eq? 'mask (first condition)))
(define condition-FT-needed? second)
(define condition-tpl-pmtr third)
(define condition-parameter fourth)
(define (condition-result-type condition FT-use) ((fifth condition) FT-use))
(define condition-typedef sixth)
(define condition-result-name-type seventh)
(define condition-simple-value eighth)
(define condition-full-value ninth)

(define condition-final
  (list 'final
        #false
        null
        null
        'error!
        null
        'error!
        'error!
        'error!))
(define condition-bool
  (list 'bool
        #false
        null
        (function-pmtr (const 'bool) 'b)
        (lambda (FT-use) (type-template NS-chunk 'Initial 'bool))
        (typedef (type-template NS-chunk 'Initial 'bool)
                 'Boolean)
        'Boolean
        'b
        (val-call 'Boolean 'b)))
(define condition-expr
  (list 'expr
        #true
        'BoolExpr
        (function-pmtr (ref (const (type-template NBE-chunk 'BoolExpr FT-chunk))) 'nb)
        (lambda (FT-use) 'BoolExpr)
        null
        'BoolExpr
        (val-member-call 'nb 'expr)
        (val-member-call 'nb 'expr)))
(define condition-mask
  (list 'mask
        #true
        null
        (function-pmtr (ref (const (type-template ('SpatialMask)
                                                  FT-chunk)))
                       'mask)
        (lambda (FT-use) (type-template 'NeboMask 'Initial FT-use))
        (typedef (type-template 'NeboMask 'Initial FT-chunk)
                 'Mask)
        'Mask
        'mask
        (val-call 'Mask 'mask)))

(define condition-list (list condition-final condition-bool condition-expr condition-mask))

(define (value-double? value)
  (eq? 'double (first value)))
(define (value-field? value)
  (eq? 'field (first value)))
(define (value-expr? value)
  (eq? 'expr (first value)))
(define value-FT-needed? second)
(define value-tpl-pmtr third)
(define value-parameter fourth)
(define (value-result-type value FT-use) ((fifth value) FT-use #false))
(define (value-result-type-with-space value FT-use) ((fifth value) FT-use #true))
(define value-typedef sixth)
(define value-result-name-type seventh)
(define value-simple-value eighth)
(define value-full-value ninth)

(define value-double
  (list 'double
        #false
        null
        (function-pmtr (const 'double) 'd)
        (lambda (FT-use add-space) ((if add-space space-after identity)
                                    (type-template NS-chunk 'Initial (typename (scope FT-chunk vt-chunk)))))
        (typedef (type-template NS-chunk 'Initial (typename (scope FT-chunk vt-chunk)))
                 'Scalar)
        'Scalar
        'd
        (val-call 'Scalar 'd)))
(define value-field
  (list 'field
        #true
        null
        (function-pmtr (ref (const FT-chunk)) 'f)
        (lambda (FT-use add-space) ((if add-space space-after identity)
                                    (type-template NCF-chunk 'Initial FT-use)))
        (typedef (type-template NCF-chunk 'Initial FT-chunk)
                 'Field)
        'Field
        (val-call 'ReturnType (val-call 'Field 'f))
        (val-call 'Field 'f)))
(define value-expr
  (list 'expr
        #true
        'Expr
        (function-pmtr (ref (const (type-template NE-chunk 'Expr FT-chunk))) 'e)
        (lambda (FT-use add-space) 'Expr)
        null
        'Expr
        'e
        (val-member-call 'e 'expr)))

(define value-list (list value-double value-field value-expr))

(define condition-value-list
  (foldr (lambda (condition acc)
           (append (foldr (lambda (value acc)
                            (cons (list condition value)
                                  acc))
                          null
                          value-list)
                   acc))
         null
         condition-list))

(define (build-result-type previous condition value)
  (define FT-use (previous-FT-ref previous))
  (if (condition-final? condition)
      (if (and (value-double? value)
               (not (previous-full? previous)))
          'double
          (type-template NE-chunk
                         (cond [(previous-none? previous)
                                (value-result-type value FT-use)]
                               [(previous-simple? previous)
                                (typename (scope (scope (type-template 'CondBuilder (typename (scope (scope 'Clauses (type-template-function 'Convert FT-use))
                                                                                                     'Converted)))
                                                        (type-template-function 'ReverseClauses (value-result-type-with-space value FT-use)))
                                                 'Result))]
                               [(previous-full? previous)
                                (typename (scope (type-template 'ReverseClauses (value-result-type-with-space value FT-use))
                                                 'Result))])
                         FT-use))
      (type-template 'CondBuilder
                     (space-after (if (and (condition-bool? condition)
                                           (value-double? value)
                                           (not (previous-full? previous)))
                                      (type-template SCond-chunk (previous-simple-type previous))
                                      (type-template Cond-chunk
                                                     'Initial
                                                     (type-template Clause-chunk
                                                                    'Initial
                                                                    (condition-result-type condition FT-use)
                                                                    (value-result-type value FT-use)
                                                                    FT-use)
                                                     (previous-full-type previous)
                                                     FT-use))))))

(define (build-body previous condition value)
  (cond [(condition-final? condition)
         (if (or (and (value-double? value)
                      (not (previous-full? previous)))
                 (and (value-expr? value)
                      (previous-none? previous)))
             null
             (list (value-typedef value)
                   (cond [(previous-none? previous)
                          null]
                         [(previous-simple? previous)
                          (list (typedef (typename (scope (scope 'Clauses (type-template-function 'Convert FT-chunk))
                                                          'Converted))
                                         'ConvertedClauses)
                                (typedef (type-template 'CondBuilder 'ConvertedClauses) 'NewBuilder)
                                (typedef (typename (scope (scope 'NewBuilder (type-template-function 'ReverseClauses (value-result-name-type value)))
                                                          'Result))
                                         'ReversedClauses))]
                         [else
                          (typedef (typename (scope (type-template 'ReverseClauses (value-result-name-type value))
                                                    'Result))
                                   'ReversedClauses)])
                   (typedef (type-template NE-chunk
                                           (cond [(previous-none? previous)
                                                  (value-result-name-type value)]
                                                 [else
                                                  'ReversedClauses])
                                           FT-chunk)
                            'ReturnType)))]
        [(and (value-double? value)
              (condition-bool? condition)
              (not (previous-full? previous)))
         (list (typedef (type-template SCond-chunk (previous-simple-type previous)) 'Cond)
               (typedef (type-template 'CondBuilder 'Cond) 'ReturnType))]
        [else
         (list (condition-typedef condition)
               (value-typedef value)
               (typedef (type-template Clause-chunk
                                       'Initial
                                       (condition-result-name-type condition)
                                       (value-result-name-type value)
                                       FT-chunk)
                        'Clause)
               (previous-typedef previous)
               (typedef (type-template Cond-chunk
                                       'Initial
                                       'Clause
                                       (previous-converted-type previous)
                                       FT-chunk)
                        'Cond)
               (typedef (type-template 'CondBuilder 'Cond)
                        'ReturnType))]))

(define (build-result-call previous condition value)
  (if (condition-final? condition)
      (cond [(previous-none? previous)
             (value-simple-value value)]
            [(and (previous-simple? previous)
                  (value-double? value))
             (val-member-call (val-call 'reverse (val-call SFClause-chunk 'd))
                              'eval)]
            [(previous-simple? previous)
             (val-call 'ReturnType (val-member-call (val-call 'NewBuilder (previous-convert-value previous))
                                                    'reverse (value-full-value value)))]
            [else
             (val-call 'ReturnType (val-call 'reverse (value-full-value value)))])
      (val-call 'ReturnType (val-call 'Cond
                                      (if (and (condition-bool? condition)
                                               (value-double? value)
                                               (not (previous-full? previous)))
                                          (list (val-call SClause-chunk
                                                          (condition-simple-value condition)
                                                          (value-simple-value value))
                                                (previous-value previous))
                                          (list (val-call 'Clause
                                                          (condition-full-value condition)
                                                          (value-full-value value))
                                                (previous-convert-value previous)))))))

(define (build-cond-case name previous condition value)
  (define (def-template-proc fcn-def)
    (define tpl-pmtrs
      (flatten (list (condition-tpl-pmtr condition)
                     (value-tpl-pmtr value)
                     (if (or (condition-FT-needed? condition)
                             (value-FT-needed? value))
                         (previous-FT-def previous)
                         null))))
    (if (null? tpl-pmtrs)
        fcn-def
        (def-template (map typename tpl-pmtrs)
          fcn-def)))
  (def-template-proc (def-returning-function (dcl-function name
                                                           (build-result-type previous condition value)
                                                           (list (condition-parameter condition)
                                                                 (value-parameter value)))
                       (build-body previous condition value)
                       (build-result-call previous condition value))))

(define (build-cond-app name previous)
  (map (lambda (condition-value)
         (build-cond-case name
                          previous
                          (first condition-value)
                          (second condition-value)))
       condition-value-list))

                                        ; beginnning of file
(pp-header-file
 'NEBO_COND_H
 (SpatialOps-namespace
  (def-struct (dcl-struct Nil-chunk)
    (pp-threads-only (stmt-typedef Nil-chunk 'ResizeType))
    (stmt-typedef Nil-chunk 'SeqWalkType)
    (pp-gpu-only (stmt-typedef Nil-chunk 'GPUWalkType))
    (constructor Nil-chunk
                 null
                 null))

  (build-struct Clause-chunk
                std-FT
                null
                (list 'Test 'Expr)
                (bs-Initial-rhs null
                                null
                                (bm-constructor (list (function-pmtr (ref (const 'Test)) 't)
                                                      (function-pmtr (ref (const 'Expr)) 'e))
                                                (list (val-construct 'test_ 't)
                                                      (val-construct 'expr_ 'e))
                                                null)
                                (val-call 'min
                                          (val-member-call 'test_ 'ghosts_with_bc)
                                          (val-member-call 'expr_ 'ghosts_with_bc))
                                (val-call 'min
                                          (val-member-call 'test_ 'ghosts_without_bc)
                                          (val-member-call 'expr_ 'ghosts_without_bc))
                                (add-spaces (val-member-call 'test_ 'has_extents)
                                            "||"
                                            (val-member-call 'expr_ 'has_extents))
                                (stmt-if (add-spaces (val-member-call 'test_ 'has_extents)
                                                     "&&"
                                                     (val-member-call 'expr_ 'has_extents))
                                         (val-call 'assert (val-equal  (val-member-call 'test_ 'extents)
                                                                       (val-member-call 'expr_ 'extents))))
                                (ter-cond (val-member-call 'test_ 'has_extents)
                                          (val-member-call 'test_ 'extents)
                                          (val-member-call 'expr_ 'extents))
                                null
                                (add-spaces (val-member-call 'test_ 'has_bc)
                                            "||"
                                            (val-member-call 'expr_ 'has_bc)) ;not correct...
                                (list (val-member-call 'test_ 'init init-arg)
                                      (val-member-call 'expr_ 'init init-arg))
                                (list (val-member-call 'test_ 'resize)
                                      (val-member-call 'expr_ 'resize))
                                (val-and (val-member-call 'test_ 'cpu_ready)
                                         (val-member-call 'expr_ 'cpu_ready))
                                (val-and (val-member-call 'test_ 'gpu_ready DI-chunk)
                                         (val-member-call 'expr_ 'gpu_ready DI-chunk))
                                (list (val-member-call 'test_ 'gpu_init gpu-init-arg)
                                      (val-member-call 'expr_ 'gpu_init gpu-init-arg))
                                (list (val-member-call 'test_ 'gpu_prep DI-chunk)
                                      (val-member-call 'expr_ 'gpu_prep DI-chunk))
                                null
                                (list (stmt-dcl-variable (const 'Test) 'test_)
                                      (stmt-dcl-variable (const 'Expr) 'expr_)))
                (bs-Resize-rhs null
                               null
                               (bm-constructor (list (function-pmtr (ref (const 'Test)) 'test)
                                                     (function-pmtr (ref (const 'Expr)) 'expr))
                                               (list (val-construct 'test_ 'test)
                                                     (val-construct 'expr_ 'expr))
                                               null)
                               (list (val-member-call 'test_ 'init init-arg)
                                     (val-member-call 'expr_ 'init init-arg))
                               null
                               (list (stmt-dcl-variable (const 'Test) 'test_)
                                     (stmt-dcl-variable (const 'Expr) 'expr_)))
                (bs-SeqWalk-rhs null
                                (bm-constructor (list (function-pmtr (ref (const 'Test)) 'test)
                                                      (function-pmtr (ref (const 'Expr)) 'expr))
                                                (list (val-construct 'test_ 'test)
                                                      (val-construct 'expr_ 'expr))
                                                null)
                                vt-chunk
                                (val-member-call 'expr_ 'eval index-arg)
                                (def-returning-function (constize (dcl-function 'check 'bool index-pmtr))
                                  null
                                  (val-member-call 'test_ 'eval index-arg))
                                (list (stmt-dcl-variable 'Test 'test_)
                                      (stmt-dcl-variable 'Expr 'expr_)))
                (bs-gpu-rhs null
                            (bm-constructor (list (function-pmtr (ref (const 'Test)) 'test)
                                                  (function-pmtr (ref (const 'Expr)) 'expr))
                                            (list (val-construct 'test_ 'test)
                                                  (val-construct 'expr_ 'expr))
                                            null)
                            vt-chunk
                            (val-member-call 'expr_ 'eval index-arg)
                            (device-only (def-returning-function (constize (dcl-function 'check
                                                                                         'bool
                                                                                         index-pmtr))
                                           null
                                           (val-member-call 'test_ 'eval index-arg)))
                            (list (stmt-dcl-variable 'Test 'test_)
                                  (stmt-dcl-variable 'Expr 'expr_))))

  (build-struct Cond-chunk
                std-FT
                null
                (list CT-chunk 'Otherwise)
                (bs-Initial-rhs null
                                null
                                (bm-constructor (list (function-pmtr (ref (const CT-chunk)) 'c)
                                                      (function-pmtr (ref (const 'Otherwise)) 'e))
                                                (list (val-construct 'clause_ 'c)
                                                      (val-construct 'otherwise_ 'e))
                                                null)
                                (val-call 'min
                                          (val-member-call 'clause_ 'ghosts_with_bc)
                                          (val-member-call 'otherwise_ 'ghosts_with_bc))
                                (val-call 'min
                                          (val-member-call 'clause_ 'ghosts_without_bc)
                                          (val-member-call 'otherwise_ 'ghosts_without_bc))
                                (add-spaces (val-member-call 'clause_ 'has_extents)
                                            "||"
                                            (val-member-call 'otherwise_ 'has_extents))
                                (stmt-if (add-spaces (val-member-call 'clause_ 'has_extents)
                                                     "&&"
                                                     (val-member-call 'otherwise_ 'has_extents))
                                         (val-call 'assert (val-equal  (val-member-call 'clause_ 'extents)
                                                                       (val-member-call 'otherwise_ 'extents))))
                                (ter-cond (val-member-call 'clause_ 'has_extents)
                                          (val-member-call 'clause_ 'extents)
                                          (val-member-call 'otherwise_ 'extents))
                                null
                                (add-spaces (val-member-call 'clause_ 'has_bc)
                                            "||"
                                            (val-member-call 'otherwise_ 'has_bc)) ;not correct...
                                (list (val-member-call 'clause_ 'init init-arg)
                                      (val-member-call 'otherwise_ 'init init-arg))
                                (list (val-member-call 'clause_ 'resize)
                                      (val-member-call 'otherwise_ 'resize))
                                (val-and (val-member-call 'clause_ 'cpu_ready)
                                         (val-member-call 'otherwise_ 'cpu_ready))
                                (val-and (val-member-call 'clause_ 'gpu_ready DI-chunk)
                                         (val-member-call 'otherwise_ 'gpu_ready DI-chunk))
                                (list (val-member-call 'clause_ 'gpu_init gpu-init-arg)
                                      (val-member-call 'otherwise_ 'gpu_init gpu-init-arg))
                                (list (val-member-call 'clause_ 'gpu_prep DI-chunk)
                                      (val-member-call 'otherwise_ 'gpu_prep DI-chunk))
                                (list (def-returning-function (constize (dcl-function 'clause (ref (const CT-chunk))))
                                        null
                                        'clause_)
                                      (def-returning-function (constize (dcl-function 'otherwise (ref (const 'Otherwise))))
                                        null
                                        'otherwise_))
                                (list (stmt-dcl-variable (const CT-chunk) 'clause_)
                                      (stmt-dcl-variable (const 'Otherwise) 'otherwise_)))
                (bs-Resize-rhs null
                               null
                               (bm-constructor (list (function-pmtr (ref (const CT-chunk)) 'clause)
                                                     (function-pmtr (ref (const 'Otherwise)) 'otherwise))
                                               (list (val-construct 'clause_ 'clause)
                                                     (val-construct 'otherwise_ 'otherwise))
                                               null)
                               (list (val-member-call 'clause_ 'init init-arg)
                                     (val-member-call 'otherwise_ 'init init-arg))
                               null
                               (list (stmt-dcl-variable (const CT-chunk) 'clause_)
                                     (stmt-dcl-variable (const 'Otherwise) 'otherwise_)))
                (bs-SeqWalk-rhs null
                                (bm-constructor (list (function-pmtr (ref (const CT-chunk)) 'clause)
                                                      (function-pmtr (ref (const 'Otherwise)) 'otherwise))
                                                (list (val-construct 'clause_ 'clause)
                                                      (val-construct 'otherwise_ 'otherwise))
                                                null)
                                vt-chunk
                                (ter-cond (val-member-call 'clause_ 'check index-arg)
                                          (val-member-call 'clause_ 'eval index-arg)
                                          (val-member-call 'otherwise_ 'eval index-arg))
                                null
                                (list (stmt-dcl-variable CT-chunk 'clause_)
                                      (stmt-dcl-variable 'Otherwise 'otherwise_)))
                (bs-gpu-rhs null
                            (bm-constructor (list (function-pmtr (ref (const CT-chunk)) 'clause)
                                                  (function-pmtr (ref (const 'Otherwise)) 'otherwise))
                                            (list (val-construct 'clause_ 'clause)
                                                  (val-construct 'otherwise_ 'otherwise))
                                            null)
                            vt-chunk
                            (ter-cond (val-member-call 'clause_ 'check index-arg)
                                      (val-member-call 'clause_ 'eval index-arg)
                                      (val-member-call 'otherwise_ 'eval index-arg))
                            null
                            (list (stmt-dcl-variable CT-chunk 'clause_)
                                  (stmt-dcl-variable 'Otherwise 'otherwise_))))

  (def-struct (dcl-struct SClause-chunk)
    (section-public (constructor SClause-chunk
                                 (list (function-pmtr (ref (const 'bool)) 'b)
                                       (function-pmtr (ref (const 'double)) 'd))
                                 (list (val-construct 'b_ 'b)
                                       (val-construct 'd_ 'd)))
                    (def-returning-function (constize (dcl-function 'check 'bool))
                      null
                      'b_)
                    (def-returning-function (constize (dcl-function 'eval 'double))
                      null
                      'd_)
                    (stmt-def-template-struct 'Convert
                                              (typename FT-chunk)
                                              null
                                              (stmt-typedef (type-template NS-chunk 'Initial 'bool)
                                                            'Boolean)
                                              (stmt-typedef (type-template NS-chunk 'Initial (typename (scope FT-chunk vt-chunk)))
                                                            'Scalar)
                                              (stmt-typedef (type-template Clause-chunk 'Initial 'Boolean 'Scalar FT-chunk)
                                                            'Converted)
                                              (def-returning-function (dcl-static-function 'convert
                                                                                           'Converted
                                                                                           (list (function-pmtr (const 'bool) 'b)
                                                                                                 (function-pmtr (const 'double) 'd)))
                                                null
                                                (val-call 'Converted
                                                          (val-call 'Boolean 'b)
                                                          (val-call 'Scalar 'd)))))
    (section-private (stmt-dcl-variable (const 'bool) 'b_)
                     (stmt-dcl-variable (const 'double) 'd_)))

  (def-struct (dcl-struct SFClause-chunk)
    (section-public (constructor SFClause-chunk
                                 (function-pmtr (const 'double) 'd)
                                 (val-construct 'd_ 'd))
                    (def-returning-function (constize (dcl-function 'eval 'double))
                      null
                      'd_))
    (section-private (stmt-dcl-variable (const 'double) 'd_)))

  (def-template-struct SCond-chunk
    (typename 'Otherwise)
    null
    (section-public (constructor SCond-chunk
                                 (list (function-pmtr (ref (const SClause-chunk)) 'c)
                                       (function-pmtr (ref (const 'Otherwise)) 'otherwise))
                                 (list (val-construct 'c_ 'c)
                                       (val-construct 'otherwise_ 'otherwise)))
                    (def-returning-function (constize (dcl-function 'eval 'double null))
                      null
                      (ter-cond (val-member-call 'c_ 'check)
                                (val-member-call 'c_ 'eval)
                                (val-member-call 'otherwise_ 'eval)))
                    (stmt-def-template-struct 'Convert
                                              (typename FT-chunk)
                                              null
                                              (stmt-typedef (scope SClause-chunk
                                                                   (type-template-function 'Convert FT-chunk))
                                                            'ConvertingClause)
                                              (stmt-typedef (typename (scope 'ConvertingClause
                                                                             'Converted))
                                                            'ConvertedClause)
                                              (stmt-typedef (typename (scope 'Otherwise
                                                                             (type-template-function 'Convert FT-chunk)))
                                                            'ConvertingClauses)
                                              (stmt-typedef (typename (scope 'ConvertingClauses 'Converted))
                                                            'ConvertedClauses)
                                              (stmt-typedef (type-template Cond-chunk 'Initial 'ConvertedClause 'ConvertedClauses FT-chunk)
                                                            'Converted)
                                              (def-returning-function (dcl-static-function 'convert
                                                                                           'Converted
                                                                                           (list (function-pmtr (ref (const SClause-chunk)) 'c)
                                                                                                 (function-pmtr (ref (const 'Otherwise)) 'o)))
                                                null
                                                (val-call 'Converted
                                                          (val-call (scope 'ConvertingClause 'convert)
                                                                    (val-member-call 'c 'check)
                                                                    (val-member-call 'c 'eval))
                                                          (val-member-call 'o (type-template-function 'convert FT-chunk)))))
                    (def-template (typename FT-chunk)
                      (def-returning-function (constize (dcl-function 'convert
                                                                      (typename (scope (type-template 'Convert FT-chunk)
                                                                                       'Converted))))
                        (typedef (type-template 'Convert FT-chunk)
                                 'Convert)
                        (val-call (scope 'Convert 'convert)
                                  (val-call 'clause)
                                  (val-call 'otherwise))))
                    (def-returning-function (constize (dcl-function 'clause (ref (const SClause-chunk))))
                      null
                      'c_)
                    (def-returning-function (constize (dcl-function 'otherwise (ref (const 'Otherwise))))
                      null
                      'otherwise_))
    (section-private (stmt-dcl-variable (const SClause-chunk) 'c_)
                     (stmt-dcl-variable (const 'Otherwise) 'otherwise_)))

  (def-template-struct SCond-chunk
    null
    Nil-chunk
    (section-public (constructor SCond-chunk
                                 (list (function-pmtr (ref (const SClause-chunk)) 'c)
                                       (function-pmtr (ref (const Nil-chunk)) 'nil))
                                 (val-construct 'c_ 'c))
                    (stmt-def-template-struct 'Convert
                                              (typename FT-chunk)
                                              null
                                              (stmt-typedef (scope SClause-chunk
                                                                   (type-template-function 'Convert FT-chunk))
                                                            'ConvertingClause)
                                              (stmt-typedef (typename (scope 'ConvertingClause 'Converted))
                                                            'ConvertedClause)
                                              (stmt-typedef Nil-chunk
                                                            'ConvertedClauses)
                                              (stmt-typedef (type-template Cond-chunk
                                                                           'Initial
                                                                           'ConvertedClause
                                                                           'ConvertedClauses
                                                                           FT-chunk)
                                                            'Converted)
                                              (def-returning-function (dcl-static-function 'convert
                                                                                           'Converted
                                                                                           (function-pmtr (ref (const SClause-chunk)) 'c))
                                                null
                                                (val-call 'Converted
                                                          (val-call (scope 'ConvertingClause 'convert)
                                                                    (val-member-call 'c 'check)
                                                                    (val-member-call 'c 'eval))
                                                          (val-call Nil-chunk))))
                    (def-template (typename FT-chunk)
                      (def-returning-function (constize (dcl-function 'convert
                                                                      (typename (scope (type-template 'Convert FT-chunk)
                                                                                       'Converted))))
                        (typedef (type-template 'Convert FT-chunk)
                                 'Convert)
                        (val-call (scope 'Convert 'convert)
                                  (val-call 'clause))))
                    (def-returning-function (constize (dcl-function 'clause (ref (const SClause-chunk))))
                      null
                      'c_)
                    (def-returning-function (constize (dcl-function 'otherwise Nil-chunk))
                      null
                      (val-call Nil-chunk)))
    (section-private (stmt-dcl-variable (const SClause-chunk) 'c_)))

                                        ;CondBuilder
  (dcl-template-struct 'CondBuilder
                       (typename 'Clauses))

                                        ; FT
  (build-CondBuilder (list (typename 'Next) (typename 'Field))
                     (type-template Cond-chunk 'Initial 'Next 'Following 'Field)
                     (type-template Cond-chunk 'Initial 'Next 'PreceedingResult 'Field)
                     (list CT-chunk 'Otherwise FT-chunk)
                     (space-after (type-template Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk))
                     (stmt-dcl-variable (const 'Clauses) 'clauses_)
                     (function-pmtr (ref (const (type-template Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk))) 'cs)
                     (val-construct 'clauses_ 'cs)
                     (build-cond-app (add-spaces 'operator (paren))
                                     previous-full))

                                        ; no FT
  (build-CondBuilder null
                     (type-template SCond-chunk 'Following)
                     (type-template SCond-chunk 'PreceedingResult)
                     'Otherwise
                     (space-after (type-template SCond-chunk 'Otherwise))
                     (stmt-dcl-variable (const 'Clauses) 'clauses_)
                     (function-pmtr (ref (const (type-template SCond-chunk 'Otherwise))) 'cs)
                     (val-construct 'clauses_ 'cs)
                     (build-cond-app (add-spaces 'operator (paren))
                                     previous-simple))

                                        ; Nil
  (def-template-struct 'CondBuilder
    null
    Nil-chunk
    (section-public (constructor 'CondBuilder null null)))

  (build-cond-app 'cond previous-none)

  (macro-define 'nebo_cond null (literal 'cond '//))
  ))
