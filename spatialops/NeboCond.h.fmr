#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")
(require "NeboRhsCore.fmr")

(define (build-CondBuilder-private extra-tpl-pmtrs
                                   remaining-type
                                   new-result-type
                                   private)
  (priv-sec (s-tpl-srt-dcl 'ReverseClausesRecursive
                           (list (tpl-pmtr 'Remaining)
                                 (tpl-pmtr 'PreceedingResult)))
            (s-tpl-srt-def 'ReverseClausesRecursive
                           (tpl-pmtr 'PreceedingResult)
                           (list Nil-chunk 'PreceedingResult)
                           (s-typedef 'PreceedingResult
                                      'Result)
                           (r-fcn-def (s-fcn-dcl 'reverse
                                                 'Result
                                                 (adcr Nil-chunk 'nil)
                                                 (adcr 'PreceedingResult 'r))
                                      null
                                      'r))
            (s-tpl-srt-def 'ReverseClausesRecursive
                           (list extra-tpl-pmtrs
                                 (tpl-pmtr 'Following)
                                 (tpl-pmtr 'PreceedingResult))
                           (list remaining-type
                                 'PreceedingResult)
                           (s-typedef remaining-type 'Remaining)
                           (s-typedef new-result-type 'NewResult)
                           (s-typedef (tpl-use 'ReverseClausesRecursive 'Following 'NewResult)
                                      'InternalCall)
                           (s-typedef (tpl-pmtr (scope 'InternalCall 'Result))
                                      'Result)
                           (r-fcn-def (s-fcn-dcl 'reverse
                                                 'Result
                                                 (adcr 'Remaining 'l)
                                                 (adcr 'PreceedingResult 'r))
                                      null
                                      (fc (scope 'InternalCall 'reverse)
                                          (mfc 'l 'otherwise)
                                          (fc 'NewResult
                                              (mfc 'l 'clause)
                                              'r))))
            private))

(define (build-CondBuilder-public construct-args
                                  construct-asgns
                                  public)
  (pub-sec (constructor 'CondBuilder
                        construct-args
                        construct-asgns)
           (s-tpl-srt-dcl 'ReverseClauses
                          (tpl-pmtr 'Final))
           (s-tpl-srt-def 'ReverseClauses
                          (tpl-pmtr 'Final)
                          null
                          (s-typedef  (tpl-use 'ReverseClausesRecursive 'Clauses 'Final)
                                      'InternalCall)
                          (s-typedef  (tpl-pmtr (scope 'InternalCall 'Result))
                                      'Result)
                          (r-fcn-def (s-fcn-dcl 'reverse
                                                'Result
                                                (adcr 'Clauses 'cs)
                                                (adcr 'Final 'f))
                                     null
                                     (fc (scope 'InternalCall 'reverse)
                                         'cs
                                         'f)))
           (tpl-def (tpl-pmtr 'Final)
                    (r-fcn-def (fcn-dcl 'reverse
                                        (tpl-pmtr (scope (tpl-use 'ReverseClauses 'Final)
                                                         'Result))
                                        (adcr 'Final 'f))
                               (typedef (tpl-use 'ReverseClauses 'Final)
                                        'InternalCall)
                               (fc (scope 'InternalCall 'reverse)
                                   'clauses_
                                   'f)))
           public))

(define (build-CondBuilder extra-tpl-pmtrs
                           remaining-type
                           new-result-type
                           tpl-pmtrs
                           tpl-arg
                           private
                           construct-args
                           construct-asgns
                           public)
  (tpl-srt-def 'CondBuilder
               (map* tpl-pmtr tpl-pmtrs)
               tpl-arg
               (pub-sec (s-typedef tpl-arg 'Clauses))
               (build-CondBuilder-private extra-tpl-pmtrs
                                          remaining-type
                                          new-result-type
                                          private)
               (build-CondBuilder-public construct-args
                                         construct-asgns
                                         public)))

(define FT-test (tpl-pmtr (scope (tpl-use 'NeboFieldCheck
                                          (tpl-pmtr (scope FT-chunk ft-chunk))
                                          FT-chunk)
                                 'Result)))

(define (previous-none? previous)
  (eq? 'none (first previous)))
(define (previous-simple? previous)
  (eq? 'simple (first previous)))
(define (previous-full? previous)
  (eq? 'full (first previous)))
(define previous-FT-def second)
(define previous-FT-ref third)
(define previous-simple-type fourth)
(define previous-full-type fifth)
(define previous-typedef sixth)
(define previous-converted-type seventh)
(define previous-value eighth)
(define previous-convert-value ninth)

(define previous-none
  (list 'none
        FT-chunk
        FT-test
        Nil-chunk
        Nil-chunk
        null
        Nil-chunk
        (fc Nil-chunk)
        (fc Nil-chunk)))
(define previous-simple
  (list 'simple
        FT-chunk
        FT-test
        'Clauses
        (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-test))
                         'Converted))
        (typedef (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                  'Converted))
                 'ConvertedClauses)
        'ConvertedClauses
        'clauses_
        (mfc 'clauses_ (tpl-fcn-use 'convert FT-chunk))))
(define previous-full
  (list 'full
        null
        FT-chunk
        'error!
        'Clauses
        null
        'Clauses
        'clauses_
        'clauses_))

(define (condition-final? condition)
  (eq? 'final (first condition)))
(define (condition-bool? condition)
  (eq? 'bool (first condition)))
(define (condition-expr? condition)
  (eq? 'expr (first condition)))
(define (condition-mask? condition)
  (eq? 'mask (first condition)))
(define condition-FT-needed? second)
(define condition-tpl-pmtr third)
(define condition-parameter fourth)
(define (condition-result-type condition FT-use) ((fifth condition) FT-use))
(define condition-typedef sixth)
(define condition-result-name-type seventh)
(define condition-simple-value eighth)
(define condition-full-value ninth)

(define condition-final
  (list 'final
        #false
        null
        null
        'error!
        null
        'error!
        'error!
        'error!))
(define condition-bool
  (list 'bool
        #false
        null
        (adc 'bool 'b)
        (lambda (FT-use) (tpl-use NS-chunk 'Initial 'bool))
        (typedef (tpl-use NS-chunk 'Initial 'bool)
                 'Boolean)
        'Boolean
        'b
        (fc 'Boolean 'b)))
(define condition-expr
  (list 'expr
        #true
        'BoolExpr
        (adcr (tpl-use NBE-chunk 'BoolExpr FT-chunk) 'nb)
        (lambda (FT-use) 'BoolExpr)
        null
        'BoolExpr
        (mfc 'nb 'expr)
        (mfc 'nb 'expr)))
(define condition-mask
  (list 'mask
        #true
        null
        (adcr (tpl-use (scope 'structured 'SpatialMask)
                       FT-chunk)
              'mask)
        (lambda (FT-use) (tpl-use 'NeboMask 'Initial FT-use))
        (typedef (tpl-use 'NeboMask 'Initial FT-chunk)
                 'Mask)
        'Mask
        'mask
        (fc 'Mask 'mask)))

(define condition-list (list condition-final condition-bool condition-expr condition-mask))

(define (value-double? value)
  (eq? 'double (first value)))
(define (value-field? value)
  (eq? 'field (first value)))
(define (value-expr? value)
  (eq? 'expr (first value)))
(define value-FT-needed? second)
(define value-tpl-pmtr third)
(define value-parameter fourth)
(define (value-result-type value FT-use) ((fifth value) FT-use #false))
(define (value-result-type-with-space value FT-use) ((fifth value) FT-use #true))
(define value-typedef sixth)
(define value-result-name-type seventh)
(define value-simple-value eighth)
(define value-full-value ninth)

(define value-double
  (list 'double
        #false
        null
        (adc 'double 'd)
        (lambda (FT-use add-space) ((if add-space cs identity)
                                    (tpl-use NS-chunk 'Initial (tpl-pmtr (scope FT-chunk vt-chunk)))))
        (typedef (tpl-use NS-chunk 'Initial (tpl-pmtr (scope FT-chunk vt-chunk)))
                 'Scalar)
        'Scalar
        'd
        (fc 'Scalar 'd)))
(define value-field
  (list 'field
        #true
        null
        (adcr FT-chunk 'f)
        (lambda (FT-use add-space) ((if add-space cs identity)
                                    (tpl-use NCF-chunk 'Initial FT-use)))
        (typedef (tpl-use NCF-chunk 'Initial FT-chunk)
                 'Field)
        'Field
        (fc 'ReturnType (fc 'Field 'f))
        (fc 'Field 'f)))
(define value-expr
  (list 'expr
        #true
        'Expr
        (adcr (tpl-use NE-chunk 'Expr FT-chunk) 'e)
        (lambda (FT-use add-space) 'Expr)
        null
        'Expr
        'e
        (mfc 'e 'expr)))

(define value-list (list value-double value-field value-expr))

(define condition-value-list
  (foldr (lambda (condition acc)
           (append (foldr (lambda (value acc)
                            (cons (list condition value)
                                  acc))
                          null
                          value-list)
                   acc))
         null
         condition-list))

(define (build-result-type previous condition value)
  (define FT-use (previous-FT-ref previous))
  (if (condition-final? condition)
      (if (and (value-double? value)
               (not (previous-full? previous)))
          'double
          (tpl-use NE-chunk
                   (cond [(previous-none? previous)
                          (value-result-type value FT-use)]
                         [(previous-simple? previous)
                          (tpl-pmtr (scope (scope (tpl-use 'CondBuilder (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-use))
                                                                                         'Converted)))
                                                  (tpl-fcn-use 'ReverseClauses (value-result-type-with-space value FT-use)))
                                           'Result))]
                         [(previous-full? previous)
                          (tpl-pmtr (scope (tpl-use 'ReverseClauses (value-result-type-with-space value FT-use))
                                           'Result))])
                   FT-use))
      (tpl-use 'CondBuilder
               (cs (if (and (condition-bool? condition)
                            (value-double? value)
                            (not (previous-full? previous)))
                       (tpl-use SCond-chunk (previous-simple-type previous))
                       (tpl-use Cond-chunk
                                'Initial
                                (tpl-use Clause-chunk
                                         'Initial
                                         (condition-result-type condition FT-use)
                                         (value-result-type value FT-use)
                                         FT-use)
                                (previous-full-type previous)
                                FT-use))))))

(define (build-body previous condition value)
  (cond [(condition-final? condition)
         (if (or (and (value-double? value)
                      (not (previous-full? previous)))
                 (and (value-expr? value)
                      (previous-none? previous)))
             null
             (list (value-typedef value)
                   (cond [(previous-none? previous)
                          null]
                         [(previous-simple? previous)
                          (list (typedef (tpl-pmtr (scope (scope 'Clauses (tpl-fcn-use 'Convert FT-chunk))
                                                          'Converted))
                                         'ConvertedClauses)
                                (typedef (tpl-use 'CondBuilder 'ConvertedClauses) 'NewBuilder)
                                (typedef (tpl-pmtr (scope (scope 'NewBuilder (tpl-fcn-use 'ReverseClauses (value-result-name-type value)))
                                                          'Result))
                                         'ReversedClauses))]
                         [else
                          (typedef (tpl-pmtr (scope (tpl-use 'ReverseClauses (value-result-name-type value))
                                                    'Result))
                                   'ReversedClauses)])
                   (typedef (tpl-use NE-chunk
                                     (cond [(previous-none? previous)
                                            (value-result-name-type value)]
                                           [else
                                            'ReversedClauses])
                                     FT-chunk)
                            'ReturnType)))]
        [(and (value-double? value)
              (condition-bool? condition)
              (not (previous-full? previous)))
         (list (typedef (tpl-use SCond-chunk (previous-simple-type previous)) 'Cond)
               (typedef (tpl-use 'CondBuilder 'Cond) 'ReturnType))]
        [else
         (list (condition-typedef condition)
               (value-typedef value)
               (typedef (tpl-use Clause-chunk
                                 'Initial
                                 (condition-result-name-type condition)
                                 (value-result-name-type value)
                                 FT-chunk)
                        'Clause)
               (previous-typedef previous)
               (typedef (tpl-use Cond-chunk
                                 'Initial
                                 'Clause
                                 (previous-converted-type previous)
                                 FT-chunk)
                        'Cond)
               (typedef (tpl-use 'CondBuilder 'Cond)
                        'ReturnType))]))

(define (build-result-call previous condition value)
  (if (condition-final? condition)
      (cond [(previous-none? previous)
             (value-simple-value value)]
            [(and (previous-simple? previous)
                  (value-double? value))
             (mfc (fc 'reverse (fc SFClause-chunk 'd))
                  'eval)]
            [(previous-simple? previous)
             (fc 'ReturnType (mfc (fc 'NewBuilder (previous-convert-value previous))
                                  'reverse (value-full-value value)))]
            [else
             (fc 'ReturnType (fc 'reverse (value-full-value value)))])
      (fc 'ReturnType (fc 'Cond
                          (if (and (condition-bool? condition)
                                   (value-double? value)
                                   (not (previous-full? previous)))
                              (list (fc SClause-chunk
                                        (condition-simple-value condition)
                                        (value-simple-value value))
                                    (previous-value previous))
                              (list (fc 'Clause
                                        (condition-full-value condition)
                                        (value-full-value value))
                                    (previous-convert-value previous)))))))

(define (build-cond-case name previous condition value)
  (define (tpl-def-proc fcn-def)
    (define tpl-pmtrs
      (flatten (list (condition-tpl-pmtr condition)
                     (value-tpl-pmtr value)
                     (if (or (condition-FT-needed? condition)
                             (value-FT-needed? value))
                         (previous-FT-def previous)
                         null))))
    (if (null? tpl-pmtrs)
        fcn-def
        (tpl-def (map tpl-pmtr tpl-pmtrs)
                 fcn-def)))
  (tpl-def-proc (r-fcn-def (fcn-dcl name
                                    (build-result-type previous condition value)
                                    (list (condition-parameter condition)
                                          (value-parameter value)))
                           (build-body previous condition value)
                           (build-result-call previous condition value))))

(define (build-cond-app name previous)
   (map (lambda (condition-value)
          (build-cond-case name
                           previous
                           (first condition-value)
                           (second condition-value)))
        condition-value-list))

                                        ; beginnning of file
(pp-header-file
 'NEBO_COND_H
 (n 'SpatialOps
    (srt-def (srt-dcl Nil-chunk)
             (threads-only (s-typedef Nil-chunk 'ResizeType))
             (s-typedef Nil-chunk 'SeqWalkType)
             (gpu-only (s-typedef Nil-chunk 'GPUWalkType))
             (constructor Nil-chunk
                          null
                          null))

    (build-struct Clause-chunk
                  std-FT
                  null
                  (list 'Test 'Expr)
                  (bs-Initial-rhs null
                                  null
                                  (bm-constructor (list (adcr 'Test 't)
                                                        (adcr 'Expr 'e))
                                                  (list (cons-asgn 'test_ 't)
                                                        (cons-asgn 'expr_ 'e))
                                                  null)
                                  (fc 'min
                                      (mfc 'test_ 'possible_ghosts)
                                      (mfc 'expr_ 'possible_ghosts))
                                  (fc 'min
                                      (mfc 'test_ 'minimum_ghosts)
                                      (mfc 'expr_ 'minimum_ghosts))
                                  (bs (mfc 'test_ 'has_extent)
                                      "||"
                                      (mfc 'expr_ 'has_extent))
                                  (nif (bs (mfc 'test_ 'has_extent)
                                           "&&"
                                           (mfc 'expr_ 'has_extent))
                                       (fc 'assert (n==  (mfc 'test_ 'extent 'dir)
                                                         (mfc 'expr_ 'extent 'dir))))
                                  (ter-cond (mfc 'test_ 'has_extent)
                                            (mfc 'test_ 'extent 'dir)
                                            (mfc 'expr_ 'extent 'dir))
                                  (list (mfc 'test_ 'init)
                                        (mfc 'expr_ 'init))
                                  (list (mfc 'test_ 'resize)
                                        (mfc 'expr_ 'resize))
                                  (n-and (mfc 'test_ 'cpu_ready)
                                         (mfc 'expr_ 'cpu_ready))
                                  (n-and (mfc 'test_ 'gpu_ready DI-chunk)
                                         (mfc 'expr_ 'gpu_ready DI-chunk))
                                  (list (mfc 'test_ 'gpu_init DI-chunk)
                                        (mfc 'expr_ 'gpu_init DI-chunk))
                                  (list (mfc 'test_ 'gpu_prep DI-chunk)
                                        (mfc 'expr_ 'gpu_prep DI-chunk))
                                  null
                                  (list (sadc 'Test 'test_)
                                        (sadc 'Expr 'expr_)))
                  (bs-Resize-rhs null
                                 null
                                 (bm-constructor (list (adcr 'Test 'test)
                                                       (adcr 'Expr 'expr))
                                                 (list (cons-asgn 'test_ 'test)
                                                       (cons-asgn 'expr_ 'expr))
                                                 null)
                                 (list (mfc 'test_ 'init)
                                       (mfc 'expr_ 'init))
                                 null
                                 (list (sadc 'Test 'test_)
                                       (sadc 'Expr 'expr_)))
                  (bs-SeqWalk-rhs null
                                  (bm-constructor (list (adcr 'Test 'test)
                                                        (adcr 'Expr 'expr))
                                                  (list (cons-asgn 'test_ 'test)
                                                        (cons-asgn 'expr_ 'expr))
                                                  null)
                                  vt-chunk
                                  (mfc 'expr_ 'eval index-arg)
                                  (r-fcn-def (constize (fcn-dcl 'check 'bool index-pmtr))
                                             null
                                             (mfc 'test_ 'eval index-arg))
                                  (list (sad 'Test 'test_)
                                        (sad 'Expr 'expr_)))
                  (bs-gpu-rhs null
                              (bm-constructor (list (adcr 'Test 'test)
                                                    (adcr 'Expr 'expr))
                                              (list (cons-asgn 'test_ 'test)
                                                    (cons-asgn 'expr_ 'expr))
                                              null)
                              vt-chunk
                              (mfc 'expr_ 'eval index-arg)
                              (device-use (r-fcn-def (constize (fcn-dcl 'check
                                                                        'bool
                                                                        index-pmtr))
                                                     null
                                                     (mfc 'test_ 'eval index-arg)))
                              (list (sad 'Test 'test_)
                                    (sad 'Expr 'expr_))))

    (build-struct Cond-chunk
                  std-FT
                  null
                  (list CT-chunk 'Otherwise)
                  (bs-Initial-rhs null
                                  null
                                  (bm-constructor (list (adcr CT-chunk 'c)
                                                        (adcr 'Otherwise 'e))
                                                  (list (cons-asgn 'clause_ 'c)
                                                        (cons-asgn 'otherwise_ 'e))
                                                  null)
                                  (fc 'min
                                      (mfc 'clause_ 'possible_ghosts)
                                      (mfc 'otherwise_ 'possible_ghosts))
                                  (fc 'min
                                      (mfc 'clause_ 'minimum_ghosts)
                                      (mfc 'otherwise_ 'minimum_ghosts))
                                  (bs (mfc 'clause_ 'has_extent)
                                      "||"
                                      (mfc 'otherwise_ 'has_extent))
                                  (nif (bs (mfc 'clause_ 'has_extent)
                                           "&&"
                                           (mfc 'otherwise_ 'has_extent))
                                       (fc 'assert (n==  (mfc 'clause_ 'extent 'dir)
                                                         (mfc 'otherwise_ 'extent 'dir))))
                                  (ter-cond (mfc 'clause_ 'has_extent)
                                            (mfc 'clause_ 'extent 'dir)
                                            (mfc 'otherwise_ 'extent 'dir))
                                  (list (mfc 'clause_ 'init)
                                        (mfc 'otherwise_ 'init))
                                  (list (mfc 'clause_ 'resize)
                                        (mfc 'otherwise_ 'resize))
                                  (n-and (mfc 'clause_ 'cpu_ready)
                                         (mfc 'otherwise_ 'cpu_ready))
                                  (n-and (mfc 'clause_ 'gpu_ready DI-chunk)
                                         (mfc 'otherwise_ 'gpu_ready DI-chunk))
                                  (list (mfc 'clause_ 'gpu_init DI-chunk)
                                        (mfc 'otherwise_ 'gpu_init DI-chunk))
                                  (list (mfc 'clause_ 'gpu_prep DI-chunk)
                                        (mfc 'otherwise_ 'gpu_prep DI-chunk))
                                  (list (r-fcn-def (constize (fcn-dcl 'clause (cref CT-chunk)))
                                                   null
                                                   'clause_)
                                        (r-fcn-def (constize (fcn-dcl 'otherwise (cref 'Otherwise)))
                                                   null
                                                   'otherwise_))
                                  (list (sadc CT-chunk 'clause_)
                                        (sadc 'Otherwise 'otherwise_)))
                  (bs-Resize-rhs null
                                 null
                                 (bm-constructor (list (adcr CT-chunk 'clause)
                                                       (adcr 'Otherwise 'otherwise))
                                                 (list (cons-asgn 'clause_ 'clause)
                                                       (cons-asgn 'otherwise_ 'otherwise))
                                                 null)
                                 (list (mfc 'clause_ 'init)
                                       (mfc 'otherwise_ 'init))
                                 null
                                 (list (sadc CT-chunk 'clause_)
                                       (sadc 'Otherwise 'otherwise_)))
                  (bs-SeqWalk-rhs null
                                  (bm-constructor (list (adcr CT-chunk 'clause)
                                                        (adcr 'Otherwise 'otherwise))
                                                  (list (cons-asgn 'clause_ 'clause)
                                                        (cons-asgn 'otherwise_ 'otherwise))
                                                  null)
                                  vt-chunk
                                  (ter-cond (mfc 'clause_ 'check index-arg)
                                            (mfc 'clause_ 'eval index-arg)
                                            (mfc 'otherwise_ 'eval index-arg))
                                  null
                                  (list (sad CT-chunk 'clause_)
                                        (sad 'Otherwise 'otherwise_)))
                  (bs-gpu-rhs null
                              (bm-constructor (list (adcr CT-chunk 'clause)
                                                    (adcr 'Otherwise 'otherwise))
                                              (list (cons-asgn 'clause_ 'clause)
                                                    (cons-asgn 'otherwise_ 'otherwise))
                                              null)
                              vt-chunk
                              (ter-cond (mfc 'clause_ 'check index-arg)
                                        (mfc 'clause_ 'eval index-arg)
                                        (mfc 'otherwise_ 'eval index-arg))
                              null
                              (list (sad CT-chunk 'clause_)
                                    (sad 'Otherwise 'otherwise_))))

    (srt-def (srt-dcl SClause-chunk)
             (pub-sec (constructor SClause-chunk
                                   (list (adcr 'bool 'b)
                                         (adcr 'double 'd))
                                   (list (cons-asgn 'b_ 'b)
                                         (cons-asgn 'd_ 'd)))
                      (r-fcn-def (constize (fcn-dcl 'check 'bool))
                                 null
                                 'b_)
                      (r-fcn-def (constize (fcn-dcl 'eval 'double))
                                 null
                                 'd_)
                      (s-tpl-srt-def 'Convert
                                     (tpl-pmtr FT-chunk)
                                     null
                                     (s-typedef (tpl-use NS-chunk 'Initial 'bool)
                                                'Boolean)
                                     (s-typedef (tpl-use NS-chunk 'Initial (tpl-pmtr (scope FT-chunk vt-chunk)))
                                                'Scalar)
                                     (s-typedef (tpl-use Clause-chunk 'Initial 'Boolean 'Scalar FT-chunk)
                                                'Converted)
                                     (r-fcn-def (s-fcn-dcl 'convert
                                                           'Converted
                                                           (list (adc 'bool 'b)
                                                                 (adc 'double 'd)))
                                                null
                                                (fc 'Converted
                                                    (fc 'Boolean 'b)
                                                    (fc 'Scalar 'd)))))
             (priv-sec (sadc 'bool 'b_)
                       (sadc 'double 'd_)))

    (srt-def (srt-dcl SFClause-chunk)
             (pub-sec (constructor SFClause-chunk
                                   (adc 'double 'd)
                                   (cons-asgn 'd_ 'd))
                      (r-fcn-def (constize (fcn-dcl 'eval 'double))
                                 null
                                 'd_))
             (priv-sec (sadc 'double 'd_)))

    (tpl-srt-def SCond-chunk
                 (tpl-pmtr 'Otherwise)
                 null
                 (pub-sec (constructor SCond-chunk
                                       (list (adcr SClause-chunk 'c)
                                             (adcr 'Otherwise 'otherwise))
                                       (list (cons-asgn 'c_ 'c)
                                             (cons-asgn 'otherwise_ 'otherwise)))
                          (r-fcn-def (constize (fcn-dcl 'eval 'double null))
                                     null
                                     (ter-cond (mfc 'c_ 'check)
                                               (mfc 'c_ 'eval)
                                               (mfc 'otherwise_ 'eval)))
                          (s-tpl-srt-def 'Convert
                                         (tpl-pmtr FT-chunk)
                                         null
                                         (s-typedef (scope SClause-chunk
                                                           (tpl-fcn-use 'Convert FT-chunk))
                                                    'ConvertingClause)
                                         (s-typedef (tpl-pmtr (scope 'ConvertingClause
                                                                     'Converted))
                                                    'ConvertedClause)
                                         (s-typedef (tpl-pmtr (scope 'Otherwise
                                                                     (tpl-fcn-use 'Convert FT-chunk)))
                                                    'ConvertingClauses)
                                         (s-typedef (tpl-pmtr (scope 'ConvertingClauses 'Converted))
                                                    'ConvertedClauses)
                                         (s-typedef (tpl-use Cond-chunk 'Initial 'ConvertedClause 'ConvertedClauses FT-chunk)
                                                    'Converted)
                                         (r-fcn-def (s-fcn-dcl 'convert
                                                               'Converted
                                                               (list (adcr SClause-chunk 'c)
                                                                     (adcr 'Otherwise 'o)))
                                                    null
                                                    (fc 'Converted
                                                        (fc (scope 'ConvertingClause 'convert)
                                                            (mfc 'c 'check)
                                                            (mfc 'c 'eval))
                                                        (mfc 'o (tpl-fcn-use 'convert FT-chunk)))))
                          (tpl-def (tpl-pmtr FT-chunk)
                                   (r-fcn-def (constize (fcn-dcl 'convert
                                                                 (tpl-pmtr (scope (tpl-use 'Convert FT-chunk)
                                                                                  'Converted))))
                                              (typedef (tpl-use 'Convert FT-chunk)
                                                       'Convert)
                                              (fc (scope 'Convert 'convert)
                                                  (fc 'clause)
                                                  (fc 'otherwise))))
                          (r-fcn-def (constize (fcn-dcl 'clause (cref SClause-chunk)))
                                     null
                                     'c_)
                          (r-fcn-def (constize (fcn-dcl 'otherwise (cref 'Otherwise)))
                                     null
                                     'otherwise_))
                 (priv-sec (sadc SClause-chunk 'c_)
                           (sadc 'Otherwise 'otherwise_)))

    (tpl-srt-def SCond-chunk
                 null
                 Nil-chunk
                 (pub-sec (constructor SCond-chunk
                                       (list (adcr SClause-chunk 'c)
                                             (adcr Nil-chunk 'nil))
                                       (cons-asgn 'c_ 'c))
                          (s-tpl-srt-def 'Convert
                                         (tpl-pmtr FT-chunk)
                                         null
                                         (s-typedef (scope SClause-chunk
                                                           (tpl-fcn-use 'Convert FT-chunk))
                                                    'ConvertingClause)
                                         (s-typedef (tpl-pmtr (scope 'ConvertingClause 'Converted))
                                                    'ConvertedClause)
                                         (s-typedef Nil-chunk
                                                    'ConvertedClauses)
                                         (s-typedef (tpl-use Cond-chunk
                                                             'Initial
                                                             'ConvertedClause
                                                             'ConvertedClauses
                                                             FT-chunk)
                                                    'Converted)
                                         (r-fcn-def (s-fcn-dcl 'convert
                                                               'Converted
                                                               (adcr SClause-chunk 'c))
                                                    null
                                                    (fc 'Converted
                                                        (fc (scope 'ConvertingClause 'convert)
                                                            (mfc 'c 'check)
                                                            (mfc 'c 'eval))
                                                        (fc Nil-chunk))))
                          (tpl-def (tpl-pmtr FT-chunk)
                                   (r-fcn-def (constize (fcn-dcl 'convert
                                                                 (tpl-pmtr (scope (tpl-use 'Convert FT-chunk)
                                                                                  'Converted))))
                                              (typedef (tpl-use 'Convert FT-chunk)
                                                       'Convert)
                                              (fc (scope 'Convert 'convert)
                                                  (fc 'clause))))
                          (r-fcn-def (constize (fcn-dcl 'clause (cref SClause-chunk)))
                                     null
                                     'c_)
                          (r-fcn-def (constize (fcn-dcl 'otherwise Nil-chunk))
                                     null
                                     (fc Nil-chunk)))
                 (priv-sec (sadc SClause-chunk 'c_)))

                                        ;CondBuilder
    (tpl-srt-dcl 'CondBuilder
                 (tpl-pmtr 'Clauses))

                                        ; FT
    (build-CondBuilder (list (tpl-pmtr 'Next) (tpl-pmtr 'Field))
                       (tpl-use Cond-chunk 'Initial 'Next 'Following 'Field)
                       (tpl-use Cond-chunk 'Initial 'Next 'PreceedingResult 'Field)
                       (list CT-chunk 'Otherwise FT-chunk)
                       (cs (tpl-use Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk))
                       (sadc 'Clauses 'clauses_)
                       (adcr (tpl-use Cond-chunk 'Initial CT-chunk 'Otherwise FT-chunk) 'cs)
                       (cons-asgn 'clauses_ 'cs)
                       (build-cond-app (bs 'operator (p))
                                       previous-full))

                                        ; no FT
    (build-CondBuilder null
                       (tpl-use SCond-chunk 'Following)
                       (tpl-use SCond-chunk 'PreceedingResult)
                       'Otherwise
                       (cs (tpl-use SCond-chunk 'Otherwise))
                       (sadc 'Clauses 'clauses_)
                       (adcr (tpl-use SCond-chunk 'Otherwise) 'cs)
                       (cons-asgn 'clauses_ 'cs)
                       (build-cond-app (bs 'operator (p))
                                       previous-simple))

                                        ; Nil
    (tpl-srt-def 'CondBuilder
                 null
                 Nil-chunk
                 (pub-sec (constructor 'CondBuilder null null)))

    (build-cond-app 'cond previous-none)

    (m 'nebo_cond null (l 'cond '//)))
 )
