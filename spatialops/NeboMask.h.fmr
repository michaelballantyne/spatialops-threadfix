#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")
(require "NeboRhsCore.fmr")

(define SpatialMask (scope 'structured (type-template 'SpatialMask FT-chunk)))

(pp-header-file
 'NEBO_MASK_H
 (SpatialOps-namespace
  (build-struct 'NeboMask
                std-FT
                null
                null
                (bs-Initial-rhs null
                                null
                                (bm-constructor (function-pmtr (ref (const SpatialMask)) 'm)
                                                (val-construct 'mask_ 'm)
                                                null)
                                (val-add (val-member-call 'mask_ 'get_valid_ghost_data)
                                         (val-call 'point_to_ghost (val-member-call (val-member-call 'mask_ 'boundary_info) 'has_extra)))
                                (val-call 'point_to_ghost (val-member-call (val-member-call 'mask_ 'boundary_info) 'has_extra))
                                'true
                                null
                                (val-subtract (val-member-call (val-member-call 'mask_ 'window_without_ghost) 'extent 'dir)
                                              (val-member-call (val-member-call 'mask_ 'boundary_info) 'has_extra 'dir))
                                'mask_
                                'mask_
                                (val-member-call 'mask_ 'find_consumer 'CPU_INDEX)
                                (val-member-call 'mask_ 'find_consumer 'GPU_INDEX)
                                (list DI-chunk 'mask_)
                                (concat (val-call (type-template 'const_cast (ptr SpatialMask))
                                                  (take-ptr 'mask_))
                                        '->
                                        (val-call 'add_consumer 'GPU_INDEX))
                                null
                                (stmt-dcl-variable (const SpatialMask) 'mask_))
                (bs-Resize-rhs null
                               null
                               (bm-constructor (function-pmtr (ref (const SpatialMask)) 'm)
                                               (val-construct 'mask_ 'm)
                                               null)
                               'mask_
                               null
                               (stmt-dcl-variable (const SpatialMask) 'mask_))
                (bs-SeqWalk-rhs null
                                (bm-constructor (function-pmtr (ref (const SpatialMask)) 'm)
                                                (val-construct 'mask_ 'm)
                                                null)
                                vt-chunk
                                (val-call 'mask_ index-arg)
                                null
                                (stmt-dcl-variable (const SpatialMask) 'mask_))
                (bs-gpu-rhs null
                            (bm-constructor
                             (list (function-pmtr (const 'int) DI-chunk)
                                   (function-pmtr (ref (const SpatialMask)) 'm))
                             (list (val-construct 'bitField_ (val-member-call 'm 'mask_values 'GPU_INDEX))
                                   (val-construct 'xOffset_ (val-add (val-member-call (val-member-call 'm 'window_with_ghost)
                                                                                      'offset
                                                                                      0)
                                                                     (val-member-call (val-member-call 'm 'get_ghost_data) 'get_minus 0)))
                                   (val-construct 'yOffset_ (val-add (val-member-call (val-member-call 'm 'window_with_ghost)
                                                                                      'offset
                                                                                      1)
                                                                     (val-member-call (val-member-call 'm 'get_ghost_data) 'get_minus 1)))
                                   (val-construct 'zOffset_ (val-add (val-member-call (val-member-call 'm 'window_with_ghost)
                                                                                      'offset
                                                                                      2)
                                                                     (val-member-call (val-member-call 'm 'get_ghost_data) 'get_minus 2)))
                                   (val-construct 'xGlob_ (val-member-call (val-member-call 'm 'window_with_ghost)
                                                                           'glob_dim
                                                                           0))
                                   (val-construct 'yGlob_ (val-member-call (val-member-call 'm 'window_with_ghost)
                                                                           'glob_dim
                                                                           1)))
                             null)
                            'bool
                            (val-call 'deref index-arg)
                            null
                            (list (device-only (def-returning-function (constize (dcl-function 'find_position 'int index-pmtr))
                                                 (list (val-typed-const-assign 'int 'newX (val-add 'xOffset_ 'x))
                                                       (val-typed-const-assign 'int 'newY (val-add 'yOffset_ 'y))
                                                       (val-typed-const-assign 'int 'newZ (val-add 'zOffset_ 'z)))
                                                 (val-add 'newX (val-multiply 'xGlob_ (paren (val-add 'newY (val-multiply 'yGlob_ 'newZ)))))))
                                  (device-only (def-returning-function (constize (dcl-function 'find_block 'int (function-pmtr (const 'int) 'position)))
                                                 null
                                                 (val-divide 'position 'NEBO_INT_BIT)))
                                  (device-only (def-returning-function (constize (dcl-function 'find_bit_position 'int (function-pmtr (const 'int) 'position)))
                                                 null
                                                 (val-modulo 'position 'NEBO_INT_BIT)))
                                  (device-only (def-returning-function (constize (dcl-function 'deref 'int index-pmtr))
                                                 (val-typed-const-assign 'int 'position (val-call 'find_position index-arg))
                                                 (val-not (val-not (concat '* (add-spaces (paren (val-add 'bitField_ (val-call 'find_block 'position)))
                                                                                          '&
                                                                                          (paren (add-spaces 1 '<< (val-call 'find_bit_position 'position)))))))))
                                  (stmt-dcl-variable (ptr (const (add-spaces 'unsigned 'int))) 'bitField_)
                                  (stmt-dcl-variable (const 'int) 'xOffset_)
                                  (stmt-dcl-variable (const 'int) 'yOffset_)
                                  (stmt-dcl-variable (const 'int) 'zOffset_)
                                  (stmt-dcl-variable (const 'int) 'xGlob_)
                                  (stmt-dcl-variable (const 'int) 'yGlob_))))
  ))
