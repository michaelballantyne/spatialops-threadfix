#lang fulmar

"/*
 * Copyright (c) 2014 The University of Utah
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
"

(require "FulmarAbbreviations.fmr")
(require "NeboCore.fmr")
(require "NeboRhsCore.fmr")

(define SpatialMask (scope 'structured (tpl-use 'SpatialMask FT-chunk)))

(pp-header-file
 'NEBO_MASK_H
 (n 'SpatialOps
    (build-struct 'NeboMask
                  std-FT
                  null
                  null
                  (bs-Initial-rhs null
                                  null
                                  (bm-constructor (adcr SpatialMask 'm)
                                                  (cons-asgn 'mask_ 'm)
                                                  null)
                                  (n+ (mfc 'mask_ 'get_valid_ghost_data)
                                      (fc 'point_to_ghost (mfc (mfc 'mask_ 'boundary_info) 'has_extra)))
                                  (fc 'point_to_ghost (mfc (mfc 'mask_ 'boundary_info) 'has_extra))
                                  'true
                                  null
                                  (n- (mfc (mfc 'mask_ 'window_without_ghost) 'extent 'dir)
                                      (mfc (mfc 'mask_ 'boundary_info) 'has_extra 'dir))
                                  'mask_
                                  'mask_
                                  (mfc 'mask_ 'find_consumer 'LOCAL_RAM "0")
                                  (mfc 'mask_ 'find_consumer 'EXTERNAL_CUDA_GPU DI-chunk)
                                  (list DI-chunk 'mask_)
                                  (c (fc (tpl-use 'const_cast (ptr SpatialMask))
                                         (take-ptr 'mask_))
                                     '->
                                     (fc 'add_consumer 'EXTERNAL_CUDA_GPU DI-chunk))
                                  null
                                  (sadc SpatialMask 'mask_))
                  (bs-Resize-rhs null
                                 null
                                 (bm-constructor (adcr SpatialMask 'm)
                                                 (cons-asgn 'mask_ 'm)
                                                 null)
                                 'mask_
                                 null
                                 (sadc SpatialMask 'mask_))
                  (bs-SeqWalk-rhs null
                                  (bm-constructor (adcr SpatialMask 'm)
                                                  (cons-asgn 'mask_ 'm)
                                                  null)
                                  vt-chunk
                                  (fc 'mask_ index-arg)
                                  null
                                  (sadc SpatialMask 'mask_))
                  (bs-gpu-rhs null
                              (bm-constructor
                               (list (adc 'int DI-chunk)
                                     (adcr SpatialMask 'm))
                               (list (cons-asgn 'bitField_ (mfc 'm 'mask_values 'EXTERNAL_CUDA_GPU DI-chunk))
                                     (cons-asgn 'xOffset_ (n+ (mfc (mfc 'm 'window_with_ghost)
                                                                   'offset
                                                                   "0")
                                                              (mfc (mfc 'm 'get_ghost_data) 'get_minus "0")))
                                     (cons-asgn 'yOffset_ (n+ (mfc (mfc 'm 'window_with_ghost)
                                                                   'offset
                                                                   "1")
                                                              (mfc (mfc 'm 'get_ghost_data) 'get_minus "1")))
                                     (cons-asgn 'zOffset_ (n+ (mfc (mfc 'm 'window_with_ghost)
                                                                   'offset
                                                                   "2")
                                                              (mfc (mfc 'm 'get_ghost_data) 'get_minus "2")))
                                     (cons-asgn 'xGlob_ (mfc (mfc 'm 'window_with_ghost)
                                                             'glob_dim
                                                             "0"))
                                     (cons-asgn 'yGlob_ (mfc (mfc 'm 'window_with_ghost)
                                                             'glob_dim
                                                             "1")))
                               null)
                              'bool
                              (fc 'deref index-arg)
                              null
                              (list (device-use (r-fcn-def (constize (fcn-dcl 'find_position 'int index-pmtr))
                                                           (list (nt=c 'int 'newX (n+ 'xOffset_ 'x))
                                                                 (nt=c 'int 'newY (n+ 'yOffset_ 'y))
                                                                 (nt=c 'int 'newZ (n+ 'zOffset_ 'z)))
                                                           (n+ 'newX (n* 'xGlob_ (par (n+ 'newY (n* 'yGlob_ 'newZ)))))))
                                    (device-use (r-fcn-def (constize (fcn-dcl 'find_block 'int (adc 'int 'position)))
                                                           null
                                                           (n/ 'position 'NEBO_INT_BIT)))
                                    (device-use (r-fcn-def (constize (fcn-dcl 'find_bit_position 'int (adc 'int 'position)))
                                                           null
                                                           (n% 'position 'NEBO_INT_BIT)))
                                    (device-use (r-fcn-def (constize (fcn-dcl 'deref 'int index-pmtr))
                                                           (nt=c 'int 'position (fc 'find_position index-arg))
                                                           (n-not (n-not (c '* (bs (p (n+ 'bitField_ (fc 'find_block 'position)))
                                                                                   '&
                                                                                   (p (bs "1" '<< (fc 'find_bit_position 'position)))))))))
                                    (sadcp (bs 'unsigned 'int) 'bitField_)
                                    (sadc 'int 'xOffset_)
                                    (sadc 'int 'yOffset_)
                                    (sadc 'int 'zOffset_)
                                    (sadc 'int 'xGlob_)
                                    (sadc 'int 'yGlob_))))
    ))
